/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vng.bankinggateway.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TStorage {

  public interface Iface {

    public int storeTranx(vng.bankinggateway.thrift.T_Transaction tx) throws org.apache.thrift.TException;

    public int updateTransaction(vng.bankinggateway.thrift.T_Transaction tx) throws org.apache.thrift.TException;

    public int updateTranxAndStatus(vng.bankinggateway.thrift.T_Transaction tx, short txStatus, String responseCode) throws org.apache.thrift.TException;

    public int updateTranxStatus(vng.bankinggateway.thrift.T_TranStat tranxStat) throws org.apache.thrift.TException;

    public List<vng.bankinggateway.thrift.T_TransactionReport> getTranxs(String day, short txStatus, boolean allStatus) throws org.apache.thrift.TException;

    public List<vng.bankinggateway.thrift.T_TransactionReport> getTranxsWithConfirmStatus(String day, short confirmStatus) throws org.apache.thrift.TException;

    public vng.bankinggateway.thrift.T_Transaction getTransaction(int txID, String time) throws org.apache.thrift.TException;

    public vng.bankinggateway.thrift.T_Transaction getTransactionWithBankCode(int txID, String time, String bankCode) throws org.apache.thrift.TException;

    public int generateTransID(String day) throws org.apache.thrift.TException;

    public int generateQueryID(String day) throws org.apache.thrift.TException;

    public vng.bankinggateway.thrift.T_TranStat getTranxStatus(String refID, String day) throws org.apache.thrift.TException;

    public int generateTransIdByBankCode(String bankCode) throws org.apache.thrift.TException;

    public List<vng.bankinggateway.thrift.T_TransactionReport> getTranxsWithBankCode(String day, short txStatus, boolean allStatus, String bankCode) throws org.apache.thrift.TException;

    public List<vng.bankinggateway.thrift.T_TransactionReport> getTranxsWithConfirmStatusAndBankCode(String day, short confirmStatus, String bankCode) throws org.apache.thrift.TException;

    public int insertTask() throws org.apache.thrift.TException;

    public int updateTaskEveryDay() throws org.apache.thrift.TException;

    public int updateTaskStart(vng.bankinggateway.thrift.T_Task task) throws org.apache.thrift.TException;

    public int updateTaskStop(vng.bankinggateway.thrift.T_Task task) throws org.apache.thrift.TException;

    public vng.bankinggateway.thrift.T_Task getTaskById(int id) throws org.apache.thrift.TException;

    public vng.bankinggateway.thrift.T_Task getTaskByTaskId(String taskId) throws org.apache.thrift.TException;

    public int deleteTaskByTaskId(String taskId) throws org.apache.thrift.TException;

    public List<vng.bankinggateway.thrift.T_Task> getListTaskByStatus(short status) throws org.apache.thrift.TException;

    public List<vng.bankinggateway.thrift.T_Task> getListTaskByStartDate(String startDate) throws org.apache.thrift.TException;

    public List<vng.bankinggateway.thrift.T_Task> getListTaskToday() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void storeTranx(vng.bankinggateway.thrift.T_Transaction tx, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.storeTranx_call> resultHandler) throws org.apache.thrift.TException;

    public void updateTransaction(vng.bankinggateway.thrift.T_Transaction tx, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateTransaction_call> resultHandler) throws org.apache.thrift.TException;

    public void updateTranxAndStatus(vng.bankinggateway.thrift.T_Transaction tx, short txStatus, String responseCode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateTranxAndStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void updateTranxStatus(vng.bankinggateway.thrift.T_TranStat tranxStat, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateTranxStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void getTranxs(String day, short txStatus, boolean allStatus, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTranxs_call> resultHandler) throws org.apache.thrift.TException;

    public void getTranxsWithConfirmStatus(String day, short confirmStatus, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTranxsWithConfirmStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void getTransaction(int txID, String time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTransaction_call> resultHandler) throws org.apache.thrift.TException;

    public void getTransactionWithBankCode(int txID, String time, String bankCode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTransactionWithBankCode_call> resultHandler) throws org.apache.thrift.TException;

    public void generateTransID(String day, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.generateTransID_call> resultHandler) throws org.apache.thrift.TException;

    public void generateQueryID(String day, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.generateQueryID_call> resultHandler) throws org.apache.thrift.TException;

    public void getTranxStatus(String refID, String day, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTranxStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void generateTransIdByBankCode(String bankCode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.generateTransIdByBankCode_call> resultHandler) throws org.apache.thrift.TException;

    public void getTranxsWithBankCode(String day, short txStatus, boolean allStatus, String bankCode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTranxsWithBankCode_call> resultHandler) throws org.apache.thrift.TException;

    public void getTranxsWithConfirmStatusAndBankCode(String day, short confirmStatus, String bankCode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTranxsWithConfirmStatusAndBankCode_call> resultHandler) throws org.apache.thrift.TException;

    public void insertTask(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.insertTask_call> resultHandler) throws org.apache.thrift.TException;

    public void updateTaskEveryDay(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateTaskEveryDay_call> resultHandler) throws org.apache.thrift.TException;

    public void updateTaskStart(vng.bankinggateway.thrift.T_Task task, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateTaskStart_call> resultHandler) throws org.apache.thrift.TException;

    public void updateTaskStop(vng.bankinggateway.thrift.T_Task task, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateTaskStop_call> resultHandler) throws org.apache.thrift.TException;

    public void getTaskById(int id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTaskById_call> resultHandler) throws org.apache.thrift.TException;

    public void getTaskByTaskId(String taskId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTaskByTaskId_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteTaskByTaskId(String taskId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteTaskByTaskId_call> resultHandler) throws org.apache.thrift.TException;

    public void getListTaskByStatus(short status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getListTaskByStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void getListTaskByStartDate(String startDate, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getListTaskByStartDate_call> resultHandler) throws org.apache.thrift.TException;

    public void getListTaskToday(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getListTaskToday_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int storeTranx(vng.bankinggateway.thrift.T_Transaction tx) throws org.apache.thrift.TException
    {
      send_storeTranx(tx);
      return recv_storeTranx();
    }

    public void send_storeTranx(vng.bankinggateway.thrift.T_Transaction tx) throws org.apache.thrift.TException
    {
      storeTranx_args args = new storeTranx_args();
      args.setTx(tx);
      sendBase("storeTranx", args);
    }

    public int recv_storeTranx() throws org.apache.thrift.TException
    {
      storeTranx_result result = new storeTranx_result();
      receiveBase(result, "storeTranx");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeTranx failed: unknown result");
    }

    public int updateTransaction(vng.bankinggateway.thrift.T_Transaction tx) throws org.apache.thrift.TException
    {
      send_updateTransaction(tx);
      return recv_updateTransaction();
    }

    public void send_updateTransaction(vng.bankinggateway.thrift.T_Transaction tx) throws org.apache.thrift.TException
    {
      updateTransaction_args args = new updateTransaction_args();
      args.setTx(tx);
      sendBase("updateTransaction", args);
    }

    public int recv_updateTransaction() throws org.apache.thrift.TException
    {
      updateTransaction_result result = new updateTransaction_result();
      receiveBase(result, "updateTransaction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTransaction failed: unknown result");
    }

    public int updateTranxAndStatus(vng.bankinggateway.thrift.T_Transaction tx, short txStatus, String responseCode) throws org.apache.thrift.TException
    {
      send_updateTranxAndStatus(tx, txStatus, responseCode);
      return recv_updateTranxAndStatus();
    }

    public void send_updateTranxAndStatus(vng.bankinggateway.thrift.T_Transaction tx, short txStatus, String responseCode) throws org.apache.thrift.TException
    {
      updateTranxAndStatus_args args = new updateTranxAndStatus_args();
      args.setTx(tx);
      args.setTxStatus(txStatus);
      args.setResponseCode(responseCode);
      sendBase("updateTranxAndStatus", args);
    }

    public int recv_updateTranxAndStatus() throws org.apache.thrift.TException
    {
      updateTranxAndStatus_result result = new updateTranxAndStatus_result();
      receiveBase(result, "updateTranxAndStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTranxAndStatus failed: unknown result");
    }

    public int updateTranxStatus(vng.bankinggateway.thrift.T_TranStat tranxStat) throws org.apache.thrift.TException
    {
      send_updateTranxStatus(tranxStat);
      return recv_updateTranxStatus();
    }

    public void send_updateTranxStatus(vng.bankinggateway.thrift.T_TranStat tranxStat) throws org.apache.thrift.TException
    {
      updateTranxStatus_args args = new updateTranxStatus_args();
      args.setTranxStat(tranxStat);
      sendBase("updateTranxStatus", args);
    }

    public int recv_updateTranxStatus() throws org.apache.thrift.TException
    {
      updateTranxStatus_result result = new updateTranxStatus_result();
      receiveBase(result, "updateTranxStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTranxStatus failed: unknown result");
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> getTranxs(String day, short txStatus, boolean allStatus) throws org.apache.thrift.TException
    {
      send_getTranxs(day, txStatus, allStatus);
      return recv_getTranxs();
    }

    public void send_getTranxs(String day, short txStatus, boolean allStatus) throws org.apache.thrift.TException
    {
      getTranxs_args args = new getTranxs_args();
      args.setDay(day);
      args.setTxStatus(txStatus);
      args.setAllStatus(allStatus);
      sendBase("getTranxs", args);
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> recv_getTranxs() throws org.apache.thrift.TException
    {
      getTranxs_result result = new getTranxs_result();
      receiveBase(result, "getTranxs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTranxs failed: unknown result");
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> getTranxsWithConfirmStatus(String day, short confirmStatus) throws org.apache.thrift.TException
    {
      send_getTranxsWithConfirmStatus(day, confirmStatus);
      return recv_getTranxsWithConfirmStatus();
    }

    public void send_getTranxsWithConfirmStatus(String day, short confirmStatus) throws org.apache.thrift.TException
    {
      getTranxsWithConfirmStatus_args args = new getTranxsWithConfirmStatus_args();
      args.setDay(day);
      args.setConfirmStatus(confirmStatus);
      sendBase("getTranxsWithConfirmStatus", args);
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> recv_getTranxsWithConfirmStatus() throws org.apache.thrift.TException
    {
      getTranxsWithConfirmStatus_result result = new getTranxsWithConfirmStatus_result();
      receiveBase(result, "getTranxsWithConfirmStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTranxsWithConfirmStatus failed: unknown result");
    }

    public vng.bankinggateway.thrift.T_Transaction getTransaction(int txID, String time) throws org.apache.thrift.TException
    {
      send_getTransaction(txID, time);
      return recv_getTransaction();
    }

    public void send_getTransaction(int txID, String time) throws org.apache.thrift.TException
    {
      getTransaction_args args = new getTransaction_args();
      args.setTxID(txID);
      args.setTime(time);
      sendBase("getTransaction", args);
    }

    public vng.bankinggateway.thrift.T_Transaction recv_getTransaction() throws org.apache.thrift.TException
    {
      getTransaction_result result = new getTransaction_result();
      receiveBase(result, "getTransaction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTransaction failed: unknown result");
    }

    public vng.bankinggateway.thrift.T_Transaction getTransactionWithBankCode(int txID, String time, String bankCode) throws org.apache.thrift.TException
    {
      send_getTransactionWithBankCode(txID, time, bankCode);
      return recv_getTransactionWithBankCode();
    }

    public void send_getTransactionWithBankCode(int txID, String time, String bankCode) throws org.apache.thrift.TException
    {
      getTransactionWithBankCode_args args = new getTransactionWithBankCode_args();
      args.setTxID(txID);
      args.setTime(time);
      args.setBankCode(bankCode);
      sendBase("getTransactionWithBankCode", args);
    }

    public vng.bankinggateway.thrift.T_Transaction recv_getTransactionWithBankCode() throws org.apache.thrift.TException
    {
      getTransactionWithBankCode_result result = new getTransactionWithBankCode_result();
      receiveBase(result, "getTransactionWithBankCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTransactionWithBankCode failed: unknown result");
    }

    public int generateTransID(String day) throws org.apache.thrift.TException
    {
      send_generateTransID(day);
      return recv_generateTransID();
    }

    public void send_generateTransID(String day) throws org.apache.thrift.TException
    {
      generateTransID_args args = new generateTransID_args();
      args.setDay(day);
      sendBase("generateTransID", args);
    }

    public int recv_generateTransID() throws org.apache.thrift.TException
    {
      generateTransID_result result = new generateTransID_result();
      receiveBase(result, "generateTransID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateTransID failed: unknown result");
    }

    public int generateQueryID(String day) throws org.apache.thrift.TException
    {
      send_generateQueryID(day);
      return recv_generateQueryID();
    }

    public void send_generateQueryID(String day) throws org.apache.thrift.TException
    {
      generateQueryID_args args = new generateQueryID_args();
      args.setDay(day);
      sendBase("generateQueryID", args);
    }

    public int recv_generateQueryID() throws org.apache.thrift.TException
    {
      generateQueryID_result result = new generateQueryID_result();
      receiveBase(result, "generateQueryID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateQueryID failed: unknown result");
    }

    public vng.bankinggateway.thrift.T_TranStat getTranxStatus(String refID, String day) throws org.apache.thrift.TException
    {
      send_getTranxStatus(refID, day);
      return recv_getTranxStatus();
    }

    public void send_getTranxStatus(String refID, String day) throws org.apache.thrift.TException
    {
      getTranxStatus_args args = new getTranxStatus_args();
      args.setRefID(refID);
      args.setDay(day);
      sendBase("getTranxStatus", args);
    }

    public vng.bankinggateway.thrift.T_TranStat recv_getTranxStatus() throws org.apache.thrift.TException
    {
      getTranxStatus_result result = new getTranxStatus_result();
      receiveBase(result, "getTranxStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTranxStatus failed: unknown result");
    }

    public int generateTransIdByBankCode(String bankCode) throws org.apache.thrift.TException
    {
      send_generateTransIdByBankCode(bankCode);
      return recv_generateTransIdByBankCode();
    }

    public void send_generateTransIdByBankCode(String bankCode) throws org.apache.thrift.TException
    {
      generateTransIdByBankCode_args args = new generateTransIdByBankCode_args();
      args.setBankCode(bankCode);
      sendBase("generateTransIdByBankCode", args);
    }

    public int recv_generateTransIdByBankCode() throws org.apache.thrift.TException
    {
      generateTransIdByBankCode_result result = new generateTransIdByBankCode_result();
      receiveBase(result, "generateTransIdByBankCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateTransIdByBankCode failed: unknown result");
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> getTranxsWithBankCode(String day, short txStatus, boolean allStatus, String bankCode) throws org.apache.thrift.TException
    {
      send_getTranxsWithBankCode(day, txStatus, allStatus, bankCode);
      return recv_getTranxsWithBankCode();
    }

    public void send_getTranxsWithBankCode(String day, short txStatus, boolean allStatus, String bankCode) throws org.apache.thrift.TException
    {
      getTranxsWithBankCode_args args = new getTranxsWithBankCode_args();
      args.setDay(day);
      args.setTxStatus(txStatus);
      args.setAllStatus(allStatus);
      args.setBankCode(bankCode);
      sendBase("getTranxsWithBankCode", args);
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> recv_getTranxsWithBankCode() throws org.apache.thrift.TException
    {
      getTranxsWithBankCode_result result = new getTranxsWithBankCode_result();
      receiveBase(result, "getTranxsWithBankCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTranxsWithBankCode failed: unknown result");
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> getTranxsWithConfirmStatusAndBankCode(String day, short confirmStatus, String bankCode) throws org.apache.thrift.TException
    {
      send_getTranxsWithConfirmStatusAndBankCode(day, confirmStatus, bankCode);
      return recv_getTranxsWithConfirmStatusAndBankCode();
    }

    public void send_getTranxsWithConfirmStatusAndBankCode(String day, short confirmStatus, String bankCode) throws org.apache.thrift.TException
    {
      getTranxsWithConfirmStatusAndBankCode_args args = new getTranxsWithConfirmStatusAndBankCode_args();
      args.setDay(day);
      args.setConfirmStatus(confirmStatus);
      args.setBankCode(bankCode);
      sendBase("getTranxsWithConfirmStatusAndBankCode", args);
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> recv_getTranxsWithConfirmStatusAndBankCode() throws org.apache.thrift.TException
    {
      getTranxsWithConfirmStatusAndBankCode_result result = new getTranxsWithConfirmStatusAndBankCode_result();
      receiveBase(result, "getTranxsWithConfirmStatusAndBankCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTranxsWithConfirmStatusAndBankCode failed: unknown result");
    }

    public int insertTask() throws org.apache.thrift.TException
    {
      send_insertTask();
      return recv_insertTask();
    }

    public void send_insertTask() throws org.apache.thrift.TException
    {
      insertTask_args args = new insertTask_args();
      sendBase("insertTask", args);
    }

    public int recv_insertTask() throws org.apache.thrift.TException
    {
      insertTask_result result = new insertTask_result();
      receiveBase(result, "insertTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertTask failed: unknown result");
    }

    public int updateTaskEveryDay() throws org.apache.thrift.TException
    {
      send_updateTaskEveryDay();
      return recv_updateTaskEveryDay();
    }

    public void send_updateTaskEveryDay() throws org.apache.thrift.TException
    {
      updateTaskEveryDay_args args = new updateTaskEveryDay_args();
      sendBase("updateTaskEveryDay", args);
    }

    public int recv_updateTaskEveryDay() throws org.apache.thrift.TException
    {
      updateTaskEveryDay_result result = new updateTaskEveryDay_result();
      receiveBase(result, "updateTaskEveryDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTaskEveryDay failed: unknown result");
    }

    public int updateTaskStart(vng.bankinggateway.thrift.T_Task task) throws org.apache.thrift.TException
    {
      send_updateTaskStart(task);
      return recv_updateTaskStart();
    }

    public void send_updateTaskStart(vng.bankinggateway.thrift.T_Task task) throws org.apache.thrift.TException
    {
      updateTaskStart_args args = new updateTaskStart_args();
      args.setTask(task);
      sendBase("updateTaskStart", args);
    }

    public int recv_updateTaskStart() throws org.apache.thrift.TException
    {
      updateTaskStart_result result = new updateTaskStart_result();
      receiveBase(result, "updateTaskStart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTaskStart failed: unknown result");
    }

    public int updateTaskStop(vng.bankinggateway.thrift.T_Task task) throws org.apache.thrift.TException
    {
      send_updateTaskStop(task);
      return recv_updateTaskStop();
    }

    public void send_updateTaskStop(vng.bankinggateway.thrift.T_Task task) throws org.apache.thrift.TException
    {
      updateTaskStop_args args = new updateTaskStop_args();
      args.setTask(task);
      sendBase("updateTaskStop", args);
    }

    public int recv_updateTaskStop() throws org.apache.thrift.TException
    {
      updateTaskStop_result result = new updateTaskStop_result();
      receiveBase(result, "updateTaskStop");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTaskStop failed: unknown result");
    }

    public vng.bankinggateway.thrift.T_Task getTaskById(int id) throws org.apache.thrift.TException
    {
      send_getTaskById(id);
      return recv_getTaskById();
    }

    public void send_getTaskById(int id) throws org.apache.thrift.TException
    {
      getTaskById_args args = new getTaskById_args();
      args.setId(id);
      sendBase("getTaskById", args);
    }

    public vng.bankinggateway.thrift.T_Task recv_getTaskById() throws org.apache.thrift.TException
    {
      getTaskById_result result = new getTaskById_result();
      receiveBase(result, "getTaskById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTaskById failed: unknown result");
    }

    public vng.bankinggateway.thrift.T_Task getTaskByTaskId(String taskId) throws org.apache.thrift.TException
    {
      send_getTaskByTaskId(taskId);
      return recv_getTaskByTaskId();
    }

    public void send_getTaskByTaskId(String taskId) throws org.apache.thrift.TException
    {
      getTaskByTaskId_args args = new getTaskByTaskId_args();
      args.setTaskId(taskId);
      sendBase("getTaskByTaskId", args);
    }

    public vng.bankinggateway.thrift.T_Task recv_getTaskByTaskId() throws org.apache.thrift.TException
    {
      getTaskByTaskId_result result = new getTaskByTaskId_result();
      receiveBase(result, "getTaskByTaskId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTaskByTaskId failed: unknown result");
    }

    public int deleteTaskByTaskId(String taskId) throws org.apache.thrift.TException
    {
      send_deleteTaskByTaskId(taskId);
      return recv_deleteTaskByTaskId();
    }

    public void send_deleteTaskByTaskId(String taskId) throws org.apache.thrift.TException
    {
      deleteTaskByTaskId_args args = new deleteTaskByTaskId_args();
      args.setTaskId(taskId);
      sendBase("deleteTaskByTaskId", args);
    }

    public int recv_deleteTaskByTaskId() throws org.apache.thrift.TException
    {
      deleteTaskByTaskId_result result = new deleteTaskByTaskId_result();
      receiveBase(result, "deleteTaskByTaskId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteTaskByTaskId failed: unknown result");
    }

    public List<vng.bankinggateway.thrift.T_Task> getListTaskByStatus(short status) throws org.apache.thrift.TException
    {
      send_getListTaskByStatus(status);
      return recv_getListTaskByStatus();
    }

    public void send_getListTaskByStatus(short status) throws org.apache.thrift.TException
    {
      getListTaskByStatus_args args = new getListTaskByStatus_args();
      args.setStatus(status);
      sendBase("getListTaskByStatus", args);
    }

    public List<vng.bankinggateway.thrift.T_Task> recv_getListTaskByStatus() throws org.apache.thrift.TException
    {
      getListTaskByStatus_result result = new getListTaskByStatus_result();
      receiveBase(result, "getListTaskByStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListTaskByStatus failed: unknown result");
    }

    public List<vng.bankinggateway.thrift.T_Task> getListTaskByStartDate(String startDate) throws org.apache.thrift.TException
    {
      send_getListTaskByStartDate(startDate);
      return recv_getListTaskByStartDate();
    }

    public void send_getListTaskByStartDate(String startDate) throws org.apache.thrift.TException
    {
      getListTaskByStartDate_args args = new getListTaskByStartDate_args();
      args.setStartDate(startDate);
      sendBase("getListTaskByStartDate", args);
    }

    public List<vng.bankinggateway.thrift.T_Task> recv_getListTaskByStartDate() throws org.apache.thrift.TException
    {
      getListTaskByStartDate_result result = new getListTaskByStartDate_result();
      receiveBase(result, "getListTaskByStartDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListTaskByStartDate failed: unknown result");
    }

    public List<vng.bankinggateway.thrift.T_Task> getListTaskToday() throws org.apache.thrift.TException
    {
      send_getListTaskToday();
      return recv_getListTaskToday();
    }

    public void send_getListTaskToday() throws org.apache.thrift.TException
    {
      getListTaskToday_args args = new getListTaskToday_args();
      sendBase("getListTaskToday", args);
    }

    public List<vng.bankinggateway.thrift.T_Task> recv_getListTaskToday() throws org.apache.thrift.TException
    {
      getListTaskToday_result result = new getListTaskToday_result();
      receiveBase(result, "getListTaskToday");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListTaskToday failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void storeTranx(vng.bankinggateway.thrift.T_Transaction tx, org.apache.thrift.async.AsyncMethodCallback<storeTranx_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeTranx_call method_call = new storeTranx_call(tx, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeTranx_call extends org.apache.thrift.async.TAsyncMethodCall {
      private vng.bankinggateway.thrift.T_Transaction tx;
      public storeTranx_call(vng.bankinggateway.thrift.T_Transaction tx, org.apache.thrift.async.AsyncMethodCallback<storeTranx_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tx = tx;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeTranx", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeTranx_args args = new storeTranx_args();
        args.setTx(tx);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeTranx();
      }
    }

    public void updateTransaction(vng.bankinggateway.thrift.T_Transaction tx, org.apache.thrift.async.AsyncMethodCallback<updateTransaction_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTransaction_call method_call = new updateTransaction_call(tx, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTransaction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private vng.bankinggateway.thrift.T_Transaction tx;
      public updateTransaction_call(vng.bankinggateway.thrift.T_Transaction tx, org.apache.thrift.async.AsyncMethodCallback<updateTransaction_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tx = tx;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTransaction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTransaction_args args = new updateTransaction_args();
        args.setTx(tx);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTransaction();
      }
    }

    public void updateTranxAndStatus(vng.bankinggateway.thrift.T_Transaction tx, short txStatus, String responseCode, org.apache.thrift.async.AsyncMethodCallback<updateTranxAndStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTranxAndStatus_call method_call = new updateTranxAndStatus_call(tx, txStatus, responseCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTranxAndStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private vng.bankinggateway.thrift.T_Transaction tx;
      private short txStatus;
      private String responseCode;
      public updateTranxAndStatus_call(vng.bankinggateway.thrift.T_Transaction tx, short txStatus, String responseCode, org.apache.thrift.async.AsyncMethodCallback<updateTranxAndStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tx = tx;
        this.txStatus = txStatus;
        this.responseCode = responseCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTranxAndStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTranxAndStatus_args args = new updateTranxAndStatus_args();
        args.setTx(tx);
        args.setTxStatus(txStatus);
        args.setResponseCode(responseCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTranxAndStatus();
      }
    }

    public void updateTranxStatus(vng.bankinggateway.thrift.T_TranStat tranxStat, org.apache.thrift.async.AsyncMethodCallback<updateTranxStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTranxStatus_call method_call = new updateTranxStatus_call(tranxStat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTranxStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private vng.bankinggateway.thrift.T_TranStat tranxStat;
      public updateTranxStatus_call(vng.bankinggateway.thrift.T_TranStat tranxStat, org.apache.thrift.async.AsyncMethodCallback<updateTranxStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tranxStat = tranxStat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTranxStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTranxStatus_args args = new updateTranxStatus_args();
        args.setTranxStat(tranxStat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTranxStatus();
      }
    }

    public void getTranxs(String day, short txStatus, boolean allStatus, org.apache.thrift.async.AsyncMethodCallback<getTranxs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTranxs_call method_call = new getTranxs_call(day, txStatus, allStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTranxs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String day;
      private short txStatus;
      private boolean allStatus;
      public getTranxs_call(String day, short txStatus, boolean allStatus, org.apache.thrift.async.AsyncMethodCallback<getTranxs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
        this.txStatus = txStatus;
        this.allStatus = allStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTranxs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTranxs_args args = new getTranxs_args();
        args.setDay(day);
        args.setTxStatus(txStatus);
        args.setAllStatus(allStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.bankinggateway.thrift.T_TransactionReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTranxs();
      }
    }

    public void getTranxsWithConfirmStatus(String day, short confirmStatus, org.apache.thrift.async.AsyncMethodCallback<getTranxsWithConfirmStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTranxsWithConfirmStatus_call method_call = new getTranxsWithConfirmStatus_call(day, confirmStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTranxsWithConfirmStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String day;
      private short confirmStatus;
      public getTranxsWithConfirmStatus_call(String day, short confirmStatus, org.apache.thrift.async.AsyncMethodCallback<getTranxsWithConfirmStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
        this.confirmStatus = confirmStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTranxsWithConfirmStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTranxsWithConfirmStatus_args args = new getTranxsWithConfirmStatus_args();
        args.setDay(day);
        args.setConfirmStatus(confirmStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.bankinggateway.thrift.T_TransactionReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTranxsWithConfirmStatus();
      }
    }

    public void getTransaction(int txID, String time, org.apache.thrift.async.AsyncMethodCallback<getTransaction_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTransaction_call method_call = new getTransaction_call(txID, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTransaction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int txID;
      private String time;
      public getTransaction_call(int txID, String time, org.apache.thrift.async.AsyncMethodCallback<getTransaction_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.txID = txID;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTransaction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTransaction_args args = new getTransaction_args();
        args.setTxID(txID);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.bankinggateway.thrift.T_Transaction getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTransaction();
      }
    }

    public void getTransactionWithBankCode(int txID, String time, String bankCode, org.apache.thrift.async.AsyncMethodCallback<getTransactionWithBankCode_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTransactionWithBankCode_call method_call = new getTransactionWithBankCode_call(txID, time, bankCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTransactionWithBankCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int txID;
      private String time;
      private String bankCode;
      public getTransactionWithBankCode_call(int txID, String time, String bankCode, org.apache.thrift.async.AsyncMethodCallback<getTransactionWithBankCode_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.txID = txID;
        this.time = time;
        this.bankCode = bankCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTransactionWithBankCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTransactionWithBankCode_args args = new getTransactionWithBankCode_args();
        args.setTxID(txID);
        args.setTime(time);
        args.setBankCode(bankCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.bankinggateway.thrift.T_Transaction getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTransactionWithBankCode();
      }
    }

    public void generateTransID(String day, org.apache.thrift.async.AsyncMethodCallback<generateTransID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateTransID_call method_call = new generateTransID_call(day, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateTransID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String day;
      public generateTransID_call(String day, org.apache.thrift.async.AsyncMethodCallback<generateTransID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateTransID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateTransID_args args = new generateTransID_args();
        args.setDay(day);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generateTransID();
      }
    }

    public void generateQueryID(String day, org.apache.thrift.async.AsyncMethodCallback<generateQueryID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateQueryID_call method_call = new generateQueryID_call(day, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateQueryID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String day;
      public generateQueryID_call(String day, org.apache.thrift.async.AsyncMethodCallback<generateQueryID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateQueryID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateQueryID_args args = new generateQueryID_args();
        args.setDay(day);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generateQueryID();
      }
    }

    public void getTranxStatus(String refID, String day, org.apache.thrift.async.AsyncMethodCallback<getTranxStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTranxStatus_call method_call = new getTranxStatus_call(refID, day, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTranxStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String refID;
      private String day;
      public getTranxStatus_call(String refID, String day, org.apache.thrift.async.AsyncMethodCallback<getTranxStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refID = refID;
        this.day = day;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTranxStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTranxStatus_args args = new getTranxStatus_args();
        args.setRefID(refID);
        args.setDay(day);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.bankinggateway.thrift.T_TranStat getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTranxStatus();
      }
    }

    public void generateTransIdByBankCode(String bankCode, org.apache.thrift.async.AsyncMethodCallback<generateTransIdByBankCode_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateTransIdByBankCode_call method_call = new generateTransIdByBankCode_call(bankCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateTransIdByBankCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bankCode;
      public generateTransIdByBankCode_call(String bankCode, org.apache.thrift.async.AsyncMethodCallback<generateTransIdByBankCode_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankCode = bankCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateTransIdByBankCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateTransIdByBankCode_args args = new generateTransIdByBankCode_args();
        args.setBankCode(bankCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generateTransIdByBankCode();
      }
    }

    public void getTranxsWithBankCode(String day, short txStatus, boolean allStatus, String bankCode, org.apache.thrift.async.AsyncMethodCallback<getTranxsWithBankCode_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTranxsWithBankCode_call method_call = new getTranxsWithBankCode_call(day, txStatus, allStatus, bankCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTranxsWithBankCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String day;
      private short txStatus;
      private boolean allStatus;
      private String bankCode;
      public getTranxsWithBankCode_call(String day, short txStatus, boolean allStatus, String bankCode, org.apache.thrift.async.AsyncMethodCallback<getTranxsWithBankCode_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
        this.txStatus = txStatus;
        this.allStatus = allStatus;
        this.bankCode = bankCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTranxsWithBankCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTranxsWithBankCode_args args = new getTranxsWithBankCode_args();
        args.setDay(day);
        args.setTxStatus(txStatus);
        args.setAllStatus(allStatus);
        args.setBankCode(bankCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.bankinggateway.thrift.T_TransactionReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTranxsWithBankCode();
      }
    }

    public void getTranxsWithConfirmStatusAndBankCode(String day, short confirmStatus, String bankCode, org.apache.thrift.async.AsyncMethodCallback<getTranxsWithConfirmStatusAndBankCode_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTranxsWithConfirmStatusAndBankCode_call method_call = new getTranxsWithConfirmStatusAndBankCode_call(day, confirmStatus, bankCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTranxsWithConfirmStatusAndBankCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String day;
      private short confirmStatus;
      private String bankCode;
      public getTranxsWithConfirmStatusAndBankCode_call(String day, short confirmStatus, String bankCode, org.apache.thrift.async.AsyncMethodCallback<getTranxsWithConfirmStatusAndBankCode_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
        this.confirmStatus = confirmStatus;
        this.bankCode = bankCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTranxsWithConfirmStatusAndBankCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTranxsWithConfirmStatusAndBankCode_args args = new getTranxsWithConfirmStatusAndBankCode_args();
        args.setDay(day);
        args.setConfirmStatus(confirmStatus);
        args.setBankCode(bankCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.bankinggateway.thrift.T_TransactionReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTranxsWithConfirmStatusAndBankCode();
      }
    }

    public void insertTask(org.apache.thrift.async.AsyncMethodCallback<insertTask_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertTask_call method_call = new insertTask_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      public insertTask_call(org.apache.thrift.async.AsyncMethodCallback<insertTask_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertTask_args args = new insertTask_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertTask();
      }
    }

    public void updateTaskEveryDay(org.apache.thrift.async.AsyncMethodCallback<updateTaskEveryDay_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTaskEveryDay_call method_call = new updateTaskEveryDay_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTaskEveryDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      public updateTaskEveryDay_call(org.apache.thrift.async.AsyncMethodCallback<updateTaskEveryDay_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTaskEveryDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTaskEveryDay_args args = new updateTaskEveryDay_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTaskEveryDay();
      }
    }

    public void updateTaskStart(vng.bankinggateway.thrift.T_Task task, org.apache.thrift.async.AsyncMethodCallback<updateTaskStart_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTaskStart_call method_call = new updateTaskStart_call(task, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTaskStart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private vng.bankinggateway.thrift.T_Task task;
      public updateTaskStart_call(vng.bankinggateway.thrift.T_Task task, org.apache.thrift.async.AsyncMethodCallback<updateTaskStart_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task = task;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTaskStart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTaskStart_args args = new updateTaskStart_args();
        args.setTask(task);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTaskStart();
      }
    }

    public void updateTaskStop(vng.bankinggateway.thrift.T_Task task, org.apache.thrift.async.AsyncMethodCallback<updateTaskStop_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTaskStop_call method_call = new updateTaskStop_call(task, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTaskStop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private vng.bankinggateway.thrift.T_Task task;
      public updateTaskStop_call(vng.bankinggateway.thrift.T_Task task, org.apache.thrift.async.AsyncMethodCallback<updateTaskStop_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task = task;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTaskStop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTaskStop_args args = new updateTaskStop_args();
        args.setTask(task);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTaskStop();
      }
    }

    public void getTaskById(int id, org.apache.thrift.async.AsyncMethodCallback<getTaskById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTaskById_call method_call = new getTaskById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTaskById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public getTaskById_call(int id, org.apache.thrift.async.AsyncMethodCallback<getTaskById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTaskById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTaskById_args args = new getTaskById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.bankinggateway.thrift.T_Task getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTaskById();
      }
    }

    public void getTaskByTaskId(String taskId, org.apache.thrift.async.AsyncMethodCallback<getTaskByTaskId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTaskByTaskId_call method_call = new getTaskByTaskId_call(taskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTaskByTaskId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String taskId;
      public getTaskByTaskId_call(String taskId, org.apache.thrift.async.AsyncMethodCallback<getTaskByTaskId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTaskByTaskId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTaskByTaskId_args args = new getTaskByTaskId_args();
        args.setTaskId(taskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.bankinggateway.thrift.T_Task getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTaskByTaskId();
      }
    }

    public void deleteTaskByTaskId(String taskId, org.apache.thrift.async.AsyncMethodCallback<deleteTaskByTaskId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTaskByTaskId_call method_call = new deleteTaskByTaskId_call(taskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteTaskByTaskId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String taskId;
      public deleteTaskByTaskId_call(String taskId, org.apache.thrift.async.AsyncMethodCallback<deleteTaskByTaskId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTaskByTaskId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTaskByTaskId_args args = new deleteTaskByTaskId_args();
        args.setTaskId(taskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteTaskByTaskId();
      }
    }

    public void getListTaskByStatus(short status, org.apache.thrift.async.AsyncMethodCallback<getListTaskByStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListTaskByStatus_call method_call = new getListTaskByStatus_call(status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListTaskByStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short status;
      public getListTaskByStatus_call(short status, org.apache.thrift.async.AsyncMethodCallback<getListTaskByStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListTaskByStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListTaskByStatus_args args = new getListTaskByStatus_args();
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.bankinggateway.thrift.T_Task> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListTaskByStatus();
      }
    }

    public void getListTaskByStartDate(String startDate, org.apache.thrift.async.AsyncMethodCallback<getListTaskByStartDate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListTaskByStartDate_call method_call = new getListTaskByStartDate_call(startDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListTaskByStartDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startDate;
      public getListTaskByStartDate_call(String startDate, org.apache.thrift.async.AsyncMethodCallback<getListTaskByStartDate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startDate = startDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListTaskByStartDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListTaskByStartDate_args args = new getListTaskByStartDate_args();
        args.setStartDate(startDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.bankinggateway.thrift.T_Task> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListTaskByStartDate();
      }
    }

    public void getListTaskToday(org.apache.thrift.async.AsyncMethodCallback<getListTaskToday_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListTaskToday_call method_call = new getListTaskToday_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListTaskToday_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getListTaskToday_call(org.apache.thrift.async.AsyncMethodCallback<getListTaskToday_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListTaskToday", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListTaskToday_args args = new getListTaskToday_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.bankinggateway.thrift.T_Task> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListTaskToday();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("storeTranx", new storeTranx());
      processMap.put("updateTransaction", new updateTransaction());
      processMap.put("updateTranxAndStatus", new updateTranxAndStatus());
      processMap.put("updateTranxStatus", new updateTranxStatus());
      processMap.put("getTranxs", new getTranxs());
      processMap.put("getTranxsWithConfirmStatus", new getTranxsWithConfirmStatus());
      processMap.put("getTransaction", new getTransaction());
      processMap.put("getTransactionWithBankCode", new getTransactionWithBankCode());
      processMap.put("generateTransID", new generateTransID());
      processMap.put("generateQueryID", new generateQueryID());
      processMap.put("getTranxStatus", new getTranxStatus());
      processMap.put("generateTransIdByBankCode", new generateTransIdByBankCode());
      processMap.put("getTranxsWithBankCode", new getTranxsWithBankCode());
      processMap.put("getTranxsWithConfirmStatusAndBankCode", new getTranxsWithConfirmStatusAndBankCode());
      processMap.put("insertTask", new insertTask());
      processMap.put("updateTaskEveryDay", new updateTaskEveryDay());
      processMap.put("updateTaskStart", new updateTaskStart());
      processMap.put("updateTaskStop", new updateTaskStop());
      processMap.put("getTaskById", new getTaskById());
      processMap.put("getTaskByTaskId", new getTaskByTaskId());
      processMap.put("deleteTaskByTaskId", new deleteTaskByTaskId());
      processMap.put("getListTaskByStatus", new getListTaskByStatus());
      processMap.put("getListTaskByStartDate", new getListTaskByStartDate());
      processMap.put("getListTaskToday", new getListTaskToday());
      return processMap;
    }

    public static class storeTranx<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeTranx_args> {
      public storeTranx() {
        super("storeTranx");
      }

      public storeTranx_args getEmptyArgsInstance() {
        return new storeTranx_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeTranx_result getResult(I iface, storeTranx_args args) throws org.apache.thrift.TException {
        storeTranx_result result = new storeTranx_result();
        result.success = iface.storeTranx(args.tx);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateTransaction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTransaction_args> {
      public updateTransaction() {
        super("updateTransaction");
      }

      public updateTransaction_args getEmptyArgsInstance() {
        return new updateTransaction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTransaction_result getResult(I iface, updateTransaction_args args) throws org.apache.thrift.TException {
        updateTransaction_result result = new updateTransaction_result();
        result.success = iface.updateTransaction(args.tx);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateTranxAndStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTranxAndStatus_args> {
      public updateTranxAndStatus() {
        super("updateTranxAndStatus");
      }

      public updateTranxAndStatus_args getEmptyArgsInstance() {
        return new updateTranxAndStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTranxAndStatus_result getResult(I iface, updateTranxAndStatus_args args) throws org.apache.thrift.TException {
        updateTranxAndStatus_result result = new updateTranxAndStatus_result();
        result.success = iface.updateTranxAndStatus(args.tx, args.txStatus, args.responseCode);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateTranxStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTranxStatus_args> {
      public updateTranxStatus() {
        super("updateTranxStatus");
      }

      public updateTranxStatus_args getEmptyArgsInstance() {
        return new updateTranxStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTranxStatus_result getResult(I iface, updateTranxStatus_args args) throws org.apache.thrift.TException {
        updateTranxStatus_result result = new updateTranxStatus_result();
        result.success = iface.updateTranxStatus(args.tranxStat);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getTranxs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTranxs_args> {
      public getTranxs() {
        super("getTranxs");
      }

      public getTranxs_args getEmptyArgsInstance() {
        return new getTranxs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTranxs_result getResult(I iface, getTranxs_args args) throws org.apache.thrift.TException {
        getTranxs_result result = new getTranxs_result();
        result.success = iface.getTranxs(args.day, args.txStatus, args.allStatus);
        return result;
      }
    }

    public static class getTranxsWithConfirmStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTranxsWithConfirmStatus_args> {
      public getTranxsWithConfirmStatus() {
        super("getTranxsWithConfirmStatus");
      }

      public getTranxsWithConfirmStatus_args getEmptyArgsInstance() {
        return new getTranxsWithConfirmStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTranxsWithConfirmStatus_result getResult(I iface, getTranxsWithConfirmStatus_args args) throws org.apache.thrift.TException {
        getTranxsWithConfirmStatus_result result = new getTranxsWithConfirmStatus_result();
        result.success = iface.getTranxsWithConfirmStatus(args.day, args.confirmStatus);
        return result;
      }
    }

    public static class getTransaction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTransaction_args> {
      public getTransaction() {
        super("getTransaction");
      }

      public getTransaction_args getEmptyArgsInstance() {
        return new getTransaction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTransaction_result getResult(I iface, getTransaction_args args) throws org.apache.thrift.TException {
        getTransaction_result result = new getTransaction_result();
        result.success = iface.getTransaction(args.txID, args.time);
        return result;
      }
    }

    public static class getTransactionWithBankCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTransactionWithBankCode_args> {
      public getTransactionWithBankCode() {
        super("getTransactionWithBankCode");
      }

      public getTransactionWithBankCode_args getEmptyArgsInstance() {
        return new getTransactionWithBankCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTransactionWithBankCode_result getResult(I iface, getTransactionWithBankCode_args args) throws org.apache.thrift.TException {
        getTransactionWithBankCode_result result = new getTransactionWithBankCode_result();
        result.success = iface.getTransactionWithBankCode(args.txID, args.time, args.bankCode);
        return result;
      }
    }

    public static class generateTransID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateTransID_args> {
      public generateTransID() {
        super("generateTransID");
      }

      public generateTransID_args getEmptyArgsInstance() {
        return new generateTransID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generateTransID_result getResult(I iface, generateTransID_args args) throws org.apache.thrift.TException {
        generateTransID_result result = new generateTransID_result();
        result.success = iface.generateTransID(args.day);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class generateQueryID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateQueryID_args> {
      public generateQueryID() {
        super("generateQueryID");
      }

      public generateQueryID_args getEmptyArgsInstance() {
        return new generateQueryID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generateQueryID_result getResult(I iface, generateQueryID_args args) throws org.apache.thrift.TException {
        generateQueryID_result result = new generateQueryID_result();
        result.success = iface.generateQueryID(args.day);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getTranxStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTranxStatus_args> {
      public getTranxStatus() {
        super("getTranxStatus");
      }

      public getTranxStatus_args getEmptyArgsInstance() {
        return new getTranxStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTranxStatus_result getResult(I iface, getTranxStatus_args args) throws org.apache.thrift.TException {
        getTranxStatus_result result = new getTranxStatus_result();
        result.success = iface.getTranxStatus(args.refID, args.day);
        return result;
      }
    }

    public static class generateTransIdByBankCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateTransIdByBankCode_args> {
      public generateTransIdByBankCode() {
        super("generateTransIdByBankCode");
      }

      public generateTransIdByBankCode_args getEmptyArgsInstance() {
        return new generateTransIdByBankCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generateTransIdByBankCode_result getResult(I iface, generateTransIdByBankCode_args args) throws org.apache.thrift.TException {
        generateTransIdByBankCode_result result = new generateTransIdByBankCode_result();
        result.success = iface.generateTransIdByBankCode(args.bankCode);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getTranxsWithBankCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTranxsWithBankCode_args> {
      public getTranxsWithBankCode() {
        super("getTranxsWithBankCode");
      }

      public getTranxsWithBankCode_args getEmptyArgsInstance() {
        return new getTranxsWithBankCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTranxsWithBankCode_result getResult(I iface, getTranxsWithBankCode_args args) throws org.apache.thrift.TException {
        getTranxsWithBankCode_result result = new getTranxsWithBankCode_result();
        result.success = iface.getTranxsWithBankCode(args.day, args.txStatus, args.allStatus, args.bankCode);
        return result;
      }
    }

    public static class getTranxsWithConfirmStatusAndBankCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTranxsWithConfirmStatusAndBankCode_args> {
      public getTranxsWithConfirmStatusAndBankCode() {
        super("getTranxsWithConfirmStatusAndBankCode");
      }

      public getTranxsWithConfirmStatusAndBankCode_args getEmptyArgsInstance() {
        return new getTranxsWithConfirmStatusAndBankCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTranxsWithConfirmStatusAndBankCode_result getResult(I iface, getTranxsWithConfirmStatusAndBankCode_args args) throws org.apache.thrift.TException {
        getTranxsWithConfirmStatusAndBankCode_result result = new getTranxsWithConfirmStatusAndBankCode_result();
        result.success = iface.getTranxsWithConfirmStatusAndBankCode(args.day, args.confirmStatus, args.bankCode);
        return result;
      }
    }

    public static class insertTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertTask_args> {
      public insertTask() {
        super("insertTask");
      }

      public insertTask_args getEmptyArgsInstance() {
        return new insertTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertTask_result getResult(I iface, insertTask_args args) throws org.apache.thrift.TException {
        insertTask_result result = new insertTask_result();
        result.success = iface.insertTask();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateTaskEveryDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTaskEveryDay_args> {
      public updateTaskEveryDay() {
        super("updateTaskEveryDay");
      }

      public updateTaskEveryDay_args getEmptyArgsInstance() {
        return new updateTaskEveryDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTaskEveryDay_result getResult(I iface, updateTaskEveryDay_args args) throws org.apache.thrift.TException {
        updateTaskEveryDay_result result = new updateTaskEveryDay_result();
        result.success = iface.updateTaskEveryDay();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateTaskStart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTaskStart_args> {
      public updateTaskStart() {
        super("updateTaskStart");
      }

      public updateTaskStart_args getEmptyArgsInstance() {
        return new updateTaskStart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTaskStart_result getResult(I iface, updateTaskStart_args args) throws org.apache.thrift.TException {
        updateTaskStart_result result = new updateTaskStart_result();
        result.success = iface.updateTaskStart(args.task);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateTaskStop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTaskStop_args> {
      public updateTaskStop() {
        super("updateTaskStop");
      }

      public updateTaskStop_args getEmptyArgsInstance() {
        return new updateTaskStop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTaskStop_result getResult(I iface, updateTaskStop_args args) throws org.apache.thrift.TException {
        updateTaskStop_result result = new updateTaskStop_result();
        result.success = iface.updateTaskStop(args.task);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getTaskById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTaskById_args> {
      public getTaskById() {
        super("getTaskById");
      }

      public getTaskById_args getEmptyArgsInstance() {
        return new getTaskById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTaskById_result getResult(I iface, getTaskById_args args) throws org.apache.thrift.TException {
        getTaskById_result result = new getTaskById_result();
        result.success = iface.getTaskById(args.id);
        return result;
      }
    }

    public static class getTaskByTaskId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTaskByTaskId_args> {
      public getTaskByTaskId() {
        super("getTaskByTaskId");
      }

      public getTaskByTaskId_args getEmptyArgsInstance() {
        return new getTaskByTaskId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTaskByTaskId_result getResult(I iface, getTaskByTaskId_args args) throws org.apache.thrift.TException {
        getTaskByTaskId_result result = new getTaskByTaskId_result();
        result.success = iface.getTaskByTaskId(args.taskId);
        return result;
      }
    }

    public static class deleteTaskByTaskId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTaskByTaskId_args> {
      public deleteTaskByTaskId() {
        super("deleteTaskByTaskId");
      }

      public deleteTaskByTaskId_args getEmptyArgsInstance() {
        return new deleteTaskByTaskId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteTaskByTaskId_result getResult(I iface, deleteTaskByTaskId_args args) throws org.apache.thrift.TException {
        deleteTaskByTaskId_result result = new deleteTaskByTaskId_result();
        result.success = iface.deleteTaskByTaskId(args.taskId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getListTaskByStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListTaskByStatus_args> {
      public getListTaskByStatus() {
        super("getListTaskByStatus");
      }

      public getListTaskByStatus_args getEmptyArgsInstance() {
        return new getListTaskByStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getListTaskByStatus_result getResult(I iface, getListTaskByStatus_args args) throws org.apache.thrift.TException {
        getListTaskByStatus_result result = new getListTaskByStatus_result();
        result.success = iface.getListTaskByStatus(args.status);
        return result;
      }
    }

    public static class getListTaskByStartDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListTaskByStartDate_args> {
      public getListTaskByStartDate() {
        super("getListTaskByStartDate");
      }

      public getListTaskByStartDate_args getEmptyArgsInstance() {
        return new getListTaskByStartDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getListTaskByStartDate_result getResult(I iface, getListTaskByStartDate_args args) throws org.apache.thrift.TException {
        getListTaskByStartDate_result result = new getListTaskByStartDate_result();
        result.success = iface.getListTaskByStartDate(args.startDate);
        return result;
      }
    }

    public static class getListTaskToday<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListTaskToday_args> {
      public getListTaskToday() {
        super("getListTaskToday");
      }

      public getListTaskToday_args getEmptyArgsInstance() {
        return new getListTaskToday_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getListTaskToday_result getResult(I iface, getListTaskToday_args args) throws org.apache.thrift.TException {
        getListTaskToday_result result = new getListTaskToday_result();
        result.success = iface.getListTaskToday();
        return result;
      }
    }

  }

  public static class storeTranx_args implements org.apache.thrift.TBase<storeTranx_args, storeTranx_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeTranx_args");

    private static final org.apache.thrift.protocol.TField TX_FIELD_DESC = new org.apache.thrift.protocol.TField("tx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeTranx_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeTranx_argsTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_Transaction tx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TX((short)1, "tx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TX
            return TX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TX, new org.apache.thrift.meta_data.FieldMetaData("tx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Transaction.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeTranx_args.class, metaDataMap);
    }

    public storeTranx_args() {
    }

    public storeTranx_args(
      vng.bankinggateway.thrift.T_Transaction tx)
    {
      this();
      this.tx = tx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeTranx_args(storeTranx_args other) {
      if (other.isSetTx()) {
        this.tx = new vng.bankinggateway.thrift.T_Transaction(other.tx);
      }
    }

    public storeTranx_args deepCopy() {
      return new storeTranx_args(this);
    }

    @Override
    public void clear() {
      this.tx = null;
    }

    public vng.bankinggateway.thrift.T_Transaction getTx() {
      return this.tx;
    }

    public storeTranx_args setTx(vng.bankinggateway.thrift.T_Transaction tx) {
      this.tx = tx;
      return this;
    }

    public void unsetTx() {
      this.tx = null;
    }

    /** Returns true if field tx is set (has been assigned a value) and false otherwise */
    public boolean isSetTx() {
      return this.tx != null;
    }

    public void setTxIsSet(boolean value) {
      if (!value) {
        this.tx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TX:
        if (value == null) {
          unsetTx();
        } else {
          setTx((vng.bankinggateway.thrift.T_Transaction)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TX:
        return getTx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TX:
        return isSetTx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeTranx_args)
        return this.equals((storeTranx_args)that);
      return false;
    }

    public boolean equals(storeTranx_args that) {
      if (that == null)
        return false;

      boolean this_present_tx = true && this.isSetTx();
      boolean that_present_tx = true && that.isSetTx();
      if (this_present_tx || that_present_tx) {
        if (!(this_present_tx && that_present_tx))
          return false;
        if (!this.tx.equals(that.tx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(storeTranx_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      storeTranx_args typedOther = (storeTranx_args)other;

      lastComparison = Boolean.valueOf(isSetTx()).compareTo(typedOther.isSetTx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tx, typedOther.tx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeTranx_args(");
      boolean first = true;

      sb.append("tx:");
      if (this.tx == null) {
        sb.append("null");
      } else {
        sb.append(this.tx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tx != null) {
        tx.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeTranx_argsStandardSchemeFactory implements SchemeFactory {
      public storeTranx_argsStandardScheme getScheme() {
        return new storeTranx_argsStandardScheme();
      }
    }

    private static class storeTranx_argsStandardScheme extends StandardScheme<storeTranx_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeTranx_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tx = new vng.bankinggateway.thrift.T_Transaction();
                struct.tx.read(iprot);
                struct.setTxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeTranx_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tx != null) {
          oprot.writeFieldBegin(TX_FIELD_DESC);
          struct.tx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeTranx_argsTupleSchemeFactory implements SchemeFactory {
      public storeTranx_argsTupleScheme getScheme() {
        return new storeTranx_argsTupleScheme();
      }
    }

    private static class storeTranx_argsTupleScheme extends TupleScheme<storeTranx_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeTranx_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTx()) {
          struct.tx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeTranx_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tx = new vng.bankinggateway.thrift.T_Transaction();
          struct.tx.read(iprot);
          struct.setTxIsSet(true);
        }
      }
    }

  }

  public static class storeTranx_result implements org.apache.thrift.TBase<storeTranx_result, storeTranx_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeTranx_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeTranx_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeTranx_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeTranx_result.class, metaDataMap);
    }

    public storeTranx_result() {
    }

    public storeTranx_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeTranx_result(storeTranx_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public storeTranx_result deepCopy() {
      return new storeTranx_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public storeTranx_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeTranx_result)
        return this.equals((storeTranx_result)that);
      return false;
    }

    public boolean equals(storeTranx_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(storeTranx_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      storeTranx_result typedOther = (storeTranx_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeTranx_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeTranx_resultStandardSchemeFactory implements SchemeFactory {
      public storeTranx_resultStandardScheme getScheme() {
        return new storeTranx_resultStandardScheme();
      }
    }

    private static class storeTranx_resultStandardScheme extends StandardScheme<storeTranx_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeTranx_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeTranx_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeTranx_resultTupleSchemeFactory implements SchemeFactory {
      public storeTranx_resultTupleScheme getScheme() {
        return new storeTranx_resultTupleScheme();
      }
    }

    private static class storeTranx_resultTupleScheme extends TupleScheme<storeTranx_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeTranx_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeTranx_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTransaction_args implements org.apache.thrift.TBase<updateTransaction_args, updateTransaction_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTransaction_args");

    private static final org.apache.thrift.protocol.TField TX_FIELD_DESC = new org.apache.thrift.protocol.TField("tx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTransaction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTransaction_argsTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_Transaction tx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TX((short)1, "tx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TX
            return TX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TX, new org.apache.thrift.meta_data.FieldMetaData("tx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Transaction.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTransaction_args.class, metaDataMap);
    }

    public updateTransaction_args() {
    }

    public updateTransaction_args(
      vng.bankinggateway.thrift.T_Transaction tx)
    {
      this();
      this.tx = tx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTransaction_args(updateTransaction_args other) {
      if (other.isSetTx()) {
        this.tx = new vng.bankinggateway.thrift.T_Transaction(other.tx);
      }
    }

    public updateTransaction_args deepCopy() {
      return new updateTransaction_args(this);
    }

    @Override
    public void clear() {
      this.tx = null;
    }

    public vng.bankinggateway.thrift.T_Transaction getTx() {
      return this.tx;
    }

    public updateTransaction_args setTx(vng.bankinggateway.thrift.T_Transaction tx) {
      this.tx = tx;
      return this;
    }

    public void unsetTx() {
      this.tx = null;
    }

    /** Returns true if field tx is set (has been assigned a value) and false otherwise */
    public boolean isSetTx() {
      return this.tx != null;
    }

    public void setTxIsSet(boolean value) {
      if (!value) {
        this.tx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TX:
        if (value == null) {
          unsetTx();
        } else {
          setTx((vng.bankinggateway.thrift.T_Transaction)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TX:
        return getTx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TX:
        return isSetTx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTransaction_args)
        return this.equals((updateTransaction_args)that);
      return false;
    }

    public boolean equals(updateTransaction_args that) {
      if (that == null)
        return false;

      boolean this_present_tx = true && this.isSetTx();
      boolean that_present_tx = true && that.isSetTx();
      if (this_present_tx || that_present_tx) {
        if (!(this_present_tx && that_present_tx))
          return false;
        if (!this.tx.equals(that.tx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTransaction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTransaction_args typedOther = (updateTransaction_args)other;

      lastComparison = Boolean.valueOf(isSetTx()).compareTo(typedOther.isSetTx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tx, typedOther.tx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTransaction_args(");
      boolean first = true;

      sb.append("tx:");
      if (this.tx == null) {
        sb.append("null");
      } else {
        sb.append(this.tx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tx != null) {
        tx.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTransaction_argsStandardSchemeFactory implements SchemeFactory {
      public updateTransaction_argsStandardScheme getScheme() {
        return new updateTransaction_argsStandardScheme();
      }
    }

    private static class updateTransaction_argsStandardScheme extends StandardScheme<updateTransaction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTransaction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tx = new vng.bankinggateway.thrift.T_Transaction();
                struct.tx.read(iprot);
                struct.setTxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTransaction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tx != null) {
          oprot.writeFieldBegin(TX_FIELD_DESC);
          struct.tx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTransaction_argsTupleSchemeFactory implements SchemeFactory {
      public updateTransaction_argsTupleScheme getScheme() {
        return new updateTransaction_argsTupleScheme();
      }
    }

    private static class updateTransaction_argsTupleScheme extends TupleScheme<updateTransaction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTx()) {
          struct.tx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tx = new vng.bankinggateway.thrift.T_Transaction();
          struct.tx.read(iprot);
          struct.setTxIsSet(true);
        }
      }
    }

  }

  public static class updateTransaction_result implements org.apache.thrift.TBase<updateTransaction_result, updateTransaction_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTransaction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTransaction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTransaction_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTransaction_result.class, metaDataMap);
    }

    public updateTransaction_result() {
    }

    public updateTransaction_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTransaction_result(updateTransaction_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTransaction_result deepCopy() {
      return new updateTransaction_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateTransaction_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTransaction_result)
        return this.equals((updateTransaction_result)that);
      return false;
    }

    public boolean equals(updateTransaction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTransaction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTransaction_result typedOther = (updateTransaction_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTransaction_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTransaction_resultStandardSchemeFactory implements SchemeFactory {
      public updateTransaction_resultStandardScheme getScheme() {
        return new updateTransaction_resultStandardScheme();
      }
    }

    private static class updateTransaction_resultStandardScheme extends StandardScheme<updateTransaction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTransaction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTransaction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTransaction_resultTupleSchemeFactory implements SchemeFactory {
      public updateTransaction_resultTupleScheme getScheme() {
        return new updateTransaction_resultTupleScheme();
      }
    }

    private static class updateTransaction_resultTupleScheme extends TupleScheme<updateTransaction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTranxAndStatus_args implements org.apache.thrift.TBase<updateTranxAndStatus_args, updateTranxAndStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTranxAndStatus_args");

    private static final org.apache.thrift.protocol.TField TX_FIELD_DESC = new org.apache.thrift.protocol.TField("tx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TX_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("txStatus", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField RESPONSE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTranxAndStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTranxAndStatus_argsTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_Transaction tx; // required
    public short txStatus; // required
    public String responseCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TX((short)1, "tx"),
      TX_STATUS((short)2, "txStatus"),
      RESPONSE_CODE((short)3, "responseCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TX
            return TX;
          case 2: // TX_STATUS
            return TX_STATUS;
          case 3: // RESPONSE_CODE
            return RESPONSE_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TXSTATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TX, new org.apache.thrift.meta_data.FieldMetaData("tx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Transaction.class)));
      tmpMap.put(_Fields.TX_STATUS, new org.apache.thrift.meta_data.FieldMetaData("txStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.RESPONSE_CODE, new org.apache.thrift.meta_data.FieldMetaData("responseCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTranxAndStatus_args.class, metaDataMap);
    }

    public updateTranxAndStatus_args() {
    }

    public updateTranxAndStatus_args(
      vng.bankinggateway.thrift.T_Transaction tx,
      short txStatus,
      String responseCode)
    {
      this();
      this.tx = tx;
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
      this.responseCode = responseCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTranxAndStatus_args(updateTranxAndStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTx()) {
        this.tx = new vng.bankinggateway.thrift.T_Transaction(other.tx);
      }
      this.txStatus = other.txStatus;
      if (other.isSetResponseCode()) {
        this.responseCode = other.responseCode;
      }
    }

    public updateTranxAndStatus_args deepCopy() {
      return new updateTranxAndStatus_args(this);
    }

    @Override
    public void clear() {
      this.tx = null;
      setTxStatusIsSet(false);
      this.txStatus = 0;
      this.responseCode = null;
    }

    public vng.bankinggateway.thrift.T_Transaction getTx() {
      return this.tx;
    }

    public updateTranxAndStatus_args setTx(vng.bankinggateway.thrift.T_Transaction tx) {
      this.tx = tx;
      return this;
    }

    public void unsetTx() {
      this.tx = null;
    }

    /** Returns true if field tx is set (has been assigned a value) and false otherwise */
    public boolean isSetTx() {
      return this.tx != null;
    }

    public void setTxIsSet(boolean value) {
      if (!value) {
        this.tx = null;
      }
    }

    public short getTxStatus() {
      return this.txStatus;
    }

    public updateTranxAndStatus_args setTxStatus(short txStatus) {
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
      return this;
    }

    public void unsetTxStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXSTATUS_ISSET_ID);
    }

    /** Returns true if field txStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetTxStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __TXSTATUS_ISSET_ID);
    }

    public void setTxStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXSTATUS_ISSET_ID, value);
    }

    public String getResponseCode() {
      return this.responseCode;
    }

    public updateTranxAndStatus_args setResponseCode(String responseCode) {
      this.responseCode = responseCode;
      return this;
    }

    public void unsetResponseCode() {
      this.responseCode = null;
    }

    /** Returns true if field responseCode is set (has been assigned a value) and false otherwise */
    public boolean isSetResponseCode() {
      return this.responseCode != null;
    }

    public void setResponseCodeIsSet(boolean value) {
      if (!value) {
        this.responseCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TX:
        if (value == null) {
          unsetTx();
        } else {
          setTx((vng.bankinggateway.thrift.T_Transaction)value);
        }
        break;

      case TX_STATUS:
        if (value == null) {
          unsetTxStatus();
        } else {
          setTxStatus((Short)value);
        }
        break;

      case RESPONSE_CODE:
        if (value == null) {
          unsetResponseCode();
        } else {
          setResponseCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TX:
        return getTx();

      case TX_STATUS:
        return Short.valueOf(getTxStatus());

      case RESPONSE_CODE:
        return getResponseCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TX:
        return isSetTx();
      case TX_STATUS:
        return isSetTxStatus();
      case RESPONSE_CODE:
        return isSetResponseCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTranxAndStatus_args)
        return this.equals((updateTranxAndStatus_args)that);
      return false;
    }

    public boolean equals(updateTranxAndStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_tx = true && this.isSetTx();
      boolean that_present_tx = true && that.isSetTx();
      if (this_present_tx || that_present_tx) {
        if (!(this_present_tx && that_present_tx))
          return false;
        if (!this.tx.equals(that.tx))
          return false;
      }

      boolean this_present_txStatus = true;
      boolean that_present_txStatus = true;
      if (this_present_txStatus || that_present_txStatus) {
        if (!(this_present_txStatus && that_present_txStatus))
          return false;
        if (this.txStatus != that.txStatus)
          return false;
      }

      boolean this_present_responseCode = true && this.isSetResponseCode();
      boolean that_present_responseCode = true && that.isSetResponseCode();
      if (this_present_responseCode || that_present_responseCode) {
        if (!(this_present_responseCode && that_present_responseCode))
          return false;
        if (!this.responseCode.equals(that.responseCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTranxAndStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTranxAndStatus_args typedOther = (updateTranxAndStatus_args)other;

      lastComparison = Boolean.valueOf(isSetTx()).compareTo(typedOther.isSetTx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tx, typedOther.tx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxStatus()).compareTo(typedOther.isSetTxStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txStatus, typedOther.txStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResponseCode()).compareTo(typedOther.isSetResponseCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponseCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseCode, typedOther.responseCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTranxAndStatus_args(");
      boolean first = true;

      sb.append("tx:");
      if (this.tx == null) {
        sb.append("null");
      } else {
        sb.append(this.tx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txStatus:");
      sb.append(this.txStatus);
      first = false;
      if (!first) sb.append(", ");
      sb.append("responseCode:");
      if (this.responseCode == null) {
        sb.append("null");
      } else {
        sb.append(this.responseCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tx != null) {
        tx.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTranxAndStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateTranxAndStatus_argsStandardScheme getScheme() {
        return new updateTranxAndStatus_argsStandardScheme();
      }
    }

    private static class updateTranxAndStatus_argsStandardScheme extends StandardScheme<updateTranxAndStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTranxAndStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tx = new vng.bankinggateway.thrift.T_Transaction();
                struct.tx.read(iprot);
                struct.setTxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TX_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.txStatus = iprot.readI16();
                struct.setTxStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RESPONSE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.responseCode = iprot.readString();
                struct.setResponseCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTranxAndStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tx != null) {
          oprot.writeFieldBegin(TX_FIELD_DESC);
          struct.tx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TX_STATUS_FIELD_DESC);
        oprot.writeI16(struct.txStatus);
        oprot.writeFieldEnd();
        if (struct.responseCode != null) {
          oprot.writeFieldBegin(RESPONSE_CODE_FIELD_DESC);
          oprot.writeString(struct.responseCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTranxAndStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateTranxAndStatus_argsTupleScheme getScheme() {
        return new updateTranxAndStatus_argsTupleScheme();
      }
    }

    private static class updateTranxAndStatus_argsTupleScheme extends TupleScheme<updateTranxAndStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTranxAndStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTx()) {
          optionals.set(0);
        }
        if (struct.isSetTxStatus()) {
          optionals.set(1);
        }
        if (struct.isSetResponseCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTx()) {
          struct.tx.write(oprot);
        }
        if (struct.isSetTxStatus()) {
          oprot.writeI16(struct.txStatus);
        }
        if (struct.isSetResponseCode()) {
          oprot.writeString(struct.responseCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTranxAndStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.tx = new vng.bankinggateway.thrift.T_Transaction();
          struct.tx.read(iprot);
          struct.setTxIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txStatus = iprot.readI16();
          struct.setTxStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.responseCode = iprot.readString();
          struct.setResponseCodeIsSet(true);
        }
      }
    }

  }

  public static class updateTranxAndStatus_result implements org.apache.thrift.TBase<updateTranxAndStatus_result, updateTranxAndStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTranxAndStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTranxAndStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTranxAndStatus_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTranxAndStatus_result.class, metaDataMap);
    }

    public updateTranxAndStatus_result() {
    }

    public updateTranxAndStatus_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTranxAndStatus_result(updateTranxAndStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTranxAndStatus_result deepCopy() {
      return new updateTranxAndStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateTranxAndStatus_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTranxAndStatus_result)
        return this.equals((updateTranxAndStatus_result)that);
      return false;
    }

    public boolean equals(updateTranxAndStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTranxAndStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTranxAndStatus_result typedOther = (updateTranxAndStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTranxAndStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTranxAndStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateTranxAndStatus_resultStandardScheme getScheme() {
        return new updateTranxAndStatus_resultStandardScheme();
      }
    }

    private static class updateTranxAndStatus_resultStandardScheme extends StandardScheme<updateTranxAndStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTranxAndStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTranxAndStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTranxAndStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateTranxAndStatus_resultTupleScheme getScheme() {
        return new updateTranxAndStatus_resultTupleScheme();
      }
    }

    private static class updateTranxAndStatus_resultTupleScheme extends TupleScheme<updateTranxAndStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTranxAndStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTranxAndStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTranxStatus_args implements org.apache.thrift.TBase<updateTranxStatus_args, updateTranxStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTranxStatus_args");

    private static final org.apache.thrift.protocol.TField TRANX_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("tranxStat", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTranxStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTranxStatus_argsTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_TranStat tranxStat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANX_STAT((short)1, "tranxStat");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANX_STAT
            return TRANX_STAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANX_STAT, new org.apache.thrift.meta_data.FieldMetaData("tranxStat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_TranStat.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTranxStatus_args.class, metaDataMap);
    }

    public updateTranxStatus_args() {
    }

    public updateTranxStatus_args(
      vng.bankinggateway.thrift.T_TranStat tranxStat)
    {
      this();
      this.tranxStat = tranxStat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTranxStatus_args(updateTranxStatus_args other) {
      if (other.isSetTranxStat()) {
        this.tranxStat = new vng.bankinggateway.thrift.T_TranStat(other.tranxStat);
      }
    }

    public updateTranxStatus_args deepCopy() {
      return new updateTranxStatus_args(this);
    }

    @Override
    public void clear() {
      this.tranxStat = null;
    }

    public vng.bankinggateway.thrift.T_TranStat getTranxStat() {
      return this.tranxStat;
    }

    public updateTranxStatus_args setTranxStat(vng.bankinggateway.thrift.T_TranStat tranxStat) {
      this.tranxStat = tranxStat;
      return this;
    }

    public void unsetTranxStat() {
      this.tranxStat = null;
    }

    /** Returns true if field tranxStat is set (has been assigned a value) and false otherwise */
    public boolean isSetTranxStat() {
      return this.tranxStat != null;
    }

    public void setTranxStatIsSet(boolean value) {
      if (!value) {
        this.tranxStat = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANX_STAT:
        if (value == null) {
          unsetTranxStat();
        } else {
          setTranxStat((vng.bankinggateway.thrift.T_TranStat)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANX_STAT:
        return getTranxStat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANX_STAT:
        return isSetTranxStat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTranxStatus_args)
        return this.equals((updateTranxStatus_args)that);
      return false;
    }

    public boolean equals(updateTranxStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_tranxStat = true && this.isSetTranxStat();
      boolean that_present_tranxStat = true && that.isSetTranxStat();
      if (this_present_tranxStat || that_present_tranxStat) {
        if (!(this_present_tranxStat && that_present_tranxStat))
          return false;
        if (!this.tranxStat.equals(that.tranxStat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTranxStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTranxStatus_args typedOther = (updateTranxStatus_args)other;

      lastComparison = Boolean.valueOf(isSetTranxStat()).compareTo(typedOther.isSetTranxStat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTranxStat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tranxStat, typedOther.tranxStat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTranxStatus_args(");
      boolean first = true;

      sb.append("tranxStat:");
      if (this.tranxStat == null) {
        sb.append("null");
      } else {
        sb.append(this.tranxStat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tranxStat != null) {
        tranxStat.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTranxStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateTranxStatus_argsStandardScheme getScheme() {
        return new updateTranxStatus_argsStandardScheme();
      }
    }

    private static class updateTranxStatus_argsStandardScheme extends StandardScheme<updateTranxStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTranxStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANX_STAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tranxStat = new vng.bankinggateway.thrift.T_TranStat();
                struct.tranxStat.read(iprot);
                struct.setTranxStatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTranxStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tranxStat != null) {
          oprot.writeFieldBegin(TRANX_STAT_FIELD_DESC);
          struct.tranxStat.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTranxStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateTranxStatus_argsTupleScheme getScheme() {
        return new updateTranxStatus_argsTupleScheme();
      }
    }

    private static class updateTranxStatus_argsTupleScheme extends TupleScheme<updateTranxStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTranxStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTranxStat()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTranxStat()) {
          struct.tranxStat.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTranxStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tranxStat = new vng.bankinggateway.thrift.T_TranStat();
          struct.tranxStat.read(iprot);
          struct.setTranxStatIsSet(true);
        }
      }
    }

  }

  public static class updateTranxStatus_result implements org.apache.thrift.TBase<updateTranxStatus_result, updateTranxStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTranxStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTranxStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTranxStatus_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTranxStatus_result.class, metaDataMap);
    }

    public updateTranxStatus_result() {
    }

    public updateTranxStatus_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTranxStatus_result(updateTranxStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTranxStatus_result deepCopy() {
      return new updateTranxStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateTranxStatus_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTranxStatus_result)
        return this.equals((updateTranxStatus_result)that);
      return false;
    }

    public boolean equals(updateTranxStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTranxStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTranxStatus_result typedOther = (updateTranxStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTranxStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTranxStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateTranxStatus_resultStandardScheme getScheme() {
        return new updateTranxStatus_resultStandardScheme();
      }
    }

    private static class updateTranxStatus_resultStandardScheme extends StandardScheme<updateTranxStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTranxStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTranxStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTranxStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateTranxStatus_resultTupleScheme getScheme() {
        return new updateTranxStatus_resultTupleScheme();
      }
    }

    private static class updateTranxStatus_resultTupleScheme extends TupleScheme<updateTranxStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTranxStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTranxStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTranxs_args implements org.apache.thrift.TBase<getTranxs_args, getTranxs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxs_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TX_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("txStatus", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField ALL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("allStatus", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxs_argsTupleSchemeFactory());
    }

    public String day; // required
    public short txStatus; // required
    public boolean allStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day"),
      TX_STATUS((short)2, "txStatus"),
      ALL_STATUS((short)3, "allStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          case 2: // TX_STATUS
            return TX_STATUS;
          case 3: // ALL_STATUS
            return ALL_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TXSTATUS_ISSET_ID = 0;
    private static final int __ALLSTATUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TX_STATUS, new org.apache.thrift.meta_data.FieldMetaData("txStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.ALL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("allStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxs_args.class, metaDataMap);
    }

    public getTranxs_args() {
    }

    public getTranxs_args(
      String day,
      short txStatus,
      boolean allStatus)
    {
      this();
      this.day = day;
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
      this.allStatus = allStatus;
      setAllStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxs_args(getTranxs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDay()) {
        this.day = other.day;
      }
      this.txStatus = other.txStatus;
      this.allStatus = other.allStatus;
    }

    public getTranxs_args deepCopy() {
      return new getTranxs_args(this);
    }

    @Override
    public void clear() {
      this.day = null;
      setTxStatusIsSet(false);
      this.txStatus = 0;
      setAllStatusIsSet(false);
      this.allStatus = false;
    }

    public String getDay() {
      return this.day;
    }

    public getTranxs_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public short getTxStatus() {
      return this.txStatus;
    }

    public getTranxs_args setTxStatus(short txStatus) {
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
      return this;
    }

    public void unsetTxStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXSTATUS_ISSET_ID);
    }

    /** Returns true if field txStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetTxStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __TXSTATUS_ISSET_ID);
    }

    public void setTxStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXSTATUS_ISSET_ID, value);
    }

    public boolean isAllStatus() {
      return this.allStatus;
    }

    public getTranxs_args setAllStatus(boolean allStatus) {
      this.allStatus = allStatus;
      setAllStatusIsSet(true);
      return this;
    }

    public void unsetAllStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLSTATUS_ISSET_ID);
    }

    /** Returns true if field allStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetAllStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __ALLSTATUS_ISSET_ID);
    }

    public void setAllStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLSTATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      case TX_STATUS:
        if (value == null) {
          unsetTxStatus();
        } else {
          setTxStatus((Short)value);
        }
        break;

      case ALL_STATUS:
        if (value == null) {
          unsetAllStatus();
        } else {
          setAllStatus((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      case TX_STATUS:
        return Short.valueOf(getTxStatus());

      case ALL_STATUS:
        return Boolean.valueOf(isAllStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      case TX_STATUS:
        return isSetTxStatus();
      case ALL_STATUS:
        return isSetAllStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxs_args)
        return this.equals((getTranxs_args)that);
      return false;
    }

    public boolean equals(getTranxs_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      boolean this_present_txStatus = true;
      boolean that_present_txStatus = true;
      if (this_present_txStatus || that_present_txStatus) {
        if (!(this_present_txStatus && that_present_txStatus))
          return false;
        if (this.txStatus != that.txStatus)
          return false;
      }

      boolean this_present_allStatus = true;
      boolean that_present_allStatus = true;
      if (this_present_allStatus || that_present_allStatus) {
        if (!(this_present_allStatus && that_present_allStatus))
          return false;
        if (this.allStatus != that.allStatus)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxs_args typedOther = (getTranxs_args)other;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, typedOther.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxStatus()).compareTo(typedOther.isSetTxStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txStatus, typedOther.txStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAllStatus()).compareTo(typedOther.isSetAllStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allStatus, typedOther.allStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxs_args(");
      boolean first = true;

      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txStatus:");
      sb.append(this.txStatus);
      first = false;
      if (!first) sb.append(", ");
      sb.append("allStatus:");
      sb.append(this.allStatus);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxs_argsStandardSchemeFactory implements SchemeFactory {
      public getTranxs_argsStandardScheme getScheme() {
        return new getTranxs_argsStandardScheme();
      }
    }

    private static class getTranxs_argsStandardScheme extends StandardScheme<getTranxs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TX_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.txStatus = iprot.readI16();
                struct.setTxStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALL_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.allStatus = iprot.readBool();
                struct.setAllStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TX_STATUS_FIELD_DESC);
        oprot.writeI16(struct.txStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ALL_STATUS_FIELD_DESC);
        oprot.writeBool(struct.allStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxs_argsTupleSchemeFactory implements SchemeFactory {
      public getTranxs_argsTupleScheme getScheme() {
        return new getTranxs_argsTupleScheme();
      }
    }

    private static class getTranxs_argsTupleScheme extends TupleScheme<getTranxs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        if (struct.isSetTxStatus()) {
          optionals.set(1);
        }
        if (struct.isSetAllStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
        if (struct.isSetTxStatus()) {
          oprot.writeI16(struct.txStatus);
        }
        if (struct.isSetAllStatus()) {
          oprot.writeBool(struct.allStatus);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txStatus = iprot.readI16();
          struct.setTxStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.allStatus = iprot.readBool();
          struct.setAllStatusIsSet(true);
        }
      }
    }

  }

  public static class getTranxs_result implements org.apache.thrift.TBase<getTranxs_result, getTranxs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxs_resultTupleSchemeFactory());
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_TransactionReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxs_result.class, metaDataMap);
    }

    public getTranxs_result() {
    }

    public getTranxs_result(
      List<vng.bankinggateway.thrift.T_TransactionReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxs_result(getTranxs_result other) {
      if (other.isSetSuccess()) {
        List<vng.bankinggateway.thrift.T_TransactionReport> __this__success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>();
        for (vng.bankinggateway.thrift.T_TransactionReport other_element : other.success) {
          __this__success.add(new vng.bankinggateway.thrift.T_TransactionReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTranxs_result deepCopy() {
      return new getTranxs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.bankinggateway.thrift.T_TransactionReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.bankinggateway.thrift.T_TransactionReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>();
      }
      this.success.add(elem);
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> getSuccess() {
      return this.success;
    }

    public getTranxs_result setSuccess(List<vng.bankinggateway.thrift.T_TransactionReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.bankinggateway.thrift.T_TransactionReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxs_result)
        return this.equals((getTranxs_result)that);
      return false;
    }

    public boolean equals(getTranxs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxs_result typedOther = (getTranxs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxs_resultStandardSchemeFactory implements SchemeFactory {
      public getTranxs_resultStandardScheme getScheme() {
        return new getTranxs_resultStandardScheme();
      }
    }

    private static class getTranxs_resultStandardScheme extends StandardScheme<getTranxs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    vng.bankinggateway.thrift.T_TransactionReport _elem10; // required
                    _elem10 = new vng.bankinggateway.thrift.T_TransactionReport();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (vng.bankinggateway.thrift.T_TransactionReport _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxs_resultTupleSchemeFactory implements SchemeFactory {
      public getTranxs_resultTupleScheme getScheme() {
        return new getTranxs_resultTupleScheme();
      }
    }

    private static class getTranxs_resultTupleScheme extends TupleScheme<getTranxs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (vng.bankinggateway.thrift.T_TransactionReport _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              vng.bankinggateway.thrift.T_TransactionReport _elem15; // required
              _elem15 = new vng.bankinggateway.thrift.T_TransactionReport();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTranxsWithConfirmStatus_args implements org.apache.thrift.TBase<getTranxsWithConfirmStatus_args, getTranxsWithConfirmStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxsWithConfirmStatus_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIRM_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmStatus", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxsWithConfirmStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxsWithConfirmStatus_argsTupleSchemeFactory());
    }

    public String day; // required
    public short confirmStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day"),
      CONFIRM_STATUS((short)2, "confirmStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          case 2: // CONFIRM_STATUS
            return CONFIRM_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONFIRMSTATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONFIRM_STATUS, new org.apache.thrift.meta_data.FieldMetaData("confirmStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxsWithConfirmStatus_args.class, metaDataMap);
    }

    public getTranxsWithConfirmStatus_args() {
    }

    public getTranxsWithConfirmStatus_args(
      String day,
      short confirmStatus)
    {
      this();
      this.day = day;
      this.confirmStatus = confirmStatus;
      setConfirmStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxsWithConfirmStatus_args(getTranxsWithConfirmStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDay()) {
        this.day = other.day;
      }
      this.confirmStatus = other.confirmStatus;
    }

    public getTranxsWithConfirmStatus_args deepCopy() {
      return new getTranxsWithConfirmStatus_args(this);
    }

    @Override
    public void clear() {
      this.day = null;
      setConfirmStatusIsSet(false);
      this.confirmStatus = 0;
    }

    public String getDay() {
      return this.day;
    }

    public getTranxsWithConfirmStatus_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public short getConfirmStatus() {
      return this.confirmStatus;
    }

    public getTranxsWithConfirmStatus_args setConfirmStatus(short confirmStatus) {
      this.confirmStatus = confirmStatus;
      setConfirmStatusIsSet(true);
      return this;
    }

    public void unsetConfirmStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMSTATUS_ISSET_ID);
    }

    /** Returns true if field confirmStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetConfirmStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __CONFIRMSTATUS_ISSET_ID);
    }

    public void setConfirmStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMSTATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      case CONFIRM_STATUS:
        if (value == null) {
          unsetConfirmStatus();
        } else {
          setConfirmStatus((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      case CONFIRM_STATUS:
        return Short.valueOf(getConfirmStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      case CONFIRM_STATUS:
        return isSetConfirmStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxsWithConfirmStatus_args)
        return this.equals((getTranxsWithConfirmStatus_args)that);
      return false;
    }

    public boolean equals(getTranxsWithConfirmStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      boolean this_present_confirmStatus = true;
      boolean that_present_confirmStatus = true;
      if (this_present_confirmStatus || that_present_confirmStatus) {
        if (!(this_present_confirmStatus && that_present_confirmStatus))
          return false;
        if (this.confirmStatus != that.confirmStatus)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxsWithConfirmStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxsWithConfirmStatus_args typedOther = (getTranxsWithConfirmStatus_args)other;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, typedOther.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfirmStatus()).compareTo(typedOther.isSetConfirmStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfirmStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmStatus, typedOther.confirmStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxsWithConfirmStatus_args(");
      boolean first = true;

      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("confirmStatus:");
      sb.append(this.confirmStatus);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxsWithConfirmStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getTranxsWithConfirmStatus_argsStandardScheme getScheme() {
        return new getTranxsWithConfirmStatus_argsStandardScheme();
      }
    }

    private static class getTranxsWithConfirmStatus_argsStandardScheme extends StandardScheme<getTranxsWithConfirmStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxsWithConfirmStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIRM_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.confirmStatus = iprot.readI16();
                struct.setConfirmStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxsWithConfirmStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONFIRM_STATUS_FIELD_DESC);
        oprot.writeI16(struct.confirmStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxsWithConfirmStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getTranxsWithConfirmStatus_argsTupleScheme getScheme() {
        return new getTranxsWithConfirmStatus_argsTupleScheme();
      }
    }

    private static class getTranxsWithConfirmStatus_argsTupleScheme extends TupleScheme<getTranxsWithConfirmStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxsWithConfirmStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        if (struct.isSetConfirmStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
        if (struct.isSetConfirmStatus()) {
          oprot.writeI16(struct.confirmStatus);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxsWithConfirmStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
        if (incoming.get(1)) {
          struct.confirmStatus = iprot.readI16();
          struct.setConfirmStatusIsSet(true);
        }
      }
    }

  }

  public static class getTranxsWithConfirmStatus_result implements org.apache.thrift.TBase<getTranxsWithConfirmStatus_result, getTranxsWithConfirmStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxsWithConfirmStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxsWithConfirmStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxsWithConfirmStatus_resultTupleSchemeFactory());
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_TransactionReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxsWithConfirmStatus_result.class, metaDataMap);
    }

    public getTranxsWithConfirmStatus_result() {
    }

    public getTranxsWithConfirmStatus_result(
      List<vng.bankinggateway.thrift.T_TransactionReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxsWithConfirmStatus_result(getTranxsWithConfirmStatus_result other) {
      if (other.isSetSuccess()) {
        List<vng.bankinggateway.thrift.T_TransactionReport> __this__success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>();
        for (vng.bankinggateway.thrift.T_TransactionReport other_element : other.success) {
          __this__success.add(new vng.bankinggateway.thrift.T_TransactionReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTranxsWithConfirmStatus_result deepCopy() {
      return new getTranxsWithConfirmStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.bankinggateway.thrift.T_TransactionReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.bankinggateway.thrift.T_TransactionReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>();
      }
      this.success.add(elem);
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> getSuccess() {
      return this.success;
    }

    public getTranxsWithConfirmStatus_result setSuccess(List<vng.bankinggateway.thrift.T_TransactionReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.bankinggateway.thrift.T_TransactionReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxsWithConfirmStatus_result)
        return this.equals((getTranxsWithConfirmStatus_result)that);
      return false;
    }

    public boolean equals(getTranxsWithConfirmStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxsWithConfirmStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxsWithConfirmStatus_result typedOther = (getTranxsWithConfirmStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxsWithConfirmStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxsWithConfirmStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getTranxsWithConfirmStatus_resultStandardScheme getScheme() {
        return new getTranxsWithConfirmStatus_resultStandardScheme();
      }
    }

    private static class getTranxsWithConfirmStatus_resultStandardScheme extends StandardScheme<getTranxsWithConfirmStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxsWithConfirmStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    vng.bankinggateway.thrift.T_TransactionReport _elem18; // required
                    _elem18 = new vng.bankinggateway.thrift.T_TransactionReport();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxsWithConfirmStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (vng.bankinggateway.thrift.T_TransactionReport _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxsWithConfirmStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getTranxsWithConfirmStatus_resultTupleScheme getScheme() {
        return new getTranxsWithConfirmStatus_resultTupleScheme();
      }
    }

    private static class getTranxsWithConfirmStatus_resultTupleScheme extends TupleScheme<getTranxsWithConfirmStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxsWithConfirmStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (vng.bankinggateway.thrift.T_TransactionReport _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxsWithConfirmStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              vng.bankinggateway.thrift.T_TransactionReport _elem23; // required
              _elem23 = new vng.bankinggateway.thrift.T_TransactionReport();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTransaction_args implements org.apache.thrift.TBase<getTransaction_args, getTransaction_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTransaction_args");

    private static final org.apache.thrift.protocol.TField TX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTransaction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTransaction_argsTupleSchemeFactory());
    }

    public int txID; // required
    public String time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TX_ID((short)1, "txID"),
      TIME((short)2, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TX_ID
            return TX_ID;
          case 2: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TX_ID, new org.apache.thrift.meta_data.FieldMetaData("txID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTransaction_args.class, metaDataMap);
    }

    public getTransaction_args() {
    }

    public getTransaction_args(
      int txID,
      String time)
    {
      this();
      this.txID = txID;
      setTxIDIsSet(true);
      this.time = time;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransaction_args(getTransaction_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.txID = other.txID;
      if (other.isSetTime()) {
        this.time = other.time;
      }
    }

    public getTransaction_args deepCopy() {
      return new getTransaction_args(this);
    }

    @Override
    public void clear() {
      setTxIDIsSet(false);
      this.txID = 0;
      this.time = null;
    }

    public int getTxID() {
      return this.txID;
    }

    public getTransaction_args setTxID(int txID) {
      this.txID = txID;
      setTxIDIsSet(true);
      return this;
    }

    public void unsetTxID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXID_ISSET_ID);
    }

    /** Returns true if field txID is set (has been assigned a value) and false otherwise */
    public boolean isSetTxID() {
      return EncodingUtils.testBit(__isset_bitfield, __TXID_ISSET_ID);
    }

    public void setTxIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXID_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getTransaction_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TX_ID:
        if (value == null) {
          unsetTxID();
        } else {
          setTxID((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TX_ID:
        return Integer.valueOf(getTxID());

      case TIME:
        return getTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TX_ID:
        return isSetTxID();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransaction_args)
        return this.equals((getTransaction_args)that);
      return false;
    }

    public boolean equals(getTransaction_args that) {
      if (that == null)
        return false;

      boolean this_present_txID = true;
      boolean that_present_txID = true;
      if (this_present_txID || that_present_txID) {
        if (!(this_present_txID && that_present_txID))
          return false;
        if (this.txID != that.txID)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTransaction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTransaction_args typedOther = (getTransaction_args)other;

      lastComparison = Boolean.valueOf(isSetTxID()).compareTo(typedOther.isSetTxID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txID, typedOther.txID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransaction_args(");
      boolean first = true;

      sb.append("txID:");
      sb.append(this.txID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTransaction_argsStandardSchemeFactory implements SchemeFactory {
      public getTransaction_argsStandardScheme getScheme() {
        return new getTransaction_argsStandardScheme();
      }
    }

    private static class getTransaction_argsStandardScheme extends StandardScheme<getTransaction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTransaction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.txID = iprot.readI32();
                struct.setTxIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTransaction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TX_ID_FIELD_DESC);
        oprot.writeI32(struct.txID);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTransaction_argsTupleSchemeFactory implements SchemeFactory {
      public getTransaction_argsTupleScheme getScheme() {
        return new getTransaction_argsTupleScheme();
      }
    }

    private static class getTransaction_argsTupleScheme extends TupleScheme<getTransaction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTxID()) {
          optionals.set(0);
        }
        if (struct.isSetTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTxID()) {
          oprot.writeI32(struct.txID);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.txID = iprot.readI32();
          struct.setTxIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class getTransaction_result implements org.apache.thrift.TBase<getTransaction_result, getTransaction_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTransaction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTransaction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTransaction_resultTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_Transaction success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Transaction.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTransaction_result.class, metaDataMap);
    }

    public getTransaction_result() {
    }

    public getTransaction_result(
      vng.bankinggateway.thrift.T_Transaction success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransaction_result(getTransaction_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.bankinggateway.thrift.T_Transaction(other.success);
      }
    }

    public getTransaction_result deepCopy() {
      return new getTransaction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.bankinggateway.thrift.T_Transaction getSuccess() {
      return this.success;
    }

    public getTransaction_result setSuccess(vng.bankinggateway.thrift.T_Transaction success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.bankinggateway.thrift.T_Transaction)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransaction_result)
        return this.equals((getTransaction_result)that);
      return false;
    }

    public boolean equals(getTransaction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTransaction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTransaction_result typedOther = (getTransaction_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransaction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTransaction_resultStandardSchemeFactory implements SchemeFactory {
      public getTransaction_resultStandardScheme getScheme() {
        return new getTransaction_resultStandardScheme();
      }
    }

    private static class getTransaction_resultStandardScheme extends StandardScheme<getTransaction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTransaction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new vng.bankinggateway.thrift.T_Transaction();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTransaction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTransaction_resultTupleSchemeFactory implements SchemeFactory {
      public getTransaction_resultTupleScheme getScheme() {
        return new getTransaction_resultTupleScheme();
      }
    }

    private static class getTransaction_resultTupleScheme extends TupleScheme<getTransaction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new vng.bankinggateway.thrift.T_Transaction();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTransactionWithBankCode_args implements org.apache.thrift.TBase<getTransactionWithBankCode_args, getTransactionWithBankCode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTransactionWithBankCode_args");

    private static final org.apache.thrift.protocol.TField TX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BANK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTransactionWithBankCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTransactionWithBankCode_argsTupleSchemeFactory());
    }

    public int txID; // required
    public String time; // required
    public String bankCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TX_ID((short)1, "txID"),
      TIME((short)2, "time"),
      BANK_CODE((short)3, "bankCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TX_ID
            return TX_ID;
          case 2: // TIME
            return TIME;
          case 3: // BANK_CODE
            return BANK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TX_ID, new org.apache.thrift.meta_data.FieldMetaData("txID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_CODE, new org.apache.thrift.meta_data.FieldMetaData("bankCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTransactionWithBankCode_args.class, metaDataMap);
    }

    public getTransactionWithBankCode_args() {
    }

    public getTransactionWithBankCode_args(
      int txID,
      String time,
      String bankCode)
    {
      this();
      this.txID = txID;
      setTxIDIsSet(true);
      this.time = time;
      this.bankCode = bankCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransactionWithBankCode_args(getTransactionWithBankCode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.txID = other.txID;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetBankCode()) {
        this.bankCode = other.bankCode;
      }
    }

    public getTransactionWithBankCode_args deepCopy() {
      return new getTransactionWithBankCode_args(this);
    }

    @Override
    public void clear() {
      setTxIDIsSet(false);
      this.txID = 0;
      this.time = null;
      this.bankCode = null;
    }

    public int getTxID() {
      return this.txID;
    }

    public getTransactionWithBankCode_args setTxID(int txID) {
      this.txID = txID;
      setTxIDIsSet(true);
      return this;
    }

    public void unsetTxID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXID_ISSET_ID);
    }

    /** Returns true if field txID is set (has been assigned a value) and false otherwise */
    public boolean isSetTxID() {
      return EncodingUtils.testBit(__isset_bitfield, __TXID_ISSET_ID);
    }

    public void setTxIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXID_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getTransactionWithBankCode_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public String getBankCode() {
      return this.bankCode;
    }

    public getTransactionWithBankCode_args setBankCode(String bankCode) {
      this.bankCode = bankCode;
      return this;
    }

    public void unsetBankCode() {
      this.bankCode = null;
    }

    /** Returns true if field bankCode is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCode() {
      return this.bankCode != null;
    }

    public void setBankCodeIsSet(boolean value) {
      if (!value) {
        this.bankCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TX_ID:
        if (value == null) {
          unsetTxID();
        } else {
          setTxID((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case BANK_CODE:
        if (value == null) {
          unsetBankCode();
        } else {
          setBankCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TX_ID:
        return Integer.valueOf(getTxID());

      case TIME:
        return getTime();

      case BANK_CODE:
        return getBankCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TX_ID:
        return isSetTxID();
      case TIME:
        return isSetTime();
      case BANK_CODE:
        return isSetBankCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransactionWithBankCode_args)
        return this.equals((getTransactionWithBankCode_args)that);
      return false;
    }

    public boolean equals(getTransactionWithBankCode_args that) {
      if (that == null)
        return false;

      boolean this_present_txID = true;
      boolean that_present_txID = true;
      if (this_present_txID || that_present_txID) {
        if (!(this_present_txID && that_present_txID))
          return false;
        if (this.txID != that.txID)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_bankCode = true && this.isSetBankCode();
      boolean that_present_bankCode = true && that.isSetBankCode();
      if (this_present_bankCode || that_present_bankCode) {
        if (!(this_present_bankCode && that_present_bankCode))
          return false;
        if (!this.bankCode.equals(that.bankCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTransactionWithBankCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTransactionWithBankCode_args typedOther = (getTransactionWithBankCode_args)other;

      lastComparison = Boolean.valueOf(isSetTxID()).compareTo(typedOther.isSetTxID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txID, typedOther.txID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankCode()).compareTo(typedOther.isSetBankCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCode, typedOther.bankCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransactionWithBankCode_args(");
      boolean first = true;

      sb.append("txID:");
      sb.append(this.txID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankCode:");
      if (this.bankCode == null) {
        sb.append("null");
      } else {
        sb.append(this.bankCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTransactionWithBankCode_argsStandardSchemeFactory implements SchemeFactory {
      public getTransactionWithBankCode_argsStandardScheme getScheme() {
        return new getTransactionWithBankCode_argsStandardScheme();
      }
    }

    private static class getTransactionWithBankCode_argsStandardScheme extends StandardScheme<getTransactionWithBankCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTransactionWithBankCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.txID = iprot.readI32();
                struct.setTxIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BANK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankCode = iprot.readString();
                struct.setBankCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTransactionWithBankCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TX_ID_FIELD_DESC);
        oprot.writeI32(struct.txID);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.bankCode != null) {
          oprot.writeFieldBegin(BANK_CODE_FIELD_DESC);
          oprot.writeString(struct.bankCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTransactionWithBankCode_argsTupleSchemeFactory implements SchemeFactory {
      public getTransactionWithBankCode_argsTupleScheme getScheme() {
        return new getTransactionWithBankCode_argsTupleScheme();
      }
    }

    private static class getTransactionWithBankCode_argsTupleScheme extends TupleScheme<getTransactionWithBankCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTransactionWithBankCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTxID()) {
          optionals.set(0);
        }
        if (struct.isSetTime()) {
          optionals.set(1);
        }
        if (struct.isSetBankCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTxID()) {
          oprot.writeI32(struct.txID);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetBankCode()) {
          oprot.writeString(struct.bankCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTransactionWithBankCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.txID = iprot.readI32();
          struct.setTxIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bankCode = iprot.readString();
          struct.setBankCodeIsSet(true);
        }
      }
    }

  }

  public static class getTransactionWithBankCode_result implements org.apache.thrift.TBase<getTransactionWithBankCode_result, getTransactionWithBankCode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTransactionWithBankCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTransactionWithBankCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTransactionWithBankCode_resultTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_Transaction success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Transaction.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTransactionWithBankCode_result.class, metaDataMap);
    }

    public getTransactionWithBankCode_result() {
    }

    public getTransactionWithBankCode_result(
      vng.bankinggateway.thrift.T_Transaction success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransactionWithBankCode_result(getTransactionWithBankCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.bankinggateway.thrift.T_Transaction(other.success);
      }
    }

    public getTransactionWithBankCode_result deepCopy() {
      return new getTransactionWithBankCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.bankinggateway.thrift.T_Transaction getSuccess() {
      return this.success;
    }

    public getTransactionWithBankCode_result setSuccess(vng.bankinggateway.thrift.T_Transaction success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.bankinggateway.thrift.T_Transaction)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransactionWithBankCode_result)
        return this.equals((getTransactionWithBankCode_result)that);
      return false;
    }

    public boolean equals(getTransactionWithBankCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTransactionWithBankCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTransactionWithBankCode_result typedOther = (getTransactionWithBankCode_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransactionWithBankCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTransactionWithBankCode_resultStandardSchemeFactory implements SchemeFactory {
      public getTransactionWithBankCode_resultStandardScheme getScheme() {
        return new getTransactionWithBankCode_resultStandardScheme();
      }
    }

    private static class getTransactionWithBankCode_resultStandardScheme extends StandardScheme<getTransactionWithBankCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTransactionWithBankCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new vng.bankinggateway.thrift.T_Transaction();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTransactionWithBankCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTransactionWithBankCode_resultTupleSchemeFactory implements SchemeFactory {
      public getTransactionWithBankCode_resultTupleScheme getScheme() {
        return new getTransactionWithBankCode_resultTupleScheme();
      }
    }

    private static class getTransactionWithBankCode_resultTupleScheme extends TupleScheme<getTransactionWithBankCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTransactionWithBankCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTransactionWithBankCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new vng.bankinggateway.thrift.T_Transaction();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class generateTransID_args implements org.apache.thrift.TBase<generateTransID_args, generateTransID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateTransID_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateTransID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateTransID_argsTupleSchemeFactory());
    }

    public String day; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateTransID_args.class, metaDataMap);
    }

    public generateTransID_args() {
    }

    public generateTransID_args(
      String day)
    {
      this();
      this.day = day;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateTransID_args(generateTransID_args other) {
      if (other.isSetDay()) {
        this.day = other.day;
      }
    }

    public generateTransID_args deepCopy() {
      return new generateTransID_args(this);
    }

    @Override
    public void clear() {
      this.day = null;
    }

    public String getDay() {
      return this.day;
    }

    public generateTransID_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateTransID_args)
        return this.equals((generateTransID_args)that);
      return false;
    }

    public boolean equals(generateTransID_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateTransID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateTransID_args typedOther = (generateTransID_args)other;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, typedOther.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateTransID_args(");
      boolean first = true;

      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateTransID_argsStandardSchemeFactory implements SchemeFactory {
      public generateTransID_argsStandardScheme getScheme() {
        return new generateTransID_argsStandardScheme();
      }
    }

    private static class generateTransID_argsStandardScheme extends StandardScheme<generateTransID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateTransID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateTransID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateTransID_argsTupleSchemeFactory implements SchemeFactory {
      public generateTransID_argsTupleScheme getScheme() {
        return new generateTransID_argsTupleScheme();
      }
    }

    private static class generateTransID_argsTupleScheme extends TupleScheme<generateTransID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateTransID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateTransID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
      }
    }

  }

  public static class generateTransID_result implements org.apache.thrift.TBase<generateTransID_result, generateTransID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateTransID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateTransID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateTransID_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateTransID_result.class, metaDataMap);
    }

    public generateTransID_result() {
    }

    public generateTransID_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateTransID_result(generateTransID_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public generateTransID_result deepCopy() {
      return new generateTransID_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public generateTransID_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateTransID_result)
        return this.equals((generateTransID_result)that);
      return false;
    }

    public boolean equals(generateTransID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateTransID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateTransID_result typedOther = (generateTransID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateTransID_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateTransID_resultStandardSchemeFactory implements SchemeFactory {
      public generateTransID_resultStandardScheme getScheme() {
        return new generateTransID_resultStandardScheme();
      }
    }

    private static class generateTransID_resultStandardScheme extends StandardScheme<generateTransID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateTransID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateTransID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateTransID_resultTupleSchemeFactory implements SchemeFactory {
      public generateTransID_resultTupleScheme getScheme() {
        return new generateTransID_resultTupleScheme();
      }
    }

    private static class generateTransID_resultTupleScheme extends TupleScheme<generateTransID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateTransID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateTransID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class generateQueryID_args implements org.apache.thrift.TBase<generateQueryID_args, generateQueryID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateQueryID_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateQueryID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateQueryID_argsTupleSchemeFactory());
    }

    public String day; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateQueryID_args.class, metaDataMap);
    }

    public generateQueryID_args() {
    }

    public generateQueryID_args(
      String day)
    {
      this();
      this.day = day;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateQueryID_args(generateQueryID_args other) {
      if (other.isSetDay()) {
        this.day = other.day;
      }
    }

    public generateQueryID_args deepCopy() {
      return new generateQueryID_args(this);
    }

    @Override
    public void clear() {
      this.day = null;
    }

    public String getDay() {
      return this.day;
    }

    public generateQueryID_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateQueryID_args)
        return this.equals((generateQueryID_args)that);
      return false;
    }

    public boolean equals(generateQueryID_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateQueryID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateQueryID_args typedOther = (generateQueryID_args)other;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, typedOther.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateQueryID_args(");
      boolean first = true;

      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateQueryID_argsStandardSchemeFactory implements SchemeFactory {
      public generateQueryID_argsStandardScheme getScheme() {
        return new generateQueryID_argsStandardScheme();
      }
    }

    private static class generateQueryID_argsStandardScheme extends StandardScheme<generateQueryID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateQueryID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateQueryID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateQueryID_argsTupleSchemeFactory implements SchemeFactory {
      public generateQueryID_argsTupleScheme getScheme() {
        return new generateQueryID_argsTupleScheme();
      }
    }

    private static class generateQueryID_argsTupleScheme extends TupleScheme<generateQueryID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateQueryID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateQueryID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
      }
    }

  }

  public static class generateQueryID_result implements org.apache.thrift.TBase<generateQueryID_result, generateQueryID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateQueryID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateQueryID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateQueryID_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateQueryID_result.class, metaDataMap);
    }

    public generateQueryID_result() {
    }

    public generateQueryID_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateQueryID_result(generateQueryID_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public generateQueryID_result deepCopy() {
      return new generateQueryID_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public generateQueryID_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateQueryID_result)
        return this.equals((generateQueryID_result)that);
      return false;
    }

    public boolean equals(generateQueryID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateQueryID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateQueryID_result typedOther = (generateQueryID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateQueryID_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateQueryID_resultStandardSchemeFactory implements SchemeFactory {
      public generateQueryID_resultStandardScheme getScheme() {
        return new generateQueryID_resultStandardScheme();
      }
    }

    private static class generateQueryID_resultStandardScheme extends StandardScheme<generateQueryID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateQueryID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateQueryID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateQueryID_resultTupleSchemeFactory implements SchemeFactory {
      public generateQueryID_resultTupleScheme getScheme() {
        return new generateQueryID_resultTupleScheme();
      }
    }

    private static class generateQueryID_resultTupleScheme extends TupleScheme<generateQueryID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateQueryID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateQueryID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTranxStatus_args implements org.apache.thrift.TBase<getTranxStatus_args, getTranxStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxStatus_args");

    private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxStatus_argsTupleSchemeFactory());
    }

    public String refID; // required
    public String day; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REF_ID((short)1, "refID"),
      DAY((short)2, "day");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REF_ID
            return REF_ID;
          case 2: // DAY
            return DAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxStatus_args.class, metaDataMap);
    }

    public getTranxStatus_args() {
    }

    public getTranxStatus_args(
      String refID,
      String day)
    {
      this();
      this.refID = refID;
      this.day = day;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxStatus_args(getTranxStatus_args other) {
      if (other.isSetRefID()) {
        this.refID = other.refID;
      }
      if (other.isSetDay()) {
        this.day = other.day;
      }
    }

    public getTranxStatus_args deepCopy() {
      return new getTranxStatus_args(this);
    }

    @Override
    public void clear() {
      this.refID = null;
      this.day = null;
    }

    public String getRefID() {
      return this.refID;
    }

    public getTranxStatus_args setRefID(String refID) {
      this.refID = refID;
      return this;
    }

    public void unsetRefID() {
      this.refID = null;
    }

    /** Returns true if field refID is set (has been assigned a value) and false otherwise */
    public boolean isSetRefID() {
      return this.refID != null;
    }

    public void setRefIDIsSet(boolean value) {
      if (!value) {
        this.refID = null;
      }
    }

    public String getDay() {
      return this.day;
    }

    public getTranxStatus_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REF_ID:
        if (value == null) {
          unsetRefID();
        } else {
          setRefID((String)value);
        }
        break;

      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REF_ID:
        return getRefID();

      case DAY:
        return getDay();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REF_ID:
        return isSetRefID();
      case DAY:
        return isSetDay();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxStatus_args)
        return this.equals((getTranxStatus_args)that);
      return false;
    }

    public boolean equals(getTranxStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_refID = true && this.isSetRefID();
      boolean that_present_refID = true && that.isSetRefID();
      if (this_present_refID || that_present_refID) {
        if (!(this_present_refID && that_present_refID))
          return false;
        if (!this.refID.equals(that.refID))
          return false;
      }

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxStatus_args typedOther = (getTranxStatus_args)other;

      lastComparison = Boolean.valueOf(isSetRefID()).compareTo(typedOther.isSetRefID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refID, typedOther.refID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, typedOther.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxStatus_args(");
      boolean first = true;

      sb.append("refID:");
      if (this.refID == null) {
        sb.append("null");
      } else {
        sb.append(this.refID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getTranxStatus_argsStandardScheme getScheme() {
        return new getTranxStatus_argsStandardScheme();
      }
    }

    private static class getTranxStatus_argsStandardScheme extends StandardScheme<getTranxStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REF_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.refID = iprot.readString();
                struct.setRefIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refID != null) {
          oprot.writeFieldBegin(REF_ID_FIELD_DESC);
          oprot.writeString(struct.refID);
          oprot.writeFieldEnd();
        }
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getTranxStatus_argsTupleScheme getScheme() {
        return new getTranxStatus_argsTupleScheme();
      }
    }

    private static class getTranxStatus_argsTupleScheme extends TupleScheme<getTranxStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefID()) {
          optionals.set(0);
        }
        if (struct.isSetDay()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRefID()) {
          oprot.writeString(struct.refID);
        }
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.refID = iprot.readString();
          struct.setRefIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
      }
    }

  }

  public static class getTranxStatus_result implements org.apache.thrift.TBase<getTranxStatus_result, getTranxStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxStatus_resultTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_TranStat success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_TranStat.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxStatus_result.class, metaDataMap);
    }

    public getTranxStatus_result() {
    }

    public getTranxStatus_result(
      vng.bankinggateway.thrift.T_TranStat success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxStatus_result(getTranxStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.bankinggateway.thrift.T_TranStat(other.success);
      }
    }

    public getTranxStatus_result deepCopy() {
      return new getTranxStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.bankinggateway.thrift.T_TranStat getSuccess() {
      return this.success;
    }

    public getTranxStatus_result setSuccess(vng.bankinggateway.thrift.T_TranStat success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.bankinggateway.thrift.T_TranStat)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxStatus_result)
        return this.equals((getTranxStatus_result)that);
      return false;
    }

    public boolean equals(getTranxStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxStatus_result typedOther = (getTranxStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getTranxStatus_resultStandardScheme getScheme() {
        return new getTranxStatus_resultStandardScheme();
      }
    }

    private static class getTranxStatus_resultStandardScheme extends StandardScheme<getTranxStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new vng.bankinggateway.thrift.T_TranStat();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getTranxStatus_resultTupleScheme getScheme() {
        return new getTranxStatus_resultTupleScheme();
      }
    }

    private static class getTranxStatus_resultTupleScheme extends TupleScheme<getTranxStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new vng.bankinggateway.thrift.T_TranStat();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class generateTransIdByBankCode_args implements org.apache.thrift.TBase<generateTransIdByBankCode_args, generateTransIdByBankCode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateTransIdByBankCode_args");

    private static final org.apache.thrift.protocol.TField BANK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateTransIdByBankCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateTransIdByBankCode_argsTupleSchemeFactory());
    }

    public String bankCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_CODE((short)1, "bankCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_CODE
            return BANK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_CODE, new org.apache.thrift.meta_data.FieldMetaData("bankCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateTransIdByBankCode_args.class, metaDataMap);
    }

    public generateTransIdByBankCode_args() {
    }

    public generateTransIdByBankCode_args(
      String bankCode)
    {
      this();
      this.bankCode = bankCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateTransIdByBankCode_args(generateTransIdByBankCode_args other) {
      if (other.isSetBankCode()) {
        this.bankCode = other.bankCode;
      }
    }

    public generateTransIdByBankCode_args deepCopy() {
      return new generateTransIdByBankCode_args(this);
    }

    @Override
    public void clear() {
      this.bankCode = null;
    }

    public String getBankCode() {
      return this.bankCode;
    }

    public generateTransIdByBankCode_args setBankCode(String bankCode) {
      this.bankCode = bankCode;
      return this;
    }

    public void unsetBankCode() {
      this.bankCode = null;
    }

    /** Returns true if field bankCode is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCode() {
      return this.bankCode != null;
    }

    public void setBankCodeIsSet(boolean value) {
      if (!value) {
        this.bankCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_CODE:
        if (value == null) {
          unsetBankCode();
        } else {
          setBankCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_CODE:
        return getBankCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_CODE:
        return isSetBankCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateTransIdByBankCode_args)
        return this.equals((generateTransIdByBankCode_args)that);
      return false;
    }

    public boolean equals(generateTransIdByBankCode_args that) {
      if (that == null)
        return false;

      boolean this_present_bankCode = true && this.isSetBankCode();
      boolean that_present_bankCode = true && that.isSetBankCode();
      if (this_present_bankCode || that_present_bankCode) {
        if (!(this_present_bankCode && that_present_bankCode))
          return false;
        if (!this.bankCode.equals(that.bankCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateTransIdByBankCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateTransIdByBankCode_args typedOther = (generateTransIdByBankCode_args)other;

      lastComparison = Boolean.valueOf(isSetBankCode()).compareTo(typedOther.isSetBankCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCode, typedOther.bankCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateTransIdByBankCode_args(");
      boolean first = true;

      sb.append("bankCode:");
      if (this.bankCode == null) {
        sb.append("null");
      } else {
        sb.append(this.bankCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateTransIdByBankCode_argsStandardSchemeFactory implements SchemeFactory {
      public generateTransIdByBankCode_argsStandardScheme getScheme() {
        return new generateTransIdByBankCode_argsStandardScheme();
      }
    }

    private static class generateTransIdByBankCode_argsStandardScheme extends StandardScheme<generateTransIdByBankCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateTransIdByBankCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankCode = iprot.readString();
                struct.setBankCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateTransIdByBankCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankCode != null) {
          oprot.writeFieldBegin(BANK_CODE_FIELD_DESC);
          oprot.writeString(struct.bankCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateTransIdByBankCode_argsTupleSchemeFactory implements SchemeFactory {
      public generateTransIdByBankCode_argsTupleScheme getScheme() {
        return new generateTransIdByBankCode_argsTupleScheme();
      }
    }

    private static class generateTransIdByBankCode_argsTupleScheme extends TupleScheme<generateTransIdByBankCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateTransIdByBankCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBankCode()) {
          oprot.writeString(struct.bankCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateTransIdByBankCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bankCode = iprot.readString();
          struct.setBankCodeIsSet(true);
        }
      }
    }

  }

  public static class generateTransIdByBankCode_result implements org.apache.thrift.TBase<generateTransIdByBankCode_result, generateTransIdByBankCode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateTransIdByBankCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateTransIdByBankCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateTransIdByBankCode_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateTransIdByBankCode_result.class, metaDataMap);
    }

    public generateTransIdByBankCode_result() {
    }

    public generateTransIdByBankCode_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateTransIdByBankCode_result(generateTransIdByBankCode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public generateTransIdByBankCode_result deepCopy() {
      return new generateTransIdByBankCode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public generateTransIdByBankCode_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateTransIdByBankCode_result)
        return this.equals((generateTransIdByBankCode_result)that);
      return false;
    }

    public boolean equals(generateTransIdByBankCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateTransIdByBankCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateTransIdByBankCode_result typedOther = (generateTransIdByBankCode_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateTransIdByBankCode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateTransIdByBankCode_resultStandardSchemeFactory implements SchemeFactory {
      public generateTransIdByBankCode_resultStandardScheme getScheme() {
        return new generateTransIdByBankCode_resultStandardScheme();
      }
    }

    private static class generateTransIdByBankCode_resultStandardScheme extends StandardScheme<generateTransIdByBankCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateTransIdByBankCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateTransIdByBankCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateTransIdByBankCode_resultTupleSchemeFactory implements SchemeFactory {
      public generateTransIdByBankCode_resultTupleScheme getScheme() {
        return new generateTransIdByBankCode_resultTupleScheme();
      }
    }

    private static class generateTransIdByBankCode_resultTupleScheme extends TupleScheme<generateTransIdByBankCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateTransIdByBankCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateTransIdByBankCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTranxsWithBankCode_args implements org.apache.thrift.TBase<getTranxsWithBankCode_args, getTranxsWithBankCode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxsWithBankCode_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TX_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("txStatus", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField ALL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("allStatus", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField BANK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCode", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxsWithBankCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxsWithBankCode_argsTupleSchemeFactory());
    }

    public String day; // required
    public short txStatus; // required
    public boolean allStatus; // required
    public String bankCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day"),
      TX_STATUS((short)2, "txStatus"),
      ALL_STATUS((short)3, "allStatus"),
      BANK_CODE((short)4, "bankCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          case 2: // TX_STATUS
            return TX_STATUS;
          case 3: // ALL_STATUS
            return ALL_STATUS;
          case 4: // BANK_CODE
            return BANK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TXSTATUS_ISSET_ID = 0;
    private static final int __ALLSTATUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TX_STATUS, new org.apache.thrift.meta_data.FieldMetaData("txStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.ALL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("allStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.BANK_CODE, new org.apache.thrift.meta_data.FieldMetaData("bankCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxsWithBankCode_args.class, metaDataMap);
    }

    public getTranxsWithBankCode_args() {
    }

    public getTranxsWithBankCode_args(
      String day,
      short txStatus,
      boolean allStatus,
      String bankCode)
    {
      this();
      this.day = day;
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
      this.allStatus = allStatus;
      setAllStatusIsSet(true);
      this.bankCode = bankCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxsWithBankCode_args(getTranxsWithBankCode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDay()) {
        this.day = other.day;
      }
      this.txStatus = other.txStatus;
      this.allStatus = other.allStatus;
      if (other.isSetBankCode()) {
        this.bankCode = other.bankCode;
      }
    }

    public getTranxsWithBankCode_args deepCopy() {
      return new getTranxsWithBankCode_args(this);
    }

    @Override
    public void clear() {
      this.day = null;
      setTxStatusIsSet(false);
      this.txStatus = 0;
      setAllStatusIsSet(false);
      this.allStatus = false;
      this.bankCode = null;
    }

    public String getDay() {
      return this.day;
    }

    public getTranxsWithBankCode_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public short getTxStatus() {
      return this.txStatus;
    }

    public getTranxsWithBankCode_args setTxStatus(short txStatus) {
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
      return this;
    }

    public void unsetTxStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXSTATUS_ISSET_ID);
    }

    /** Returns true if field txStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetTxStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __TXSTATUS_ISSET_ID);
    }

    public void setTxStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXSTATUS_ISSET_ID, value);
    }

    public boolean isAllStatus() {
      return this.allStatus;
    }

    public getTranxsWithBankCode_args setAllStatus(boolean allStatus) {
      this.allStatus = allStatus;
      setAllStatusIsSet(true);
      return this;
    }

    public void unsetAllStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLSTATUS_ISSET_ID);
    }

    /** Returns true if field allStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetAllStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __ALLSTATUS_ISSET_ID);
    }

    public void setAllStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLSTATUS_ISSET_ID, value);
    }

    public String getBankCode() {
      return this.bankCode;
    }

    public getTranxsWithBankCode_args setBankCode(String bankCode) {
      this.bankCode = bankCode;
      return this;
    }

    public void unsetBankCode() {
      this.bankCode = null;
    }

    /** Returns true if field bankCode is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCode() {
      return this.bankCode != null;
    }

    public void setBankCodeIsSet(boolean value) {
      if (!value) {
        this.bankCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      case TX_STATUS:
        if (value == null) {
          unsetTxStatus();
        } else {
          setTxStatus((Short)value);
        }
        break;

      case ALL_STATUS:
        if (value == null) {
          unsetAllStatus();
        } else {
          setAllStatus((Boolean)value);
        }
        break;

      case BANK_CODE:
        if (value == null) {
          unsetBankCode();
        } else {
          setBankCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      case TX_STATUS:
        return Short.valueOf(getTxStatus());

      case ALL_STATUS:
        return Boolean.valueOf(isAllStatus());

      case BANK_CODE:
        return getBankCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      case TX_STATUS:
        return isSetTxStatus();
      case ALL_STATUS:
        return isSetAllStatus();
      case BANK_CODE:
        return isSetBankCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxsWithBankCode_args)
        return this.equals((getTranxsWithBankCode_args)that);
      return false;
    }

    public boolean equals(getTranxsWithBankCode_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      boolean this_present_txStatus = true;
      boolean that_present_txStatus = true;
      if (this_present_txStatus || that_present_txStatus) {
        if (!(this_present_txStatus && that_present_txStatus))
          return false;
        if (this.txStatus != that.txStatus)
          return false;
      }

      boolean this_present_allStatus = true;
      boolean that_present_allStatus = true;
      if (this_present_allStatus || that_present_allStatus) {
        if (!(this_present_allStatus && that_present_allStatus))
          return false;
        if (this.allStatus != that.allStatus)
          return false;
      }

      boolean this_present_bankCode = true && this.isSetBankCode();
      boolean that_present_bankCode = true && that.isSetBankCode();
      if (this_present_bankCode || that_present_bankCode) {
        if (!(this_present_bankCode && that_present_bankCode))
          return false;
        if (!this.bankCode.equals(that.bankCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxsWithBankCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxsWithBankCode_args typedOther = (getTranxsWithBankCode_args)other;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, typedOther.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxStatus()).compareTo(typedOther.isSetTxStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txStatus, typedOther.txStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAllStatus()).compareTo(typedOther.isSetAllStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allStatus, typedOther.allStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankCode()).compareTo(typedOther.isSetBankCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCode, typedOther.bankCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxsWithBankCode_args(");
      boolean first = true;

      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txStatus:");
      sb.append(this.txStatus);
      first = false;
      if (!first) sb.append(", ");
      sb.append("allStatus:");
      sb.append(this.allStatus);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankCode:");
      if (this.bankCode == null) {
        sb.append("null");
      } else {
        sb.append(this.bankCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxsWithBankCode_argsStandardSchemeFactory implements SchemeFactory {
      public getTranxsWithBankCode_argsStandardScheme getScheme() {
        return new getTranxsWithBankCode_argsStandardScheme();
      }
    }

    private static class getTranxsWithBankCode_argsStandardScheme extends StandardScheme<getTranxsWithBankCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxsWithBankCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TX_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.txStatus = iprot.readI16();
                struct.setTxStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALL_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.allStatus = iprot.readBool();
                struct.setAllStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BANK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankCode = iprot.readString();
                struct.setBankCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxsWithBankCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TX_STATUS_FIELD_DESC);
        oprot.writeI16(struct.txStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ALL_STATUS_FIELD_DESC);
        oprot.writeBool(struct.allStatus);
        oprot.writeFieldEnd();
        if (struct.bankCode != null) {
          oprot.writeFieldBegin(BANK_CODE_FIELD_DESC);
          oprot.writeString(struct.bankCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxsWithBankCode_argsTupleSchemeFactory implements SchemeFactory {
      public getTranxsWithBankCode_argsTupleScheme getScheme() {
        return new getTranxsWithBankCode_argsTupleScheme();
      }
    }

    private static class getTranxsWithBankCode_argsTupleScheme extends TupleScheme<getTranxsWithBankCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxsWithBankCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        if (struct.isSetTxStatus()) {
          optionals.set(1);
        }
        if (struct.isSetAllStatus()) {
          optionals.set(2);
        }
        if (struct.isSetBankCode()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
        if (struct.isSetTxStatus()) {
          oprot.writeI16(struct.txStatus);
        }
        if (struct.isSetAllStatus()) {
          oprot.writeBool(struct.allStatus);
        }
        if (struct.isSetBankCode()) {
          oprot.writeString(struct.bankCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxsWithBankCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txStatus = iprot.readI16();
          struct.setTxStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.allStatus = iprot.readBool();
          struct.setAllStatusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.bankCode = iprot.readString();
          struct.setBankCodeIsSet(true);
        }
      }
    }

  }

  public static class getTranxsWithBankCode_result implements org.apache.thrift.TBase<getTranxsWithBankCode_result, getTranxsWithBankCode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxsWithBankCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxsWithBankCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxsWithBankCode_resultTupleSchemeFactory());
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_TransactionReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxsWithBankCode_result.class, metaDataMap);
    }

    public getTranxsWithBankCode_result() {
    }

    public getTranxsWithBankCode_result(
      List<vng.bankinggateway.thrift.T_TransactionReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxsWithBankCode_result(getTranxsWithBankCode_result other) {
      if (other.isSetSuccess()) {
        List<vng.bankinggateway.thrift.T_TransactionReport> __this__success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>();
        for (vng.bankinggateway.thrift.T_TransactionReport other_element : other.success) {
          __this__success.add(new vng.bankinggateway.thrift.T_TransactionReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTranxsWithBankCode_result deepCopy() {
      return new getTranxsWithBankCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.bankinggateway.thrift.T_TransactionReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.bankinggateway.thrift.T_TransactionReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>();
      }
      this.success.add(elem);
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> getSuccess() {
      return this.success;
    }

    public getTranxsWithBankCode_result setSuccess(List<vng.bankinggateway.thrift.T_TransactionReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.bankinggateway.thrift.T_TransactionReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxsWithBankCode_result)
        return this.equals((getTranxsWithBankCode_result)that);
      return false;
    }

    public boolean equals(getTranxsWithBankCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxsWithBankCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxsWithBankCode_result typedOther = (getTranxsWithBankCode_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxsWithBankCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxsWithBankCode_resultStandardSchemeFactory implements SchemeFactory {
      public getTranxsWithBankCode_resultStandardScheme getScheme() {
        return new getTranxsWithBankCode_resultStandardScheme();
      }
    }

    private static class getTranxsWithBankCode_resultStandardScheme extends StandardScheme<getTranxsWithBankCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxsWithBankCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    vng.bankinggateway.thrift.T_TransactionReport _elem26; // required
                    _elem26 = new vng.bankinggateway.thrift.T_TransactionReport();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxsWithBankCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (vng.bankinggateway.thrift.T_TransactionReport _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxsWithBankCode_resultTupleSchemeFactory implements SchemeFactory {
      public getTranxsWithBankCode_resultTupleScheme getScheme() {
        return new getTranxsWithBankCode_resultTupleScheme();
      }
    }

    private static class getTranxsWithBankCode_resultTupleScheme extends TupleScheme<getTranxsWithBankCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxsWithBankCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (vng.bankinggateway.thrift.T_TransactionReport _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxsWithBankCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              vng.bankinggateway.thrift.T_TransactionReport _elem31; // required
              _elem31 = new vng.bankinggateway.thrift.T_TransactionReport();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTranxsWithConfirmStatusAndBankCode_args implements org.apache.thrift.TBase<getTranxsWithConfirmStatusAndBankCode_args, getTranxsWithConfirmStatusAndBankCode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxsWithConfirmStatusAndBankCode_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIRM_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmStatus", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField BANK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxsWithConfirmStatusAndBankCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxsWithConfirmStatusAndBankCode_argsTupleSchemeFactory());
    }

    public String day; // required
    public short confirmStatus; // required
    public String bankCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day"),
      CONFIRM_STATUS((short)2, "confirmStatus"),
      BANK_CODE((short)3, "bankCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          case 2: // CONFIRM_STATUS
            return CONFIRM_STATUS;
          case 3: // BANK_CODE
            return BANK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONFIRMSTATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONFIRM_STATUS, new org.apache.thrift.meta_data.FieldMetaData("confirmStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.BANK_CODE, new org.apache.thrift.meta_data.FieldMetaData("bankCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxsWithConfirmStatusAndBankCode_args.class, metaDataMap);
    }

    public getTranxsWithConfirmStatusAndBankCode_args() {
    }

    public getTranxsWithConfirmStatusAndBankCode_args(
      String day,
      short confirmStatus,
      String bankCode)
    {
      this();
      this.day = day;
      this.confirmStatus = confirmStatus;
      setConfirmStatusIsSet(true);
      this.bankCode = bankCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxsWithConfirmStatusAndBankCode_args(getTranxsWithConfirmStatusAndBankCode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDay()) {
        this.day = other.day;
      }
      this.confirmStatus = other.confirmStatus;
      if (other.isSetBankCode()) {
        this.bankCode = other.bankCode;
      }
    }

    public getTranxsWithConfirmStatusAndBankCode_args deepCopy() {
      return new getTranxsWithConfirmStatusAndBankCode_args(this);
    }

    @Override
    public void clear() {
      this.day = null;
      setConfirmStatusIsSet(false);
      this.confirmStatus = 0;
      this.bankCode = null;
    }

    public String getDay() {
      return this.day;
    }

    public getTranxsWithConfirmStatusAndBankCode_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public short getConfirmStatus() {
      return this.confirmStatus;
    }

    public getTranxsWithConfirmStatusAndBankCode_args setConfirmStatus(short confirmStatus) {
      this.confirmStatus = confirmStatus;
      setConfirmStatusIsSet(true);
      return this;
    }

    public void unsetConfirmStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMSTATUS_ISSET_ID);
    }

    /** Returns true if field confirmStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetConfirmStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __CONFIRMSTATUS_ISSET_ID);
    }

    public void setConfirmStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMSTATUS_ISSET_ID, value);
    }

    public String getBankCode() {
      return this.bankCode;
    }

    public getTranxsWithConfirmStatusAndBankCode_args setBankCode(String bankCode) {
      this.bankCode = bankCode;
      return this;
    }

    public void unsetBankCode() {
      this.bankCode = null;
    }

    /** Returns true if field bankCode is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCode() {
      return this.bankCode != null;
    }

    public void setBankCodeIsSet(boolean value) {
      if (!value) {
        this.bankCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      case CONFIRM_STATUS:
        if (value == null) {
          unsetConfirmStatus();
        } else {
          setConfirmStatus((Short)value);
        }
        break;

      case BANK_CODE:
        if (value == null) {
          unsetBankCode();
        } else {
          setBankCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      case CONFIRM_STATUS:
        return Short.valueOf(getConfirmStatus());

      case BANK_CODE:
        return getBankCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      case CONFIRM_STATUS:
        return isSetConfirmStatus();
      case BANK_CODE:
        return isSetBankCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxsWithConfirmStatusAndBankCode_args)
        return this.equals((getTranxsWithConfirmStatusAndBankCode_args)that);
      return false;
    }

    public boolean equals(getTranxsWithConfirmStatusAndBankCode_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      boolean this_present_confirmStatus = true;
      boolean that_present_confirmStatus = true;
      if (this_present_confirmStatus || that_present_confirmStatus) {
        if (!(this_present_confirmStatus && that_present_confirmStatus))
          return false;
        if (this.confirmStatus != that.confirmStatus)
          return false;
      }

      boolean this_present_bankCode = true && this.isSetBankCode();
      boolean that_present_bankCode = true && that.isSetBankCode();
      if (this_present_bankCode || that_present_bankCode) {
        if (!(this_present_bankCode && that_present_bankCode))
          return false;
        if (!this.bankCode.equals(that.bankCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxsWithConfirmStatusAndBankCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxsWithConfirmStatusAndBankCode_args typedOther = (getTranxsWithConfirmStatusAndBankCode_args)other;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, typedOther.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfirmStatus()).compareTo(typedOther.isSetConfirmStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfirmStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmStatus, typedOther.confirmStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankCode()).compareTo(typedOther.isSetBankCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCode, typedOther.bankCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxsWithConfirmStatusAndBankCode_args(");
      boolean first = true;

      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("confirmStatus:");
      sb.append(this.confirmStatus);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankCode:");
      if (this.bankCode == null) {
        sb.append("null");
      } else {
        sb.append(this.bankCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxsWithConfirmStatusAndBankCode_argsStandardSchemeFactory implements SchemeFactory {
      public getTranxsWithConfirmStatusAndBankCode_argsStandardScheme getScheme() {
        return new getTranxsWithConfirmStatusAndBankCode_argsStandardScheme();
      }
    }

    private static class getTranxsWithConfirmStatusAndBankCode_argsStandardScheme extends StandardScheme<getTranxsWithConfirmStatusAndBankCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxsWithConfirmStatusAndBankCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIRM_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.confirmStatus = iprot.readI16();
                struct.setConfirmStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BANK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankCode = iprot.readString();
                struct.setBankCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxsWithConfirmStatusAndBankCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONFIRM_STATUS_FIELD_DESC);
        oprot.writeI16(struct.confirmStatus);
        oprot.writeFieldEnd();
        if (struct.bankCode != null) {
          oprot.writeFieldBegin(BANK_CODE_FIELD_DESC);
          oprot.writeString(struct.bankCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxsWithConfirmStatusAndBankCode_argsTupleSchemeFactory implements SchemeFactory {
      public getTranxsWithConfirmStatusAndBankCode_argsTupleScheme getScheme() {
        return new getTranxsWithConfirmStatusAndBankCode_argsTupleScheme();
      }
    }

    private static class getTranxsWithConfirmStatusAndBankCode_argsTupleScheme extends TupleScheme<getTranxsWithConfirmStatusAndBankCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxsWithConfirmStatusAndBankCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        if (struct.isSetConfirmStatus()) {
          optionals.set(1);
        }
        if (struct.isSetBankCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
        if (struct.isSetConfirmStatus()) {
          oprot.writeI16(struct.confirmStatus);
        }
        if (struct.isSetBankCode()) {
          oprot.writeString(struct.bankCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxsWithConfirmStatusAndBankCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
        if (incoming.get(1)) {
          struct.confirmStatus = iprot.readI16();
          struct.setConfirmStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bankCode = iprot.readString();
          struct.setBankCodeIsSet(true);
        }
      }
    }

  }

  public static class getTranxsWithConfirmStatusAndBankCode_result implements org.apache.thrift.TBase<getTranxsWithConfirmStatusAndBankCode_result, getTranxsWithConfirmStatusAndBankCode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxsWithConfirmStatusAndBankCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxsWithConfirmStatusAndBankCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxsWithConfirmStatusAndBankCode_resultTupleSchemeFactory());
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_TransactionReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxsWithConfirmStatusAndBankCode_result.class, metaDataMap);
    }

    public getTranxsWithConfirmStatusAndBankCode_result() {
    }

    public getTranxsWithConfirmStatusAndBankCode_result(
      List<vng.bankinggateway.thrift.T_TransactionReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxsWithConfirmStatusAndBankCode_result(getTranxsWithConfirmStatusAndBankCode_result other) {
      if (other.isSetSuccess()) {
        List<vng.bankinggateway.thrift.T_TransactionReport> __this__success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>();
        for (vng.bankinggateway.thrift.T_TransactionReport other_element : other.success) {
          __this__success.add(new vng.bankinggateway.thrift.T_TransactionReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTranxsWithConfirmStatusAndBankCode_result deepCopy() {
      return new getTranxsWithConfirmStatusAndBankCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.bankinggateway.thrift.T_TransactionReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.bankinggateway.thrift.T_TransactionReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>();
      }
      this.success.add(elem);
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> getSuccess() {
      return this.success;
    }

    public getTranxsWithConfirmStatusAndBankCode_result setSuccess(List<vng.bankinggateway.thrift.T_TransactionReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.bankinggateway.thrift.T_TransactionReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxsWithConfirmStatusAndBankCode_result)
        return this.equals((getTranxsWithConfirmStatusAndBankCode_result)that);
      return false;
    }

    public boolean equals(getTranxsWithConfirmStatusAndBankCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxsWithConfirmStatusAndBankCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxsWithConfirmStatusAndBankCode_result typedOther = (getTranxsWithConfirmStatusAndBankCode_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxsWithConfirmStatusAndBankCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxsWithConfirmStatusAndBankCode_resultStandardSchemeFactory implements SchemeFactory {
      public getTranxsWithConfirmStatusAndBankCode_resultStandardScheme getScheme() {
        return new getTranxsWithConfirmStatusAndBankCode_resultStandardScheme();
      }
    }

    private static class getTranxsWithConfirmStatusAndBankCode_resultStandardScheme extends StandardScheme<getTranxsWithConfirmStatusAndBankCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxsWithConfirmStatusAndBankCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    vng.bankinggateway.thrift.T_TransactionReport _elem34; // required
                    _elem34 = new vng.bankinggateway.thrift.T_TransactionReport();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxsWithConfirmStatusAndBankCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (vng.bankinggateway.thrift.T_TransactionReport _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxsWithConfirmStatusAndBankCode_resultTupleSchemeFactory implements SchemeFactory {
      public getTranxsWithConfirmStatusAndBankCode_resultTupleScheme getScheme() {
        return new getTranxsWithConfirmStatusAndBankCode_resultTupleScheme();
      }
    }

    private static class getTranxsWithConfirmStatusAndBankCode_resultTupleScheme extends TupleScheme<getTranxsWithConfirmStatusAndBankCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxsWithConfirmStatusAndBankCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (vng.bankinggateway.thrift.T_TransactionReport _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxsWithConfirmStatusAndBankCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              vng.bankinggateway.thrift.T_TransactionReport _elem39; // required
              _elem39 = new vng.bankinggateway.thrift.T_TransactionReport();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertTask_args implements org.apache.thrift.TBase<insertTask_args, insertTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertTask_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertTask_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertTask_args.class, metaDataMap);
    }

    public insertTask_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertTask_args(insertTask_args other) {
    }

    public insertTask_args deepCopy() {
      return new insertTask_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertTask_args)
        return this.equals((insertTask_args)that);
      return false;
    }

    public boolean equals(insertTask_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertTask_args typedOther = (insertTask_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertTask_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertTask_argsStandardSchemeFactory implements SchemeFactory {
      public insertTask_argsStandardScheme getScheme() {
        return new insertTask_argsStandardScheme();
      }
    }

    private static class insertTask_argsStandardScheme extends StandardScheme<insertTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertTask_argsTupleSchemeFactory implements SchemeFactory {
      public insertTask_argsTupleScheme getScheme() {
        return new insertTask_argsTupleScheme();
      }
    }

    private static class insertTask_argsTupleScheme extends TupleScheme<insertTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class insertTask_result implements org.apache.thrift.TBase<insertTask_result, insertTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertTask_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertTask_result.class, metaDataMap);
    }

    public insertTask_result() {
    }

    public insertTask_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertTask_result(insertTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public insertTask_result deepCopy() {
      return new insertTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertTask_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertTask_result)
        return this.equals((insertTask_result)that);
      return false;
    }

    public boolean equals(insertTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertTask_result typedOther = (insertTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertTask_resultStandardSchemeFactory implements SchemeFactory {
      public insertTask_resultStandardScheme getScheme() {
        return new insertTask_resultStandardScheme();
      }
    }

    private static class insertTask_resultStandardScheme extends StandardScheme<insertTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertTask_resultTupleSchemeFactory implements SchemeFactory {
      public insertTask_resultTupleScheme getScheme() {
        return new insertTask_resultTupleScheme();
      }
    }

    private static class insertTask_resultTupleScheme extends TupleScheme<insertTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTaskEveryDay_args implements org.apache.thrift.TBase<updateTaskEveryDay_args, updateTaskEveryDay_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskEveryDay_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskEveryDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskEveryDay_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskEveryDay_args.class, metaDataMap);
    }

    public updateTaskEveryDay_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskEveryDay_args(updateTaskEveryDay_args other) {
    }

    public updateTaskEveryDay_args deepCopy() {
      return new updateTaskEveryDay_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskEveryDay_args)
        return this.equals((updateTaskEveryDay_args)that);
      return false;
    }

    public boolean equals(updateTaskEveryDay_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTaskEveryDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTaskEveryDay_args typedOther = (updateTaskEveryDay_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskEveryDay_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskEveryDay_argsStandardSchemeFactory implements SchemeFactory {
      public updateTaskEveryDay_argsStandardScheme getScheme() {
        return new updateTaskEveryDay_argsStandardScheme();
      }
    }

    private static class updateTaskEveryDay_argsStandardScheme extends StandardScheme<updateTaskEveryDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskEveryDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskEveryDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskEveryDay_argsTupleSchemeFactory implements SchemeFactory {
      public updateTaskEveryDay_argsTupleScheme getScheme() {
        return new updateTaskEveryDay_argsTupleScheme();
      }
    }

    private static class updateTaskEveryDay_argsTupleScheme extends TupleScheme<updateTaskEveryDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskEveryDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskEveryDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateTaskEveryDay_result implements org.apache.thrift.TBase<updateTaskEveryDay_result, updateTaskEveryDay_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskEveryDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskEveryDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskEveryDay_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskEveryDay_result.class, metaDataMap);
    }

    public updateTaskEveryDay_result() {
    }

    public updateTaskEveryDay_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskEveryDay_result(updateTaskEveryDay_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTaskEveryDay_result deepCopy() {
      return new updateTaskEveryDay_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateTaskEveryDay_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskEveryDay_result)
        return this.equals((updateTaskEveryDay_result)that);
      return false;
    }

    public boolean equals(updateTaskEveryDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTaskEveryDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTaskEveryDay_result typedOther = (updateTaskEveryDay_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskEveryDay_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskEveryDay_resultStandardSchemeFactory implements SchemeFactory {
      public updateTaskEveryDay_resultStandardScheme getScheme() {
        return new updateTaskEveryDay_resultStandardScheme();
      }
    }

    private static class updateTaskEveryDay_resultStandardScheme extends StandardScheme<updateTaskEveryDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskEveryDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskEveryDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskEveryDay_resultTupleSchemeFactory implements SchemeFactory {
      public updateTaskEveryDay_resultTupleScheme getScheme() {
        return new updateTaskEveryDay_resultTupleScheme();
      }
    }

    private static class updateTaskEveryDay_resultTupleScheme extends TupleScheme<updateTaskEveryDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskEveryDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskEveryDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTaskStart_args implements org.apache.thrift.TBase<updateTaskStart_args, updateTaskStart_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskStart_args");

    private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("task", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskStart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskStart_argsTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_Task task; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK((short)1, "task");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK
            return TASK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Task.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskStart_args.class, metaDataMap);
    }

    public updateTaskStart_args() {
    }

    public updateTaskStart_args(
      vng.bankinggateway.thrift.T_Task task)
    {
      this();
      this.task = task;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskStart_args(updateTaskStart_args other) {
      if (other.isSetTask()) {
        this.task = new vng.bankinggateway.thrift.T_Task(other.task);
      }
    }

    public updateTaskStart_args deepCopy() {
      return new updateTaskStart_args(this);
    }

    @Override
    public void clear() {
      this.task = null;
    }

    public vng.bankinggateway.thrift.T_Task getTask() {
      return this.task;
    }

    public updateTaskStart_args setTask(vng.bankinggateway.thrift.T_Task task) {
      this.task = task;
      return this;
    }

    public void unsetTask() {
      this.task = null;
    }

    /** Returns true if field task is set (has been assigned a value) and false otherwise */
    public boolean isSetTask() {
      return this.task != null;
    }

    public void setTaskIsSet(boolean value) {
      if (!value) {
        this.task = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK:
        if (value == null) {
          unsetTask();
        } else {
          setTask((vng.bankinggateway.thrift.T_Task)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK:
        return getTask();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK:
        return isSetTask();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskStart_args)
        return this.equals((updateTaskStart_args)that);
      return false;
    }

    public boolean equals(updateTaskStart_args that) {
      if (that == null)
        return false;

      boolean this_present_task = true && this.isSetTask();
      boolean that_present_task = true && that.isSetTask();
      if (this_present_task || that_present_task) {
        if (!(this_present_task && that_present_task))
          return false;
        if (!this.task.equals(that.task))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTaskStart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTaskStart_args typedOther = (updateTaskStart_args)other;

      lastComparison = Boolean.valueOf(isSetTask()).compareTo(typedOther.isSetTask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, typedOther.task);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskStart_args(");
      boolean first = true;

      sb.append("task:");
      if (this.task == null) {
        sb.append("null");
      } else {
        sb.append(this.task);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (task != null) {
        task.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskStart_argsStandardSchemeFactory implements SchemeFactory {
      public updateTaskStart_argsStandardScheme getScheme() {
        return new updateTaskStart_argsStandardScheme();
      }
    }

    private static class updateTaskStart_argsStandardScheme extends StandardScheme<updateTaskStart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskStart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.task = new vng.bankinggateway.thrift.T_Task();
                struct.task.read(iprot);
                struct.setTaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskStart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task != null) {
          oprot.writeFieldBegin(TASK_FIELD_DESC);
          struct.task.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskStart_argsTupleSchemeFactory implements SchemeFactory {
      public updateTaskStart_argsTupleScheme getScheme() {
        return new updateTaskStart_argsTupleScheme();
      }
    }

    private static class updateTaskStart_argsTupleScheme extends TupleScheme<updateTaskStart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskStart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTask()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask()) {
          struct.task.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskStart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task = new vng.bankinggateway.thrift.T_Task();
          struct.task.read(iprot);
          struct.setTaskIsSet(true);
        }
      }
    }

  }

  public static class updateTaskStart_result implements org.apache.thrift.TBase<updateTaskStart_result, updateTaskStart_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskStart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskStart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskStart_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskStart_result.class, metaDataMap);
    }

    public updateTaskStart_result() {
    }

    public updateTaskStart_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskStart_result(updateTaskStart_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTaskStart_result deepCopy() {
      return new updateTaskStart_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateTaskStart_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskStart_result)
        return this.equals((updateTaskStart_result)that);
      return false;
    }

    public boolean equals(updateTaskStart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTaskStart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTaskStart_result typedOther = (updateTaskStart_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskStart_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskStart_resultStandardSchemeFactory implements SchemeFactory {
      public updateTaskStart_resultStandardScheme getScheme() {
        return new updateTaskStart_resultStandardScheme();
      }
    }

    private static class updateTaskStart_resultStandardScheme extends StandardScheme<updateTaskStart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskStart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskStart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskStart_resultTupleSchemeFactory implements SchemeFactory {
      public updateTaskStart_resultTupleScheme getScheme() {
        return new updateTaskStart_resultTupleScheme();
      }
    }

    private static class updateTaskStart_resultTupleScheme extends TupleScheme<updateTaskStart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskStart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskStart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTaskStop_args implements org.apache.thrift.TBase<updateTaskStop_args, updateTaskStop_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskStop_args");

    private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("task", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskStop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskStop_argsTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_Task task; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK((short)1, "task");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK
            return TASK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Task.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskStop_args.class, metaDataMap);
    }

    public updateTaskStop_args() {
    }

    public updateTaskStop_args(
      vng.bankinggateway.thrift.T_Task task)
    {
      this();
      this.task = task;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskStop_args(updateTaskStop_args other) {
      if (other.isSetTask()) {
        this.task = new vng.bankinggateway.thrift.T_Task(other.task);
      }
    }

    public updateTaskStop_args deepCopy() {
      return new updateTaskStop_args(this);
    }

    @Override
    public void clear() {
      this.task = null;
    }

    public vng.bankinggateway.thrift.T_Task getTask() {
      return this.task;
    }

    public updateTaskStop_args setTask(vng.bankinggateway.thrift.T_Task task) {
      this.task = task;
      return this;
    }

    public void unsetTask() {
      this.task = null;
    }

    /** Returns true if field task is set (has been assigned a value) and false otherwise */
    public boolean isSetTask() {
      return this.task != null;
    }

    public void setTaskIsSet(boolean value) {
      if (!value) {
        this.task = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK:
        if (value == null) {
          unsetTask();
        } else {
          setTask((vng.bankinggateway.thrift.T_Task)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK:
        return getTask();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK:
        return isSetTask();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskStop_args)
        return this.equals((updateTaskStop_args)that);
      return false;
    }

    public boolean equals(updateTaskStop_args that) {
      if (that == null)
        return false;

      boolean this_present_task = true && this.isSetTask();
      boolean that_present_task = true && that.isSetTask();
      if (this_present_task || that_present_task) {
        if (!(this_present_task && that_present_task))
          return false;
        if (!this.task.equals(that.task))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTaskStop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTaskStop_args typedOther = (updateTaskStop_args)other;

      lastComparison = Boolean.valueOf(isSetTask()).compareTo(typedOther.isSetTask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, typedOther.task);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskStop_args(");
      boolean first = true;

      sb.append("task:");
      if (this.task == null) {
        sb.append("null");
      } else {
        sb.append(this.task);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (task != null) {
        task.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskStop_argsStandardSchemeFactory implements SchemeFactory {
      public updateTaskStop_argsStandardScheme getScheme() {
        return new updateTaskStop_argsStandardScheme();
      }
    }

    private static class updateTaskStop_argsStandardScheme extends StandardScheme<updateTaskStop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskStop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.task = new vng.bankinggateway.thrift.T_Task();
                struct.task.read(iprot);
                struct.setTaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskStop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task != null) {
          oprot.writeFieldBegin(TASK_FIELD_DESC);
          struct.task.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskStop_argsTupleSchemeFactory implements SchemeFactory {
      public updateTaskStop_argsTupleScheme getScheme() {
        return new updateTaskStop_argsTupleScheme();
      }
    }

    private static class updateTaskStop_argsTupleScheme extends TupleScheme<updateTaskStop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskStop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTask()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask()) {
          struct.task.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskStop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task = new vng.bankinggateway.thrift.T_Task();
          struct.task.read(iprot);
          struct.setTaskIsSet(true);
        }
      }
    }

  }

  public static class updateTaskStop_result implements org.apache.thrift.TBase<updateTaskStop_result, updateTaskStop_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskStop_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskStop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskStop_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskStop_result.class, metaDataMap);
    }

    public updateTaskStop_result() {
    }

    public updateTaskStop_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskStop_result(updateTaskStop_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTaskStop_result deepCopy() {
      return new updateTaskStop_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateTaskStop_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskStop_result)
        return this.equals((updateTaskStop_result)that);
      return false;
    }

    public boolean equals(updateTaskStop_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTaskStop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTaskStop_result typedOther = (updateTaskStop_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskStop_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskStop_resultStandardSchemeFactory implements SchemeFactory {
      public updateTaskStop_resultStandardScheme getScheme() {
        return new updateTaskStop_resultStandardScheme();
      }
    }

    private static class updateTaskStop_resultStandardScheme extends StandardScheme<updateTaskStop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskStop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskStop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskStop_resultTupleSchemeFactory implements SchemeFactory {
      public updateTaskStop_resultTupleScheme getScheme() {
        return new updateTaskStop_resultTupleScheme();
      }
    }

    private static class updateTaskStop_resultTupleScheme extends TupleScheme<updateTaskStop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskStop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskStop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTaskById_args implements org.apache.thrift.TBase<getTaskById_args, getTaskById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTaskById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTaskById_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskById_args.class, metaDataMap);
    }

    public getTaskById_args() {
    }

    public getTaskById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskById_args(getTaskById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getTaskById_args deepCopy() {
      return new getTaskById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public getTaskById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskById_args)
        return this.equals((getTaskById_args)that);
      return false;
    }

    public boolean equals(getTaskById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTaskById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTaskById_args typedOther = (getTaskById_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTaskById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskById_argsStandardSchemeFactory implements SchemeFactory {
      public getTaskById_argsStandardScheme getScheme() {
        return new getTaskById_argsStandardScheme();
      }
    }

    private static class getTaskById_argsStandardScheme extends StandardScheme<getTaskById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskById_argsTupleSchemeFactory implements SchemeFactory {
      public getTaskById_argsTupleScheme getScheme() {
        return new getTaskById_argsTupleScheme();
      }
    }

    private static class getTaskById_argsTupleScheme extends TupleScheme<getTaskById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getTaskById_result implements org.apache.thrift.TBase<getTaskById_result, getTaskById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTaskById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTaskById_resultTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_Task success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Task.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskById_result.class, metaDataMap);
    }

    public getTaskById_result() {
    }

    public getTaskById_result(
      vng.bankinggateway.thrift.T_Task success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskById_result(getTaskById_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.bankinggateway.thrift.T_Task(other.success);
      }
    }

    public getTaskById_result deepCopy() {
      return new getTaskById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.bankinggateway.thrift.T_Task getSuccess() {
      return this.success;
    }

    public getTaskById_result setSuccess(vng.bankinggateway.thrift.T_Task success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.bankinggateway.thrift.T_Task)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskById_result)
        return this.equals((getTaskById_result)that);
      return false;
    }

    public boolean equals(getTaskById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTaskById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTaskById_result typedOther = (getTaskById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTaskById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskById_resultStandardSchemeFactory implements SchemeFactory {
      public getTaskById_resultStandardScheme getScheme() {
        return new getTaskById_resultStandardScheme();
      }
    }

    private static class getTaskById_resultStandardScheme extends StandardScheme<getTaskById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new vng.bankinggateway.thrift.T_Task();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskById_resultTupleSchemeFactory implements SchemeFactory {
      public getTaskById_resultTupleScheme getScheme() {
        return new getTaskById_resultTupleScheme();
      }
    }

    private static class getTaskById_resultTupleScheme extends TupleScheme<getTaskById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new vng.bankinggateway.thrift.T_Task();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTaskByTaskId_args implements org.apache.thrift.TBase<getTaskByTaskId_args, getTaskByTaskId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskByTaskId_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTaskByTaskId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTaskByTaskId_argsTupleSchemeFactory());
    }

    public String taskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskByTaskId_args.class, metaDataMap);
    }

    public getTaskByTaskId_args() {
    }

    public getTaskByTaskId_args(
      String taskId)
    {
      this();
      this.taskId = taskId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskByTaskId_args(getTaskByTaskId_args other) {
      if (other.isSetTaskId()) {
        this.taskId = other.taskId;
      }
    }

    public getTaskByTaskId_args deepCopy() {
      return new getTaskByTaskId_args(this);
    }

    @Override
    public void clear() {
      this.taskId = null;
    }

    public String getTaskId() {
      return this.taskId;
    }

    public getTaskByTaskId_args setTaskId(String taskId) {
      this.taskId = taskId;
      return this;
    }

    public void unsetTaskId() {
      this.taskId = null;
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return this.taskId != null;
    }

    public void setTaskIdIsSet(boolean value) {
      if (!value) {
        this.taskId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskByTaskId_args)
        return this.equals((getTaskByTaskId_args)that);
      return false;
    }

    public boolean equals(getTaskByTaskId_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true && this.isSetTaskId();
      boolean that_present_taskId = true && that.isSetTaskId();
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (!this.taskId.equals(that.taskId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTaskByTaskId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTaskByTaskId_args typedOther = (getTaskByTaskId_args)other;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(typedOther.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, typedOther.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTaskByTaskId_args(");
      boolean first = true;

      sb.append("taskId:");
      if (this.taskId == null) {
        sb.append("null");
      } else {
        sb.append(this.taskId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskByTaskId_argsStandardSchemeFactory implements SchemeFactory {
      public getTaskByTaskId_argsStandardScheme getScheme() {
        return new getTaskByTaskId_argsStandardScheme();
      }
    }

    private static class getTaskByTaskId_argsStandardScheme extends StandardScheme<getTaskByTaskId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskByTaskId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.taskId = iprot.readString();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskByTaskId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskId != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.taskId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskByTaskId_argsTupleSchemeFactory implements SchemeFactory {
      public getTaskByTaskId_argsTupleScheme getScheme() {
        return new getTaskByTaskId_argsTupleScheme();
      }
    }

    private static class getTaskByTaskId_argsTupleScheme extends TupleScheme<getTaskByTaskId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTaskId()) {
          oprot.writeString(struct.taskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.taskId = iprot.readString();
          struct.setTaskIdIsSet(true);
        }
      }
    }

  }

  public static class getTaskByTaskId_result implements org.apache.thrift.TBase<getTaskByTaskId_result, getTaskByTaskId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskByTaskId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTaskByTaskId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTaskByTaskId_resultTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_Task success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Task.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskByTaskId_result.class, metaDataMap);
    }

    public getTaskByTaskId_result() {
    }

    public getTaskByTaskId_result(
      vng.bankinggateway.thrift.T_Task success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskByTaskId_result(getTaskByTaskId_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.bankinggateway.thrift.T_Task(other.success);
      }
    }

    public getTaskByTaskId_result deepCopy() {
      return new getTaskByTaskId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.bankinggateway.thrift.T_Task getSuccess() {
      return this.success;
    }

    public getTaskByTaskId_result setSuccess(vng.bankinggateway.thrift.T_Task success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.bankinggateway.thrift.T_Task)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskByTaskId_result)
        return this.equals((getTaskByTaskId_result)that);
      return false;
    }

    public boolean equals(getTaskByTaskId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTaskByTaskId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTaskByTaskId_result typedOther = (getTaskByTaskId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTaskByTaskId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskByTaskId_resultStandardSchemeFactory implements SchemeFactory {
      public getTaskByTaskId_resultStandardScheme getScheme() {
        return new getTaskByTaskId_resultStandardScheme();
      }
    }

    private static class getTaskByTaskId_resultStandardScheme extends StandardScheme<getTaskByTaskId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskByTaskId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new vng.bankinggateway.thrift.T_Task();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskByTaskId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskByTaskId_resultTupleSchemeFactory implements SchemeFactory {
      public getTaskByTaskId_resultTupleScheme getScheme() {
        return new getTaskByTaskId_resultTupleScheme();
      }
    }

    private static class getTaskByTaskId_resultTupleScheme extends TupleScheme<getTaskByTaskId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new vng.bankinggateway.thrift.T_Task();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteTaskByTaskId_args implements org.apache.thrift.TBase<deleteTaskByTaskId_args, deleteTaskByTaskId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTaskByTaskId_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTaskByTaskId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTaskByTaskId_argsTupleSchemeFactory());
    }

    public String taskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTaskByTaskId_args.class, metaDataMap);
    }

    public deleteTaskByTaskId_args() {
    }

    public deleteTaskByTaskId_args(
      String taskId)
    {
      this();
      this.taskId = taskId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTaskByTaskId_args(deleteTaskByTaskId_args other) {
      if (other.isSetTaskId()) {
        this.taskId = other.taskId;
      }
    }

    public deleteTaskByTaskId_args deepCopy() {
      return new deleteTaskByTaskId_args(this);
    }

    @Override
    public void clear() {
      this.taskId = null;
    }

    public String getTaskId() {
      return this.taskId;
    }

    public deleteTaskByTaskId_args setTaskId(String taskId) {
      this.taskId = taskId;
      return this;
    }

    public void unsetTaskId() {
      this.taskId = null;
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return this.taskId != null;
    }

    public void setTaskIdIsSet(boolean value) {
      if (!value) {
        this.taskId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTaskByTaskId_args)
        return this.equals((deleteTaskByTaskId_args)that);
      return false;
    }

    public boolean equals(deleteTaskByTaskId_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true && this.isSetTaskId();
      boolean that_present_taskId = true && that.isSetTaskId();
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (!this.taskId.equals(that.taskId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteTaskByTaskId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteTaskByTaskId_args typedOther = (deleteTaskByTaskId_args)other;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(typedOther.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, typedOther.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTaskByTaskId_args(");
      boolean first = true;

      sb.append("taskId:");
      if (this.taskId == null) {
        sb.append("null");
      } else {
        sb.append(this.taskId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTaskByTaskId_argsStandardSchemeFactory implements SchemeFactory {
      public deleteTaskByTaskId_argsStandardScheme getScheme() {
        return new deleteTaskByTaskId_argsStandardScheme();
      }
    }

    private static class deleteTaskByTaskId_argsStandardScheme extends StandardScheme<deleteTaskByTaskId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTaskByTaskId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.taskId = iprot.readString();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTaskByTaskId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskId != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.taskId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTaskByTaskId_argsTupleSchemeFactory implements SchemeFactory {
      public deleteTaskByTaskId_argsTupleScheme getScheme() {
        return new deleteTaskByTaskId_argsTupleScheme();
      }
    }

    private static class deleteTaskByTaskId_argsTupleScheme extends TupleScheme<deleteTaskByTaskId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTaskByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTaskId()) {
          oprot.writeString(struct.taskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTaskByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.taskId = iprot.readString();
          struct.setTaskIdIsSet(true);
        }
      }
    }

  }

  public static class deleteTaskByTaskId_result implements org.apache.thrift.TBase<deleteTaskByTaskId_result, deleteTaskByTaskId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTaskByTaskId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTaskByTaskId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTaskByTaskId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTaskByTaskId_result.class, metaDataMap);
    }

    public deleteTaskByTaskId_result() {
    }

    public deleteTaskByTaskId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTaskByTaskId_result(deleteTaskByTaskId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteTaskByTaskId_result deepCopy() {
      return new deleteTaskByTaskId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteTaskByTaskId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTaskByTaskId_result)
        return this.equals((deleteTaskByTaskId_result)that);
      return false;
    }

    public boolean equals(deleteTaskByTaskId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteTaskByTaskId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteTaskByTaskId_result typedOther = (deleteTaskByTaskId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTaskByTaskId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTaskByTaskId_resultStandardSchemeFactory implements SchemeFactory {
      public deleteTaskByTaskId_resultStandardScheme getScheme() {
        return new deleteTaskByTaskId_resultStandardScheme();
      }
    }

    private static class deleteTaskByTaskId_resultStandardScheme extends StandardScheme<deleteTaskByTaskId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTaskByTaskId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTaskByTaskId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTaskByTaskId_resultTupleSchemeFactory implements SchemeFactory {
      public deleteTaskByTaskId_resultTupleScheme getScheme() {
        return new deleteTaskByTaskId_resultTupleScheme();
      }
    }

    private static class deleteTaskByTaskId_resultTupleScheme extends TupleScheme<deleteTaskByTaskId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTaskByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTaskByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getListTaskByStatus_args implements org.apache.thrift.TBase<getListTaskByStatus_args, getListTaskByStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListTaskByStatus_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I16, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListTaskByStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListTaskByStatus_argsTupleSchemeFactory());
    }

    public short status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListTaskByStatus_args.class, metaDataMap);
    }

    public getListTaskByStatus_args() {
    }

    public getListTaskByStatus_args(
      short status)
    {
      this();
      this.status = status;
      setStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListTaskByStatus_args(getListTaskByStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.status = other.status;
    }

    public getListTaskByStatus_args deepCopy() {
      return new getListTaskByStatus_args(this);
    }

    @Override
    public void clear() {
      setStatusIsSet(false);
      this.status = 0;
    }

    public short getStatus() {
      return this.status;
    }

    public getListTaskByStatus_args setStatus(short status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return Short.valueOf(getStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListTaskByStatus_args)
        return this.equals((getListTaskByStatus_args)that);
      return false;
    }

    public boolean equals(getListTaskByStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListTaskByStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListTaskByStatus_args typedOther = (getListTaskByStatus_args)other;

      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListTaskByStatus_args(");
      boolean first = true;

      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListTaskByStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getListTaskByStatus_argsStandardScheme getScheme() {
        return new getListTaskByStatus_argsStandardScheme();
      }
    }

    private static class getListTaskByStatus_argsStandardScheme extends StandardScheme<getListTaskByStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListTaskByStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.status = iprot.readI16();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListTaskByStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI16(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListTaskByStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getListTaskByStatus_argsTupleScheme getScheme() {
        return new getListTaskByStatus_argsTupleScheme();
      }
    }

    private static class getListTaskByStatus_argsTupleScheme extends TupleScheme<getListTaskByStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListTaskByStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatus()) {
          oprot.writeI16(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListTaskByStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.status = iprot.readI16();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class getListTaskByStatus_result implements org.apache.thrift.TBase<getListTaskByStatus_result, getListTaskByStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListTaskByStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListTaskByStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListTaskByStatus_resultTupleSchemeFactory());
    }

    public List<vng.bankinggateway.thrift.T_Task> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Task.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListTaskByStatus_result.class, metaDataMap);
    }

    public getListTaskByStatus_result() {
    }

    public getListTaskByStatus_result(
      List<vng.bankinggateway.thrift.T_Task> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListTaskByStatus_result(getListTaskByStatus_result other) {
      if (other.isSetSuccess()) {
        List<vng.bankinggateway.thrift.T_Task> __this__success = new ArrayList<vng.bankinggateway.thrift.T_Task>();
        for (vng.bankinggateway.thrift.T_Task other_element : other.success) {
          __this__success.add(new vng.bankinggateway.thrift.T_Task(other_element));
        }
        this.success = __this__success;
      }
    }

    public getListTaskByStatus_result deepCopy() {
      return new getListTaskByStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.bankinggateway.thrift.T_Task> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.bankinggateway.thrift.T_Task elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.bankinggateway.thrift.T_Task>();
      }
      this.success.add(elem);
    }

    public List<vng.bankinggateway.thrift.T_Task> getSuccess() {
      return this.success;
    }

    public getListTaskByStatus_result setSuccess(List<vng.bankinggateway.thrift.T_Task> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.bankinggateway.thrift.T_Task>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListTaskByStatus_result)
        return this.equals((getListTaskByStatus_result)that);
      return false;
    }

    public boolean equals(getListTaskByStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListTaskByStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListTaskByStatus_result typedOther = (getListTaskByStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListTaskByStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListTaskByStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getListTaskByStatus_resultStandardScheme getScheme() {
        return new getListTaskByStatus_resultStandardScheme();
      }
    }

    private static class getListTaskByStatus_resultStandardScheme extends StandardScheme<getListTaskByStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListTaskByStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<vng.bankinggateway.thrift.T_Task>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    vng.bankinggateway.thrift.T_Task _elem42; // required
                    _elem42 = new vng.bankinggateway.thrift.T_Task();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListTaskByStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (vng.bankinggateway.thrift.T_Task _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListTaskByStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getListTaskByStatus_resultTupleScheme getScheme() {
        return new getListTaskByStatus_resultTupleScheme();
      }
    }

    private static class getListTaskByStatus_resultTupleScheme extends TupleScheme<getListTaskByStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListTaskByStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (vng.bankinggateway.thrift.T_Task _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListTaskByStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<vng.bankinggateway.thrift.T_Task>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              vng.bankinggateway.thrift.T_Task _elem47; // required
              _elem47 = new vng.bankinggateway.thrift.T_Task();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getListTaskByStartDate_args implements org.apache.thrift.TBase<getListTaskByStartDate_args, getListTaskByStartDate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListTaskByStartDate_args");

    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListTaskByStartDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListTaskByStartDate_argsTupleSchemeFactory());
    }

    public String startDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_DATE((short)1, "startDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_DATE
            return START_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListTaskByStartDate_args.class, metaDataMap);
    }

    public getListTaskByStartDate_args() {
    }

    public getListTaskByStartDate_args(
      String startDate)
    {
      this();
      this.startDate = startDate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListTaskByStartDate_args(getListTaskByStartDate_args other) {
      if (other.isSetStartDate()) {
        this.startDate = other.startDate;
      }
    }

    public getListTaskByStartDate_args deepCopy() {
      return new getListTaskByStartDate_args(this);
    }

    @Override
    public void clear() {
      this.startDate = null;
    }

    public String getStartDate() {
      return this.startDate;
    }

    public getListTaskByStartDate_args setStartDate(String startDate) {
      this.startDate = startDate;
      return this;
    }

    public void unsetStartDate() {
      this.startDate = null;
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDate() {
      return this.startDate != null;
    }

    public void setStartDateIsSet(boolean value) {
      if (!value) {
        this.startDate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_DATE:
        if (value == null) {
          unsetStartDate();
        } else {
          setStartDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_DATE:
        return getStartDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_DATE:
        return isSetStartDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListTaskByStartDate_args)
        return this.equals((getListTaskByStartDate_args)that);
      return false;
    }

    public boolean equals(getListTaskByStartDate_args that) {
      if (that == null)
        return false;

      boolean this_present_startDate = true && this.isSetStartDate();
      boolean that_present_startDate = true && that.isSetStartDate();
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (!this.startDate.equals(that.startDate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListTaskByStartDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListTaskByStartDate_args typedOther = (getListTaskByStartDate_args)other;

      lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(typedOther.isSetStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, typedOther.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListTaskByStartDate_args(");
      boolean first = true;

      sb.append("startDate:");
      if (this.startDate == null) {
        sb.append("null");
      } else {
        sb.append(this.startDate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListTaskByStartDate_argsStandardSchemeFactory implements SchemeFactory {
      public getListTaskByStartDate_argsStandardScheme getScheme() {
        return new getListTaskByStartDate_argsStandardScheme();
      }
    }

    private static class getListTaskByStartDate_argsStandardScheme extends StandardScheme<getListTaskByStartDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListTaskByStartDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startDate = iprot.readString();
                struct.setStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListTaskByStartDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startDate != null) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.startDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListTaskByStartDate_argsTupleSchemeFactory implements SchemeFactory {
      public getListTaskByStartDate_argsTupleScheme getScheme() {
        return new getListTaskByStartDate_argsTupleScheme();
      }
    }

    private static class getListTaskByStartDate_argsTupleScheme extends TupleScheme<getListTaskByStartDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListTaskByStartDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartDate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStartDate()) {
          oprot.writeString(struct.startDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListTaskByStartDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.startDate = iprot.readString();
          struct.setStartDateIsSet(true);
        }
      }
    }

  }

  public static class getListTaskByStartDate_result implements org.apache.thrift.TBase<getListTaskByStartDate_result, getListTaskByStartDate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListTaskByStartDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListTaskByStartDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListTaskByStartDate_resultTupleSchemeFactory());
    }

    public List<vng.bankinggateway.thrift.T_Task> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Task.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListTaskByStartDate_result.class, metaDataMap);
    }

    public getListTaskByStartDate_result() {
    }

    public getListTaskByStartDate_result(
      List<vng.bankinggateway.thrift.T_Task> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListTaskByStartDate_result(getListTaskByStartDate_result other) {
      if (other.isSetSuccess()) {
        List<vng.bankinggateway.thrift.T_Task> __this__success = new ArrayList<vng.bankinggateway.thrift.T_Task>();
        for (vng.bankinggateway.thrift.T_Task other_element : other.success) {
          __this__success.add(new vng.bankinggateway.thrift.T_Task(other_element));
        }
        this.success = __this__success;
      }
    }

    public getListTaskByStartDate_result deepCopy() {
      return new getListTaskByStartDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.bankinggateway.thrift.T_Task> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.bankinggateway.thrift.T_Task elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.bankinggateway.thrift.T_Task>();
      }
      this.success.add(elem);
    }

    public List<vng.bankinggateway.thrift.T_Task> getSuccess() {
      return this.success;
    }

    public getListTaskByStartDate_result setSuccess(List<vng.bankinggateway.thrift.T_Task> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.bankinggateway.thrift.T_Task>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListTaskByStartDate_result)
        return this.equals((getListTaskByStartDate_result)that);
      return false;
    }

    public boolean equals(getListTaskByStartDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListTaskByStartDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListTaskByStartDate_result typedOther = (getListTaskByStartDate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListTaskByStartDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListTaskByStartDate_resultStandardSchemeFactory implements SchemeFactory {
      public getListTaskByStartDate_resultStandardScheme getScheme() {
        return new getListTaskByStartDate_resultStandardScheme();
      }
    }

    private static class getListTaskByStartDate_resultStandardScheme extends StandardScheme<getListTaskByStartDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListTaskByStartDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<vng.bankinggateway.thrift.T_Task>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    vng.bankinggateway.thrift.T_Task _elem50; // required
                    _elem50 = new vng.bankinggateway.thrift.T_Task();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListTaskByStartDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (vng.bankinggateway.thrift.T_Task _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListTaskByStartDate_resultTupleSchemeFactory implements SchemeFactory {
      public getListTaskByStartDate_resultTupleScheme getScheme() {
        return new getListTaskByStartDate_resultTupleScheme();
      }
    }

    private static class getListTaskByStartDate_resultTupleScheme extends TupleScheme<getListTaskByStartDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListTaskByStartDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (vng.bankinggateway.thrift.T_Task _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListTaskByStartDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<vng.bankinggateway.thrift.T_Task>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              vng.bankinggateway.thrift.T_Task _elem55; // required
              _elem55 = new vng.bankinggateway.thrift.T_Task();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getListTaskToday_args implements org.apache.thrift.TBase<getListTaskToday_args, getListTaskToday_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListTaskToday_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListTaskToday_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListTaskToday_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListTaskToday_args.class, metaDataMap);
    }

    public getListTaskToday_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListTaskToday_args(getListTaskToday_args other) {
    }

    public getListTaskToday_args deepCopy() {
      return new getListTaskToday_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListTaskToday_args)
        return this.equals((getListTaskToday_args)that);
      return false;
    }

    public boolean equals(getListTaskToday_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListTaskToday_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListTaskToday_args typedOther = (getListTaskToday_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListTaskToday_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListTaskToday_argsStandardSchemeFactory implements SchemeFactory {
      public getListTaskToday_argsStandardScheme getScheme() {
        return new getListTaskToday_argsStandardScheme();
      }
    }

    private static class getListTaskToday_argsStandardScheme extends StandardScheme<getListTaskToday_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListTaskToday_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListTaskToday_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListTaskToday_argsTupleSchemeFactory implements SchemeFactory {
      public getListTaskToday_argsTupleScheme getScheme() {
        return new getListTaskToday_argsTupleScheme();
      }
    }

    private static class getListTaskToday_argsTupleScheme extends TupleScheme<getListTaskToday_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListTaskToday_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListTaskToday_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getListTaskToday_result implements org.apache.thrift.TBase<getListTaskToday_result, getListTaskToday_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListTaskToday_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListTaskToday_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListTaskToday_resultTupleSchemeFactory());
    }

    public List<vng.bankinggateway.thrift.T_Task> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Task.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListTaskToday_result.class, metaDataMap);
    }

    public getListTaskToday_result() {
    }

    public getListTaskToday_result(
      List<vng.bankinggateway.thrift.T_Task> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListTaskToday_result(getListTaskToday_result other) {
      if (other.isSetSuccess()) {
        List<vng.bankinggateway.thrift.T_Task> __this__success = new ArrayList<vng.bankinggateway.thrift.T_Task>();
        for (vng.bankinggateway.thrift.T_Task other_element : other.success) {
          __this__success.add(new vng.bankinggateway.thrift.T_Task(other_element));
        }
        this.success = __this__success;
      }
    }

    public getListTaskToday_result deepCopy() {
      return new getListTaskToday_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.bankinggateway.thrift.T_Task> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.bankinggateway.thrift.T_Task elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.bankinggateway.thrift.T_Task>();
      }
      this.success.add(elem);
    }

    public List<vng.bankinggateway.thrift.T_Task> getSuccess() {
      return this.success;
    }

    public getListTaskToday_result setSuccess(List<vng.bankinggateway.thrift.T_Task> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.bankinggateway.thrift.T_Task>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListTaskToday_result)
        return this.equals((getListTaskToday_result)that);
      return false;
    }

    public boolean equals(getListTaskToday_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListTaskToday_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListTaskToday_result typedOther = (getListTaskToday_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListTaskToday_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListTaskToday_resultStandardSchemeFactory implements SchemeFactory {
      public getListTaskToday_resultStandardScheme getScheme() {
        return new getListTaskToday_resultStandardScheme();
      }
    }

    private static class getListTaskToday_resultStandardScheme extends StandardScheme<getListTaskToday_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListTaskToday_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<vng.bankinggateway.thrift.T_Task>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    vng.bankinggateway.thrift.T_Task _elem58; // required
                    _elem58 = new vng.bankinggateway.thrift.T_Task();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListTaskToday_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (vng.bankinggateway.thrift.T_Task _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListTaskToday_resultTupleSchemeFactory implements SchemeFactory {
      public getListTaskToday_resultTupleScheme getScheme() {
        return new getListTaskToday_resultTupleScheme();
      }
    }

    private static class getListTaskToday_resultTupleScheme extends TupleScheme<getListTaskToday_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListTaskToday_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (vng.bankinggateway.thrift.T_Task _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListTaskToday_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<vng.bankinggateway.thrift.T_Task>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              vng.bankinggateway.thrift.T_Task _elem63; // required
              _elem63 = new vng.bankinggateway.thrift.T_Task();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
