/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vng.bankinggateway.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class T_TranStat implements org.apache.thrift.TBase<T_TranStat, T_TranStat._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("T_TranStat");

  private static final org.apache.thrift.protocol.TField TX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TX_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("txStatus", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField RESPONSE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new T_TranStatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new T_TranStatTupleSchemeFactory());
  }

  public int txID; // required
  public String time; // required
  public short txStatus; // required
  public String responseCode; // required
  public String message; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TX_ID((short)1, "txID"),
    TIME((short)2, "time"),
    TX_STATUS((short)3, "txStatus"),
    RESPONSE_CODE((short)4, "responseCode"),
    MESSAGE((short)5, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TX_ID
          return TX_ID;
        case 2: // TIME
          return TIME;
        case 3: // TX_STATUS
          return TX_STATUS;
        case 4: // RESPONSE_CODE
          return RESPONSE_CODE;
        case 5: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TXID_ISSET_ID = 0;
  private static final int __TXSTATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TX_ID, new org.apache.thrift.meta_data.FieldMetaData("txID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TX_STATUS, new org.apache.thrift.meta_data.FieldMetaData("txStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RESPONSE_CODE, new org.apache.thrift.meta_data.FieldMetaData("responseCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(T_TranStat.class, metaDataMap);
  }

  public T_TranStat() {
  }

  public T_TranStat(
    int txID,
    String time,
    short txStatus,
    String responseCode,
    String message)
  {
    this();
    this.txID = txID;
    setTxIDIsSet(true);
    this.time = time;
    this.txStatus = txStatus;
    setTxStatusIsSet(true);
    this.responseCode = responseCode;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public T_TranStat(T_TranStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.txID = other.txID;
    if (other.isSetTime()) {
      this.time = other.time;
    }
    this.txStatus = other.txStatus;
    if (other.isSetResponseCode()) {
      this.responseCode = other.responseCode;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public T_TranStat deepCopy() {
    return new T_TranStat(this);
  }

  @Override
  public void clear() {
    setTxIDIsSet(false);
    this.txID = 0;
    this.time = null;
    setTxStatusIsSet(false);
    this.txStatus = 0;
    this.responseCode = null;
    this.message = null;
  }

  public int getTxID() {
    return this.txID;
  }

  public T_TranStat setTxID(int txID) {
    this.txID = txID;
    setTxIDIsSet(true);
    return this;
  }

  public void unsetTxID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXID_ISSET_ID);
  }

  /** Returns true if field txID is set (has been assigned a value) and false otherwise */
  public boolean isSetTxID() {
    return EncodingUtils.testBit(__isset_bitfield, __TXID_ISSET_ID);
  }

  public void setTxIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXID_ISSET_ID, value);
  }

  public String getTime() {
    return this.time;
  }

  public T_TranStat setTime(String time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  public short getTxStatus() {
    return this.txStatus;
  }

  public T_TranStat setTxStatus(short txStatus) {
    this.txStatus = txStatus;
    setTxStatusIsSet(true);
    return this;
  }

  public void unsetTxStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXSTATUS_ISSET_ID);
  }

  /** Returns true if field txStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTxStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __TXSTATUS_ISSET_ID);
  }

  public void setTxStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXSTATUS_ISSET_ID, value);
  }

  public String getResponseCode() {
    return this.responseCode;
  }

  public T_TranStat setResponseCode(String responseCode) {
    this.responseCode = responseCode;
    return this;
  }

  public void unsetResponseCode() {
    this.responseCode = null;
  }

  /** Returns true if field responseCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseCode() {
    return this.responseCode != null;
  }

  public void setResponseCodeIsSet(boolean value) {
    if (!value) {
      this.responseCode = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public T_TranStat setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TX_ID:
      if (value == null) {
        unsetTxID();
      } else {
        setTxID((Integer)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((String)value);
      }
      break;

    case TX_STATUS:
      if (value == null) {
        unsetTxStatus();
      } else {
        setTxStatus((Short)value);
      }
      break;

    case RESPONSE_CODE:
      if (value == null) {
        unsetResponseCode();
      } else {
        setResponseCode((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TX_ID:
      return Integer.valueOf(getTxID());

    case TIME:
      return getTime();

    case TX_STATUS:
      return Short.valueOf(getTxStatus());

    case RESPONSE_CODE:
      return getResponseCode();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TX_ID:
      return isSetTxID();
    case TIME:
      return isSetTime();
    case TX_STATUS:
      return isSetTxStatus();
    case RESPONSE_CODE:
      return isSetResponseCode();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof T_TranStat)
      return this.equals((T_TranStat)that);
    return false;
  }

  public boolean equals(T_TranStat that) {
    if (that == null)
      return false;

    boolean this_present_txID = true;
    boolean that_present_txID = true;
    if (this_present_txID || that_present_txID) {
      if (!(this_present_txID && that_present_txID))
        return false;
      if (this.txID != that.txID)
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_txStatus = true;
    boolean that_present_txStatus = true;
    if (this_present_txStatus || that_present_txStatus) {
      if (!(this_present_txStatus && that_present_txStatus))
        return false;
      if (this.txStatus != that.txStatus)
        return false;
    }

    boolean this_present_responseCode = true && this.isSetResponseCode();
    boolean that_present_responseCode = true && that.isSetResponseCode();
    if (this_present_responseCode || that_present_responseCode) {
      if (!(this_present_responseCode && that_present_responseCode))
        return false;
      if (!this.responseCode.equals(that.responseCode))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(T_TranStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    T_TranStat typedOther = (T_TranStat)other;

    lastComparison = Boolean.valueOf(isSetTxID()).compareTo(typedOther.isSetTxID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txID, typedOther.txID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxStatus()).compareTo(typedOther.isSetTxStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txStatus, typedOther.txStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseCode()).compareTo(typedOther.isSetResponseCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseCode, typedOther.responseCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("T_TranStat(");
    boolean first = true;

    sb.append("txID:");
    sb.append(this.txID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    if (this.time == null) {
      sb.append("null");
    } else {
      sb.append(this.time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("txStatus:");
    sb.append(this.txStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseCode:");
    if (this.responseCode == null) {
      sb.append("null");
    } else {
      sb.append(this.responseCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class T_TranStatStandardSchemeFactory implements SchemeFactory {
    public T_TranStatStandardScheme getScheme() {
      return new T_TranStatStandardScheme();
    }
  }

  private static class T_TranStatStandardScheme extends StandardScheme<T_TranStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, T_TranStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.txID = iprot.readI32();
              struct.setTxIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TX_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.txStatus = iprot.readI16();
              struct.setTxStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESPONSE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.responseCode = iprot.readString();
              struct.setResponseCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, T_TranStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TX_ID_FIELD_DESC);
      oprot.writeI32(struct.txID);
      oprot.writeFieldEnd();
      if (struct.time != null) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeString(struct.time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TX_STATUS_FIELD_DESC);
      oprot.writeI16(struct.txStatus);
      oprot.writeFieldEnd();
      if (struct.responseCode != null) {
        oprot.writeFieldBegin(RESPONSE_CODE_FIELD_DESC);
        oprot.writeString(struct.responseCode);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class T_TranStatTupleSchemeFactory implements SchemeFactory {
    public T_TranStatTupleScheme getScheme() {
      return new T_TranStatTupleScheme();
    }
  }

  private static class T_TranStatTupleScheme extends TupleScheme<T_TranStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, T_TranStat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTxID()) {
        optionals.set(0);
      }
      if (struct.isSetTime()) {
        optionals.set(1);
      }
      if (struct.isSetTxStatus()) {
        optionals.set(2);
      }
      if (struct.isSetResponseCode()) {
        optionals.set(3);
      }
      if (struct.isSetMessage()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTxID()) {
        oprot.writeI32(struct.txID);
      }
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
      if (struct.isSetTxStatus()) {
        oprot.writeI16(struct.txStatus);
      }
      if (struct.isSetResponseCode()) {
        oprot.writeString(struct.responseCode);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, T_TranStat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.txID = iprot.readI32();
        struct.setTxIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.txStatus = iprot.readI16();
        struct.setTxStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.responseCode = iprot.readString();
        struct.setResponseCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
    }
  }

}

