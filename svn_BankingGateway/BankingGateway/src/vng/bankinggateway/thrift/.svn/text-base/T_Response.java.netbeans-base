/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vng.bankinggateway.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class T_Response implements org.apache.thrift.TBase<T_Response, T_Response._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("T_Response");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REDIRECT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("redirectURL", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionID", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new T_ResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new T_ResponseTupleSchemeFactory());
  }

  public int code; // required
  public String redirectURL; // required
  public String refID; // required
  public String transactionID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE((short)1, "code"),
    REDIRECT_URL((short)2, "redirectURL"),
    REF_ID((short)3, "refID"),
    TRANSACTION_ID((short)4, "transactionID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // REDIRECT_URL
          return REDIRECT_URL;
        case 3: // REF_ID
          return REF_ID;
        case 4: // TRANSACTION_ID
          return TRANSACTION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REDIRECT_URL, new org.apache.thrift.meta_data.FieldMetaData("redirectURL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transactionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(T_Response.class, metaDataMap);
  }

  public T_Response() {
  }

  public T_Response(
    int code,
    String redirectURL,
    String refID,
    String transactionID)
  {
    this();
    this.code = code;
    setCodeIsSet(true);
    this.redirectURL = redirectURL;
    this.refID = refID;
    this.transactionID = transactionID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public T_Response(T_Response other) {
    __isset_bitfield = other.__isset_bitfield;
    this.code = other.code;
    if (other.isSetRedirectURL()) {
      this.redirectURL = other.redirectURL;
    }
    if (other.isSetRefID()) {
      this.refID = other.refID;
    }
    if (other.isSetTransactionID()) {
      this.transactionID = other.transactionID;
    }
  }

  public T_Response deepCopy() {
    return new T_Response(this);
  }

  @Override
  public void clear() {
    setCodeIsSet(false);
    this.code = 0;
    this.redirectURL = null;
    this.refID = null;
    this.transactionID = null;
  }

  public int getCode() {
    return this.code;
  }

  public T_Response setCode(int code) {
    this.code = code;
    setCodeIsSet(true);
    return this;
  }

  public void unsetCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  public void setCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
  }

  public String getRedirectURL() {
    return this.redirectURL;
  }

  public T_Response setRedirectURL(String redirectURL) {
    this.redirectURL = redirectURL;
    return this;
  }

  public void unsetRedirectURL() {
    this.redirectURL = null;
  }

  /** Returns true if field redirectURL is set (has been assigned a value) and false otherwise */
  public boolean isSetRedirectURL() {
    return this.redirectURL != null;
  }

  public void setRedirectURLIsSet(boolean value) {
    if (!value) {
      this.redirectURL = null;
    }
  }

  public String getRefID() {
    return this.refID;
  }

  public T_Response setRefID(String refID) {
    this.refID = refID;
    return this;
  }

  public void unsetRefID() {
    this.refID = null;
  }

  /** Returns true if field refID is set (has been assigned a value) and false otherwise */
  public boolean isSetRefID() {
    return this.refID != null;
  }

  public void setRefIDIsSet(boolean value) {
    if (!value) {
      this.refID = null;
    }
  }

  public String getTransactionID() {
    return this.transactionID;
  }

  public T_Response setTransactionID(String transactionID) {
    this.transactionID = transactionID;
    return this;
  }

  public void unsetTransactionID() {
    this.transactionID = null;
  }

  /** Returns true if field transactionID is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionID() {
    return this.transactionID != null;
  }

  public void setTransactionIDIsSet(boolean value) {
    if (!value) {
      this.transactionID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((Integer)value);
      }
      break;

    case REDIRECT_URL:
      if (value == null) {
        unsetRedirectURL();
      } else {
        setRedirectURL((String)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefID();
      } else {
        setRefID((String)value);
      }
      break;

    case TRANSACTION_ID:
      if (value == null) {
        unsetTransactionID();
      } else {
        setTransactionID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return Integer.valueOf(getCode());

    case REDIRECT_URL:
      return getRedirectURL();

    case REF_ID:
      return getRefID();

    case TRANSACTION_ID:
      return getTransactionID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCode();
    case REDIRECT_URL:
      return isSetRedirectURL();
    case REF_ID:
      return isSetRefID();
    case TRANSACTION_ID:
      return isSetTransactionID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof T_Response)
      return this.equals((T_Response)that);
    return false;
  }

  public boolean equals(T_Response that) {
    if (that == null)
      return false;

    boolean this_present_code = true;
    boolean that_present_code = true;
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (this.code != that.code)
        return false;
    }

    boolean this_present_redirectURL = true && this.isSetRedirectURL();
    boolean that_present_redirectURL = true && that.isSetRedirectURL();
    if (this_present_redirectURL || that_present_redirectURL) {
      if (!(this_present_redirectURL && that_present_redirectURL))
        return false;
      if (!this.redirectURL.equals(that.redirectURL))
        return false;
    }

    boolean this_present_refID = true && this.isSetRefID();
    boolean that_present_refID = true && that.isSetRefID();
    if (this_present_refID || that_present_refID) {
      if (!(this_present_refID && that_present_refID))
        return false;
      if (!this.refID.equals(that.refID))
        return false;
    }

    boolean this_present_transactionID = true && this.isSetTransactionID();
    boolean that_present_transactionID = true && that.isSetTransactionID();
    if (this_present_transactionID || that_present_transactionID) {
      if (!(this_present_transactionID && that_present_transactionID))
        return false;
      if (!this.transactionID.equals(that.transactionID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(T_Response other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    T_Response typedOther = (T_Response)other;

    lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedirectURL()).compareTo(typedOther.isSetRedirectURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedirectURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redirectURL, typedOther.redirectURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefID()).compareTo(typedOther.isSetRefID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refID, typedOther.refID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionID()).compareTo(typedOther.isSetTransactionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionID, typedOther.transactionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("T_Response(");
    boolean first = true;

    sb.append("code:");
    sb.append(this.code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("redirectURL:");
    if (this.redirectURL == null) {
      sb.append("null");
    } else {
      sb.append(this.redirectURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refID:");
    if (this.refID == null) {
      sb.append("null");
    } else {
      sb.append(this.refID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactionID:");
    if (this.transactionID == null) {
      sb.append("null");
    } else {
      sb.append(this.transactionID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class T_ResponseStandardSchemeFactory implements SchemeFactory {
    public T_ResponseStandardScheme getScheme() {
      return new T_ResponseStandardScheme();
    }
  }

  private static class T_ResponseStandardScheme extends StandardScheme<T_Response> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, T_Response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.code = iprot.readI32();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REDIRECT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.redirectURL = iprot.readString();
              struct.setRedirectURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refID = iprot.readString();
              struct.setRefIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRANSACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transactionID = iprot.readString();
              struct.setTransactionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, T_Response struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI32(struct.code);
      oprot.writeFieldEnd();
      if (struct.redirectURL != null) {
        oprot.writeFieldBegin(REDIRECT_URL_FIELD_DESC);
        oprot.writeString(struct.redirectURL);
        oprot.writeFieldEnd();
      }
      if (struct.refID != null) {
        oprot.writeFieldBegin(REF_ID_FIELD_DESC);
        oprot.writeString(struct.refID);
        oprot.writeFieldEnd();
      }
      if (struct.transactionID != null) {
        oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
        oprot.writeString(struct.transactionID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class T_ResponseTupleSchemeFactory implements SchemeFactory {
    public T_ResponseTupleScheme getScheme() {
      return new T_ResponseTupleScheme();
    }
  }

  private static class T_ResponseTupleScheme extends TupleScheme<T_Response> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, T_Response struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCode()) {
        optionals.set(0);
      }
      if (struct.isSetRedirectURL()) {
        optionals.set(1);
      }
      if (struct.isSetRefID()) {
        optionals.set(2);
      }
      if (struct.isSetTransactionID()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCode()) {
        oprot.writeI32(struct.code);
      }
      if (struct.isSetRedirectURL()) {
        oprot.writeString(struct.redirectURL);
      }
      if (struct.isSetRefID()) {
        oprot.writeString(struct.refID);
      }
      if (struct.isSetTransactionID()) {
        oprot.writeString(struct.transactionID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, T_Response struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.code = iprot.readI32();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.redirectURL = iprot.readString();
        struct.setRedirectURLIsSet(true);
      }
      if (incoming.get(2)) {
        struct.refID = iprot.readString();
        struct.setRefIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.transactionID = iprot.readString();
        struct.setTransactionIDIsSet(true);
      }
    }
  }

}

