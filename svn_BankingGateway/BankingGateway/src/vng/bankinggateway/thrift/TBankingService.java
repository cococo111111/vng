/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vng.bankinggateway.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TBankingService {

  public interface Iface {

    public vng.bankinggateway.thrift.T_Response requestTransfer(String refID, String time, String username, String agencyCode, String region, int amount, String clientIP, String description, String bankCode, String commision, String urlCallBack, String transferType, String sig) throws org.apache.thrift.TException;

    public vng.bankinggateway.thrift.T_TranStat getTranxStatus(String refID, String day) throws org.apache.thrift.TException;

    public List<vng.bankinggateway.thrift.T_TransactionReport> getTranxs(String day, short txStatus, boolean allStatus) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void requestTransfer(String refID, String time, String username, String agencyCode, String region, int amount, String clientIP, String description, String bankCode, String commision, String urlCallBack, String transferType, String sig, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.requestTransfer_call> resultHandler) throws org.apache.thrift.TException;

    public void getTranxStatus(String refID, String day, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTranxStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void getTranxs(String day, short txStatus, boolean allStatus, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTranxs_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public vng.bankinggateway.thrift.T_Response requestTransfer(String refID, String time, String username, String agencyCode, String region, int amount, String clientIP, String description, String bankCode, String commision, String urlCallBack, String transferType, String sig) throws org.apache.thrift.TException
    {
      send_requestTransfer(refID, time, username, agencyCode, region, amount, clientIP, description, bankCode, commision, urlCallBack, transferType, sig);
      return recv_requestTransfer();
    }

    public void send_requestTransfer(String refID, String time, String username, String agencyCode, String region, int amount, String clientIP, String description, String bankCode, String commision, String urlCallBack, String transferType, String sig) throws org.apache.thrift.TException
    {
      requestTransfer_args args = new requestTransfer_args();
      args.setRefID(refID);
      args.setTime(time);
      args.setUsername(username);
      args.setAgencyCode(agencyCode);
      args.setRegion(region);
      args.setAmount(amount);
      args.setClientIP(clientIP);
      args.setDescription(description);
      args.setBankCode(bankCode);
      args.setCommision(commision);
      args.setUrlCallBack(urlCallBack);
      args.setTransferType(transferType);
      args.setSig(sig);
      sendBase("requestTransfer", args);
    }

    public vng.bankinggateway.thrift.T_Response recv_requestTransfer() throws org.apache.thrift.TException
    {
      requestTransfer_result result = new requestTransfer_result();
      receiveBase(result, "requestTransfer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestTransfer failed: unknown result");
    }

    public vng.bankinggateway.thrift.T_TranStat getTranxStatus(String refID, String day) throws org.apache.thrift.TException
    {
      send_getTranxStatus(refID, day);
      return recv_getTranxStatus();
    }

    public void send_getTranxStatus(String refID, String day) throws org.apache.thrift.TException
    {
      getTranxStatus_args args = new getTranxStatus_args();
      args.setRefID(refID);
      args.setDay(day);
      sendBase("getTranxStatus", args);
    }

    public vng.bankinggateway.thrift.T_TranStat recv_getTranxStatus() throws org.apache.thrift.TException
    {
      getTranxStatus_result result = new getTranxStatus_result();
      receiveBase(result, "getTranxStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTranxStatus failed: unknown result");
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> getTranxs(String day, short txStatus, boolean allStatus) throws org.apache.thrift.TException
    {
      send_getTranxs(day, txStatus, allStatus);
      return recv_getTranxs();
    }

    public void send_getTranxs(String day, short txStatus, boolean allStatus) throws org.apache.thrift.TException
    {
      getTranxs_args args = new getTranxs_args();
      args.setDay(day);
      args.setTxStatus(txStatus);
      args.setAllStatus(allStatus);
      sendBase("getTranxs", args);
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> recv_getTranxs() throws org.apache.thrift.TException
    {
      getTranxs_result result = new getTranxs_result();
      receiveBase(result, "getTranxs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTranxs failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void requestTransfer(String refID, String time, String username, String agencyCode, String region, int amount, String clientIP, String description, String bankCode, String commision, String urlCallBack, String transferType, String sig, org.apache.thrift.async.AsyncMethodCallback<requestTransfer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestTransfer_call method_call = new requestTransfer_call(refID, time, username, agencyCode, region, amount, clientIP, description, bankCode, commision, urlCallBack, transferType, sig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestTransfer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String refID;
      private String time;
      private String username;
      private String agencyCode;
      private String region;
      private int amount;
      private String clientIP;
      private String description;
      private String bankCode;
      private String commision;
      private String urlCallBack;
      private String transferType;
      private String sig;
      public requestTransfer_call(String refID, String time, String username, String agencyCode, String region, int amount, String clientIP, String description, String bankCode, String commision, String urlCallBack, String transferType, String sig, org.apache.thrift.async.AsyncMethodCallback<requestTransfer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refID = refID;
        this.time = time;
        this.username = username;
        this.agencyCode = agencyCode;
        this.region = region;
        this.amount = amount;
        this.clientIP = clientIP;
        this.description = description;
        this.bankCode = bankCode;
        this.commision = commision;
        this.urlCallBack = urlCallBack;
        this.transferType = transferType;
        this.sig = sig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestTransfer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestTransfer_args args = new requestTransfer_args();
        args.setRefID(refID);
        args.setTime(time);
        args.setUsername(username);
        args.setAgencyCode(agencyCode);
        args.setRegion(region);
        args.setAmount(amount);
        args.setClientIP(clientIP);
        args.setDescription(description);
        args.setBankCode(bankCode);
        args.setCommision(commision);
        args.setUrlCallBack(urlCallBack);
        args.setTransferType(transferType);
        args.setSig(sig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.bankinggateway.thrift.T_Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestTransfer();
      }
    }

    public void getTranxStatus(String refID, String day, org.apache.thrift.async.AsyncMethodCallback<getTranxStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTranxStatus_call method_call = new getTranxStatus_call(refID, day, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTranxStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String refID;
      private String day;
      public getTranxStatus_call(String refID, String day, org.apache.thrift.async.AsyncMethodCallback<getTranxStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refID = refID;
        this.day = day;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTranxStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTranxStatus_args args = new getTranxStatus_args();
        args.setRefID(refID);
        args.setDay(day);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.bankinggateway.thrift.T_TranStat getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTranxStatus();
      }
    }

    public void getTranxs(String day, short txStatus, boolean allStatus, org.apache.thrift.async.AsyncMethodCallback<getTranxs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTranxs_call method_call = new getTranxs_call(day, txStatus, allStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTranxs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String day;
      private short txStatus;
      private boolean allStatus;
      public getTranxs_call(String day, short txStatus, boolean allStatus, org.apache.thrift.async.AsyncMethodCallback<getTranxs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
        this.txStatus = txStatus;
        this.allStatus = allStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTranxs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTranxs_args args = new getTranxs_args();
        args.setDay(day);
        args.setTxStatus(txStatus);
        args.setAllStatus(allStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.bankinggateway.thrift.T_TransactionReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTranxs();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("requestTransfer", new requestTransfer());
      processMap.put("getTranxStatus", new getTranxStatus());
      processMap.put("getTranxs", new getTranxs());
      return processMap;
    }

    public static class requestTransfer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestTransfer_args> {
      public requestTransfer() {
        super("requestTransfer");
      }

      public requestTransfer_args getEmptyArgsInstance() {
        return new requestTransfer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public requestTransfer_result getResult(I iface, requestTransfer_args args) throws org.apache.thrift.TException {
        requestTransfer_result result = new requestTransfer_result();
        result.success = iface.requestTransfer(args.refID, args.time, args.username, args.agencyCode, args.region, args.amount, args.clientIP, args.description, args.bankCode, args.commision, args.urlCallBack, args.transferType, args.sig);
        return result;
      }
    }

    public static class getTranxStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTranxStatus_args> {
      public getTranxStatus() {
        super("getTranxStatus");
      }

      public getTranxStatus_args getEmptyArgsInstance() {
        return new getTranxStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTranxStatus_result getResult(I iface, getTranxStatus_args args) throws org.apache.thrift.TException {
        getTranxStatus_result result = new getTranxStatus_result();
        result.success = iface.getTranxStatus(args.refID, args.day);
        return result;
      }
    }

    public static class getTranxs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTranxs_args> {
      public getTranxs() {
        super("getTranxs");
      }

      public getTranxs_args getEmptyArgsInstance() {
        return new getTranxs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTranxs_result getResult(I iface, getTranxs_args args) throws org.apache.thrift.TException {
        getTranxs_result result = new getTranxs_result();
        result.success = iface.getTranxs(args.day, args.txStatus, args.allStatus);
        return result;
      }
    }

  }

  public static class requestTransfer_args implements org.apache.thrift.TBase<requestTransfer_args, requestTransfer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestTransfer_args");

    private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AGENCY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("agencyCode", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIP", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField BANK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCode", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField COMMISION_FIELD_DESC = new org.apache.thrift.protocol.TField("commision", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField URL_CALL_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("urlCallBack", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField TRANSFER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transferType", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRING, (short)13);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestTransfer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestTransfer_argsTupleSchemeFactory());
    }

    public String refID; // required
    public String time; // required
    public String username; // required
    public String agencyCode; // required
    public String region; // required
    public int amount; // required
    public String clientIP; // required
    public String description; // required
    public String bankCode; // required
    public String commision; // required
    public String urlCallBack; // required
    public String transferType; // required
    public String sig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REF_ID((short)1, "refID"),
      TIME((short)2, "time"),
      USERNAME((short)3, "username"),
      AGENCY_CODE((short)4, "agencyCode"),
      REGION((short)5, "region"),
      AMOUNT((short)6, "amount"),
      CLIENT_IP((short)7, "clientIP"),
      DESCRIPTION((short)8, "description"),
      BANK_CODE((short)9, "bankCode"),
      COMMISION((short)10, "commision"),
      URL_CALL_BACK((short)11, "urlCallBack"),
      TRANSFER_TYPE((short)12, "transferType"),
      SIG((short)13, "sig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REF_ID
            return REF_ID;
          case 2: // TIME
            return TIME;
          case 3: // USERNAME
            return USERNAME;
          case 4: // AGENCY_CODE
            return AGENCY_CODE;
          case 5: // REGION
            return REGION;
          case 6: // AMOUNT
            return AMOUNT;
          case 7: // CLIENT_IP
            return CLIENT_IP;
          case 8: // DESCRIPTION
            return DESCRIPTION;
          case 9: // BANK_CODE
            return BANK_CODE;
          case 10: // COMMISION
            return COMMISION;
          case 11: // URL_CALL_BACK
            return URL_CALL_BACK;
          case 12: // TRANSFER_TYPE
            return TRANSFER_TYPE;
          case 13: // SIG
            return SIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AMOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGENCY_CODE, new org.apache.thrift.meta_data.FieldMetaData("agencyCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("clientIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_CODE, new org.apache.thrift.meta_data.FieldMetaData("bankCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMMISION, new org.apache.thrift.meta_data.FieldMetaData("commision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.URL_CALL_BACK, new org.apache.thrift.meta_data.FieldMetaData("urlCallBack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRANSFER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transferType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestTransfer_args.class, metaDataMap);
    }

    public requestTransfer_args() {
    }

    public requestTransfer_args(
      String refID,
      String time,
      String username,
      String agencyCode,
      String region,
      int amount,
      String clientIP,
      String description,
      String bankCode,
      String commision,
      String urlCallBack,
      String transferType,
      String sig)
    {
      this();
      this.refID = refID;
      this.time = time;
      this.username = username;
      this.agencyCode = agencyCode;
      this.region = region;
      this.amount = amount;
      setAmountIsSet(true);
      this.clientIP = clientIP;
      this.description = description;
      this.bankCode = bankCode;
      this.commision = commision;
      this.urlCallBack = urlCallBack;
      this.transferType = transferType;
      this.sig = sig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestTransfer_args(requestTransfer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRefID()) {
        this.refID = other.refID;
      }
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetAgencyCode()) {
        this.agencyCode = other.agencyCode;
      }
      if (other.isSetRegion()) {
        this.region = other.region;
      }
      this.amount = other.amount;
      if (other.isSetClientIP()) {
        this.clientIP = other.clientIP;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      if (other.isSetBankCode()) {
        this.bankCode = other.bankCode;
      }
      if (other.isSetCommision()) {
        this.commision = other.commision;
      }
      if (other.isSetUrlCallBack()) {
        this.urlCallBack = other.urlCallBack;
      }
      if (other.isSetTransferType()) {
        this.transferType = other.transferType;
      }
      if (other.isSetSig()) {
        this.sig = other.sig;
      }
    }

    public requestTransfer_args deepCopy() {
      return new requestTransfer_args(this);
    }

    @Override
    public void clear() {
      this.refID = null;
      this.time = null;
      this.username = null;
      this.agencyCode = null;
      this.region = null;
      setAmountIsSet(false);
      this.amount = 0;
      this.clientIP = null;
      this.description = null;
      this.bankCode = null;
      this.commision = null;
      this.urlCallBack = null;
      this.transferType = null;
      this.sig = null;
    }

    public String getRefID() {
      return this.refID;
    }

    public requestTransfer_args setRefID(String refID) {
      this.refID = refID;
      return this;
    }

    public void unsetRefID() {
      this.refID = null;
    }

    /** Returns true if field refID is set (has been assigned a value) and false otherwise */
    public boolean isSetRefID() {
      return this.refID != null;
    }

    public void setRefIDIsSet(boolean value) {
      if (!value) {
        this.refID = null;
      }
    }

    public String getTime() {
      return this.time;
    }

    public requestTransfer_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public requestTransfer_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getAgencyCode() {
      return this.agencyCode;
    }

    public requestTransfer_args setAgencyCode(String agencyCode) {
      this.agencyCode = agencyCode;
      return this;
    }

    public void unsetAgencyCode() {
      this.agencyCode = null;
    }

    /** Returns true if field agencyCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAgencyCode() {
      return this.agencyCode != null;
    }

    public void setAgencyCodeIsSet(boolean value) {
      if (!value) {
        this.agencyCode = null;
      }
    }

    public String getRegion() {
      return this.region;
    }

    public requestTransfer_args setRegion(String region) {
      this.region = region;
      return this;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    public int getAmount() {
      return this.amount;
    }

    public requestTransfer_args setAmount(int amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public String getClientIP() {
      return this.clientIP;
    }

    public requestTransfer_args setClientIP(String clientIP) {
      this.clientIP = clientIP;
      return this;
    }

    public void unsetClientIP() {
      this.clientIP = null;
    }

    /** Returns true if field clientIP is set (has been assigned a value) and false otherwise */
    public boolean isSetClientIP() {
      return this.clientIP != null;
    }

    public void setClientIPIsSet(boolean value) {
      if (!value) {
        this.clientIP = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public requestTransfer_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public String getBankCode() {
      return this.bankCode;
    }

    public requestTransfer_args setBankCode(String bankCode) {
      this.bankCode = bankCode;
      return this;
    }

    public void unsetBankCode() {
      this.bankCode = null;
    }

    /** Returns true if field bankCode is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCode() {
      return this.bankCode != null;
    }

    public void setBankCodeIsSet(boolean value) {
      if (!value) {
        this.bankCode = null;
      }
    }

    public String getCommision() {
      return this.commision;
    }

    public requestTransfer_args setCommision(String commision) {
      this.commision = commision;
      return this;
    }

    public void unsetCommision() {
      this.commision = null;
    }

    /** Returns true if field commision is set (has been assigned a value) and false otherwise */
    public boolean isSetCommision() {
      return this.commision != null;
    }

    public void setCommisionIsSet(boolean value) {
      if (!value) {
        this.commision = null;
      }
    }

    public String getUrlCallBack() {
      return this.urlCallBack;
    }

    public requestTransfer_args setUrlCallBack(String urlCallBack) {
      this.urlCallBack = urlCallBack;
      return this;
    }

    public void unsetUrlCallBack() {
      this.urlCallBack = null;
    }

    /** Returns true if field urlCallBack is set (has been assigned a value) and false otherwise */
    public boolean isSetUrlCallBack() {
      return this.urlCallBack != null;
    }

    public void setUrlCallBackIsSet(boolean value) {
      if (!value) {
        this.urlCallBack = null;
      }
    }

    public String getTransferType() {
      return this.transferType;
    }

    public requestTransfer_args setTransferType(String transferType) {
      this.transferType = transferType;
      return this;
    }

    public void unsetTransferType() {
      this.transferType = null;
    }

    /** Returns true if field transferType is set (has been assigned a value) and false otherwise */
    public boolean isSetTransferType() {
      return this.transferType != null;
    }

    public void setTransferTypeIsSet(boolean value) {
      if (!value) {
        this.transferType = null;
      }
    }

    public String getSig() {
      return this.sig;
    }

    public requestTransfer_args setSig(String sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REF_ID:
        if (value == null) {
          unsetRefID();
        } else {
          setRefID((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case AGENCY_CODE:
        if (value == null) {
          unsetAgencyCode();
        } else {
          setAgencyCode((String)value);
        }
        break;

      case REGION:
        if (value == null) {
          unsetRegion();
        } else {
          setRegion((String)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Integer)value);
        }
        break;

      case CLIENT_IP:
        if (value == null) {
          unsetClientIP();
        } else {
          setClientIP((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case BANK_CODE:
        if (value == null) {
          unsetBankCode();
        } else {
          setBankCode((String)value);
        }
        break;

      case COMMISION:
        if (value == null) {
          unsetCommision();
        } else {
          setCommision((String)value);
        }
        break;

      case URL_CALL_BACK:
        if (value == null) {
          unsetUrlCallBack();
        } else {
          setUrlCallBack((String)value);
        }
        break;

      case TRANSFER_TYPE:
        if (value == null) {
          unsetTransferType();
        } else {
          setTransferType((String)value);
        }
        break;

      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REF_ID:
        return getRefID();

      case TIME:
        return getTime();

      case USERNAME:
        return getUsername();

      case AGENCY_CODE:
        return getAgencyCode();

      case REGION:
        return getRegion();

      case AMOUNT:
        return Integer.valueOf(getAmount());

      case CLIENT_IP:
        return getClientIP();

      case DESCRIPTION:
        return getDescription();

      case BANK_CODE:
        return getBankCode();

      case COMMISION:
        return getCommision();

      case URL_CALL_BACK:
        return getUrlCallBack();

      case TRANSFER_TYPE:
        return getTransferType();

      case SIG:
        return getSig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REF_ID:
        return isSetRefID();
      case TIME:
        return isSetTime();
      case USERNAME:
        return isSetUsername();
      case AGENCY_CODE:
        return isSetAgencyCode();
      case REGION:
        return isSetRegion();
      case AMOUNT:
        return isSetAmount();
      case CLIENT_IP:
        return isSetClientIP();
      case DESCRIPTION:
        return isSetDescription();
      case BANK_CODE:
        return isSetBankCode();
      case COMMISION:
        return isSetCommision();
      case URL_CALL_BACK:
        return isSetUrlCallBack();
      case TRANSFER_TYPE:
        return isSetTransferType();
      case SIG:
        return isSetSig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestTransfer_args)
        return this.equals((requestTransfer_args)that);
      return false;
    }

    public boolean equals(requestTransfer_args that) {
      if (that == null)
        return false;

      boolean this_present_refID = true && this.isSetRefID();
      boolean that_present_refID = true && that.isSetRefID();
      if (this_present_refID || that_present_refID) {
        if (!(this_present_refID && that_present_refID))
          return false;
        if (!this.refID.equals(that.refID))
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_agencyCode = true && this.isSetAgencyCode();
      boolean that_present_agencyCode = true && that.isSetAgencyCode();
      if (this_present_agencyCode || that_present_agencyCode) {
        if (!(this_present_agencyCode && that_present_agencyCode))
          return false;
        if (!this.agencyCode.equals(that.agencyCode))
          return false;
      }

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      boolean this_present_clientIP = true && this.isSetClientIP();
      boolean that_present_clientIP = true && that.isSetClientIP();
      if (this_present_clientIP || that_present_clientIP) {
        if (!(this_present_clientIP && that_present_clientIP))
          return false;
        if (!this.clientIP.equals(that.clientIP))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_bankCode = true && this.isSetBankCode();
      boolean that_present_bankCode = true && that.isSetBankCode();
      if (this_present_bankCode || that_present_bankCode) {
        if (!(this_present_bankCode && that_present_bankCode))
          return false;
        if (!this.bankCode.equals(that.bankCode))
          return false;
      }

      boolean this_present_commision = true && this.isSetCommision();
      boolean that_present_commision = true && that.isSetCommision();
      if (this_present_commision || that_present_commision) {
        if (!(this_present_commision && that_present_commision))
          return false;
        if (!this.commision.equals(that.commision))
          return false;
      }

      boolean this_present_urlCallBack = true && this.isSetUrlCallBack();
      boolean that_present_urlCallBack = true && that.isSetUrlCallBack();
      if (this_present_urlCallBack || that_present_urlCallBack) {
        if (!(this_present_urlCallBack && that_present_urlCallBack))
          return false;
        if (!this.urlCallBack.equals(that.urlCallBack))
          return false;
      }

      boolean this_present_transferType = true && this.isSetTransferType();
      boolean that_present_transferType = true && that.isSetTransferType();
      if (this_present_transferType || that_present_transferType) {
        if (!(this_present_transferType && that_present_transferType))
          return false;
        if (!this.transferType.equals(that.transferType))
          return false;
      }

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(requestTransfer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      requestTransfer_args typedOther = (requestTransfer_args)other;

      lastComparison = Boolean.valueOf(isSetRefID()).compareTo(typedOther.isSetRefID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refID, typedOther.refID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAgencyCode()).compareTo(typedOther.isSetAgencyCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgencyCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agencyCode, typedOther.agencyCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegion()).compareTo(typedOther.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, typedOther.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, typedOther.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientIP()).compareTo(typedOther.isSetClientIP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientIP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIP, typedOther.clientIP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankCode()).compareTo(typedOther.isSetBankCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCode, typedOther.bankCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommision()).compareTo(typedOther.isSetCommision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommision()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commision, typedOther.commision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUrlCallBack()).compareTo(typedOther.isSetUrlCallBack());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrlCallBack()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urlCallBack, typedOther.urlCallBack);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransferType()).compareTo(typedOther.isSetTransferType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransferType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferType, typedOther.transferType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestTransfer_args(");
      boolean first = true;

      sb.append("refID:");
      if (this.refID == null) {
        sb.append("null");
      } else {
        sb.append(this.refID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("agencyCode:");
      if (this.agencyCode == null) {
        sb.append("null");
      } else {
        sb.append(this.agencyCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientIP:");
      if (this.clientIP == null) {
        sb.append("null");
      } else {
        sb.append(this.clientIP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankCode:");
      if (this.bankCode == null) {
        sb.append("null");
      } else {
        sb.append(this.bankCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commision:");
      if (this.commision == null) {
        sb.append("null");
      } else {
        sb.append(this.commision);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("urlCallBack:");
      if (this.urlCallBack == null) {
        sb.append("null");
      } else {
        sb.append(this.urlCallBack);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transferType:");
      if (this.transferType == null) {
        sb.append("null");
      } else {
        sb.append(this.transferType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestTransfer_argsStandardSchemeFactory implements SchemeFactory {
      public requestTransfer_argsStandardScheme getScheme() {
        return new requestTransfer_argsStandardScheme();
      }
    }

    private static class requestTransfer_argsStandardScheme extends StandardScheme<requestTransfer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestTransfer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REF_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.refID = iprot.readString();
                struct.setRefIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AGENCY_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.agencyCode = iprot.readString();
                struct.setAgencyCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REGION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.region = iprot.readString();
                struct.setRegionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.amount = iprot.readI32();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // CLIENT_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientIP = iprot.readString();
                struct.setClientIPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // BANK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankCode = iprot.readString();
                struct.setBankCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // COMMISION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.commision = iprot.readString();
                struct.setCommisionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // URL_CALL_BACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.urlCallBack = iprot.readString();
                struct.setUrlCallBackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // TRANSFER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transferType = iprot.readString();
                struct.setTransferTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sig = iprot.readString();
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestTransfer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refID != null) {
          oprot.writeFieldBegin(REF_ID_FIELD_DESC);
          oprot.writeString(struct.refID);
          oprot.writeFieldEnd();
        }
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.agencyCode != null) {
          oprot.writeFieldBegin(AGENCY_CODE_FIELD_DESC);
          oprot.writeString(struct.agencyCode);
          oprot.writeFieldEnd();
        }
        if (struct.region != null) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          oprot.writeString(struct.region);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.amount);
        oprot.writeFieldEnd();
        if (struct.clientIP != null) {
          oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
          oprot.writeString(struct.clientIP);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        if (struct.bankCode != null) {
          oprot.writeFieldBegin(BANK_CODE_FIELD_DESC);
          oprot.writeString(struct.bankCode);
          oprot.writeFieldEnd();
        }
        if (struct.commision != null) {
          oprot.writeFieldBegin(COMMISION_FIELD_DESC);
          oprot.writeString(struct.commision);
          oprot.writeFieldEnd();
        }
        if (struct.urlCallBack != null) {
          oprot.writeFieldBegin(URL_CALL_BACK_FIELD_DESC);
          oprot.writeString(struct.urlCallBack);
          oprot.writeFieldEnd();
        }
        if (struct.transferType != null) {
          oprot.writeFieldBegin(TRANSFER_TYPE_FIELD_DESC);
          oprot.writeString(struct.transferType);
          oprot.writeFieldEnd();
        }
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          oprot.writeString(struct.sig);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestTransfer_argsTupleSchemeFactory implements SchemeFactory {
      public requestTransfer_argsTupleScheme getScheme() {
        return new requestTransfer_argsTupleScheme();
      }
    }

    private static class requestTransfer_argsTupleScheme extends TupleScheme<requestTransfer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefID()) {
          optionals.set(0);
        }
        if (struct.isSetTime()) {
          optionals.set(1);
        }
        if (struct.isSetUsername()) {
          optionals.set(2);
        }
        if (struct.isSetAgencyCode()) {
          optionals.set(3);
        }
        if (struct.isSetRegion()) {
          optionals.set(4);
        }
        if (struct.isSetAmount()) {
          optionals.set(5);
        }
        if (struct.isSetClientIP()) {
          optionals.set(6);
        }
        if (struct.isSetDescription()) {
          optionals.set(7);
        }
        if (struct.isSetBankCode()) {
          optionals.set(8);
        }
        if (struct.isSetCommision()) {
          optionals.set(9);
        }
        if (struct.isSetUrlCallBack()) {
          optionals.set(10);
        }
        if (struct.isSetTransferType()) {
          optionals.set(11);
        }
        if (struct.isSetSig()) {
          optionals.set(12);
        }
        oprot.writeBitSet(optionals, 13);
        if (struct.isSetRefID()) {
          oprot.writeString(struct.refID);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetAgencyCode()) {
          oprot.writeString(struct.agencyCode);
        }
        if (struct.isSetRegion()) {
          oprot.writeString(struct.region);
        }
        if (struct.isSetAmount()) {
          oprot.writeI32(struct.amount);
        }
        if (struct.isSetClientIP()) {
          oprot.writeString(struct.clientIP);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetBankCode()) {
          oprot.writeString(struct.bankCode);
        }
        if (struct.isSetCommision()) {
          oprot.writeString(struct.commision);
        }
        if (struct.isSetUrlCallBack()) {
          oprot.writeString(struct.urlCallBack);
        }
        if (struct.isSetTransferType()) {
          oprot.writeString(struct.transferType);
        }
        if (struct.isSetSig()) {
          oprot.writeString(struct.sig);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(13);
        if (incoming.get(0)) {
          struct.refID = iprot.readString();
          struct.setRefIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.agencyCode = iprot.readString();
          struct.setAgencyCodeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.region = iprot.readString();
          struct.setRegionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.amount = iprot.readI32();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(6)) {
          struct.clientIP = iprot.readString();
          struct.setClientIPIsSet(true);
        }
        if (incoming.get(7)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(8)) {
          struct.bankCode = iprot.readString();
          struct.setBankCodeIsSet(true);
        }
        if (incoming.get(9)) {
          struct.commision = iprot.readString();
          struct.setCommisionIsSet(true);
        }
        if (incoming.get(10)) {
          struct.urlCallBack = iprot.readString();
          struct.setUrlCallBackIsSet(true);
        }
        if (incoming.get(11)) {
          struct.transferType = iprot.readString();
          struct.setTransferTypeIsSet(true);
        }
        if (incoming.get(12)) {
          struct.sig = iprot.readString();
          struct.setSigIsSet(true);
        }
      }
    }

  }

  public static class requestTransfer_result implements org.apache.thrift.TBase<requestTransfer_result, requestTransfer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestTransfer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestTransfer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestTransfer_resultTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestTransfer_result.class, metaDataMap);
    }

    public requestTransfer_result() {
    }

    public requestTransfer_result(
      vng.bankinggateway.thrift.T_Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestTransfer_result(requestTransfer_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.bankinggateway.thrift.T_Response(other.success);
      }
    }

    public requestTransfer_result deepCopy() {
      return new requestTransfer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.bankinggateway.thrift.T_Response getSuccess() {
      return this.success;
    }

    public requestTransfer_result setSuccess(vng.bankinggateway.thrift.T_Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.bankinggateway.thrift.T_Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestTransfer_result)
        return this.equals((requestTransfer_result)that);
      return false;
    }

    public boolean equals(requestTransfer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(requestTransfer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      requestTransfer_result typedOther = (requestTransfer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestTransfer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestTransfer_resultStandardSchemeFactory implements SchemeFactory {
      public requestTransfer_resultStandardScheme getScheme() {
        return new requestTransfer_resultStandardScheme();
      }
    }

    private static class requestTransfer_resultStandardScheme extends StandardScheme<requestTransfer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestTransfer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new vng.bankinggateway.thrift.T_Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestTransfer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestTransfer_resultTupleSchemeFactory implements SchemeFactory {
      public requestTransfer_resultTupleScheme getScheme() {
        return new requestTransfer_resultTupleScheme();
      }
    }

    private static class requestTransfer_resultTupleScheme extends TupleScheme<requestTransfer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new vng.bankinggateway.thrift.T_Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTranxStatus_args implements org.apache.thrift.TBase<getTranxStatus_args, getTranxStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxStatus_args");

    private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxStatus_argsTupleSchemeFactory());
    }

    public String refID; // required
    public String day; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REF_ID((short)1, "refID"),
      DAY((short)2, "day");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REF_ID
            return REF_ID;
          case 2: // DAY
            return DAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxStatus_args.class, metaDataMap);
    }

    public getTranxStatus_args() {
    }

    public getTranxStatus_args(
      String refID,
      String day)
    {
      this();
      this.refID = refID;
      this.day = day;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxStatus_args(getTranxStatus_args other) {
      if (other.isSetRefID()) {
        this.refID = other.refID;
      }
      if (other.isSetDay()) {
        this.day = other.day;
      }
    }

    public getTranxStatus_args deepCopy() {
      return new getTranxStatus_args(this);
    }

    @Override
    public void clear() {
      this.refID = null;
      this.day = null;
    }

    public String getRefID() {
      return this.refID;
    }

    public getTranxStatus_args setRefID(String refID) {
      this.refID = refID;
      return this;
    }

    public void unsetRefID() {
      this.refID = null;
    }

    /** Returns true if field refID is set (has been assigned a value) and false otherwise */
    public boolean isSetRefID() {
      return this.refID != null;
    }

    public void setRefIDIsSet(boolean value) {
      if (!value) {
        this.refID = null;
      }
    }

    public String getDay() {
      return this.day;
    }

    public getTranxStatus_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REF_ID:
        if (value == null) {
          unsetRefID();
        } else {
          setRefID((String)value);
        }
        break;

      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REF_ID:
        return getRefID();

      case DAY:
        return getDay();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REF_ID:
        return isSetRefID();
      case DAY:
        return isSetDay();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxStatus_args)
        return this.equals((getTranxStatus_args)that);
      return false;
    }

    public boolean equals(getTranxStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_refID = true && this.isSetRefID();
      boolean that_present_refID = true && that.isSetRefID();
      if (this_present_refID || that_present_refID) {
        if (!(this_present_refID && that_present_refID))
          return false;
        if (!this.refID.equals(that.refID))
          return false;
      }

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxStatus_args typedOther = (getTranxStatus_args)other;

      lastComparison = Boolean.valueOf(isSetRefID()).compareTo(typedOther.isSetRefID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refID, typedOther.refID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, typedOther.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxStatus_args(");
      boolean first = true;

      sb.append("refID:");
      if (this.refID == null) {
        sb.append("null");
      } else {
        sb.append(this.refID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getTranxStatus_argsStandardScheme getScheme() {
        return new getTranxStatus_argsStandardScheme();
      }
    }

    private static class getTranxStatus_argsStandardScheme extends StandardScheme<getTranxStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REF_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.refID = iprot.readString();
                struct.setRefIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refID != null) {
          oprot.writeFieldBegin(REF_ID_FIELD_DESC);
          oprot.writeString(struct.refID);
          oprot.writeFieldEnd();
        }
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getTranxStatus_argsTupleScheme getScheme() {
        return new getTranxStatus_argsTupleScheme();
      }
    }

    private static class getTranxStatus_argsTupleScheme extends TupleScheme<getTranxStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefID()) {
          optionals.set(0);
        }
        if (struct.isSetDay()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRefID()) {
          oprot.writeString(struct.refID);
        }
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.refID = iprot.readString();
          struct.setRefIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
      }
    }

  }

  public static class getTranxStatus_result implements org.apache.thrift.TBase<getTranxStatus_result, getTranxStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxStatus_resultTupleSchemeFactory());
    }

    public vng.bankinggateway.thrift.T_TranStat success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_TranStat.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxStatus_result.class, metaDataMap);
    }

    public getTranxStatus_result() {
    }

    public getTranxStatus_result(
      vng.bankinggateway.thrift.T_TranStat success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxStatus_result(getTranxStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.bankinggateway.thrift.T_TranStat(other.success);
      }
    }

    public getTranxStatus_result deepCopy() {
      return new getTranxStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.bankinggateway.thrift.T_TranStat getSuccess() {
      return this.success;
    }

    public getTranxStatus_result setSuccess(vng.bankinggateway.thrift.T_TranStat success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.bankinggateway.thrift.T_TranStat)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxStatus_result)
        return this.equals((getTranxStatus_result)that);
      return false;
    }

    public boolean equals(getTranxStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxStatus_result typedOther = (getTranxStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getTranxStatus_resultStandardScheme getScheme() {
        return new getTranxStatus_resultStandardScheme();
      }
    }

    private static class getTranxStatus_resultStandardScheme extends StandardScheme<getTranxStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new vng.bankinggateway.thrift.T_TranStat();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getTranxStatus_resultTupleScheme getScheme() {
        return new getTranxStatus_resultTupleScheme();
      }
    }

    private static class getTranxStatus_resultTupleScheme extends TupleScheme<getTranxStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new vng.bankinggateway.thrift.T_TranStat();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTranxs_args implements org.apache.thrift.TBase<getTranxs_args, getTranxs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxs_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TX_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("txStatus", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField ALL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("allStatus", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxs_argsTupleSchemeFactory());
    }

    public String day; // required
    public short txStatus; // required
    public boolean allStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day"),
      TX_STATUS((short)2, "txStatus"),
      ALL_STATUS((short)3, "allStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          case 2: // TX_STATUS
            return TX_STATUS;
          case 3: // ALL_STATUS
            return ALL_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TXSTATUS_ISSET_ID = 0;
    private static final int __ALLSTATUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TX_STATUS, new org.apache.thrift.meta_data.FieldMetaData("txStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.ALL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("allStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxs_args.class, metaDataMap);
    }

    public getTranxs_args() {
    }

    public getTranxs_args(
      String day,
      short txStatus,
      boolean allStatus)
    {
      this();
      this.day = day;
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
      this.allStatus = allStatus;
      setAllStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxs_args(getTranxs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDay()) {
        this.day = other.day;
      }
      this.txStatus = other.txStatus;
      this.allStatus = other.allStatus;
    }

    public getTranxs_args deepCopy() {
      return new getTranxs_args(this);
    }

    @Override
    public void clear() {
      this.day = null;
      setTxStatusIsSet(false);
      this.txStatus = 0;
      setAllStatusIsSet(false);
      this.allStatus = false;
    }

    public String getDay() {
      return this.day;
    }

    public getTranxs_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public short getTxStatus() {
      return this.txStatus;
    }

    public getTranxs_args setTxStatus(short txStatus) {
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
      return this;
    }

    public void unsetTxStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXSTATUS_ISSET_ID);
    }

    /** Returns true if field txStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetTxStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __TXSTATUS_ISSET_ID);
    }

    public void setTxStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXSTATUS_ISSET_ID, value);
    }

    public boolean isAllStatus() {
      return this.allStatus;
    }

    public getTranxs_args setAllStatus(boolean allStatus) {
      this.allStatus = allStatus;
      setAllStatusIsSet(true);
      return this;
    }

    public void unsetAllStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLSTATUS_ISSET_ID);
    }

    /** Returns true if field allStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetAllStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __ALLSTATUS_ISSET_ID);
    }

    public void setAllStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLSTATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      case TX_STATUS:
        if (value == null) {
          unsetTxStatus();
        } else {
          setTxStatus((Short)value);
        }
        break;

      case ALL_STATUS:
        if (value == null) {
          unsetAllStatus();
        } else {
          setAllStatus((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      case TX_STATUS:
        return Short.valueOf(getTxStatus());

      case ALL_STATUS:
        return Boolean.valueOf(isAllStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      case TX_STATUS:
        return isSetTxStatus();
      case ALL_STATUS:
        return isSetAllStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxs_args)
        return this.equals((getTranxs_args)that);
      return false;
    }

    public boolean equals(getTranxs_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      boolean this_present_txStatus = true;
      boolean that_present_txStatus = true;
      if (this_present_txStatus || that_present_txStatus) {
        if (!(this_present_txStatus && that_present_txStatus))
          return false;
        if (this.txStatus != that.txStatus)
          return false;
      }

      boolean this_present_allStatus = true;
      boolean that_present_allStatus = true;
      if (this_present_allStatus || that_present_allStatus) {
        if (!(this_present_allStatus && that_present_allStatus))
          return false;
        if (this.allStatus != that.allStatus)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxs_args typedOther = (getTranxs_args)other;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, typedOther.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxStatus()).compareTo(typedOther.isSetTxStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txStatus, typedOther.txStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAllStatus()).compareTo(typedOther.isSetAllStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allStatus, typedOther.allStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxs_args(");
      boolean first = true;

      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txStatus:");
      sb.append(this.txStatus);
      first = false;
      if (!first) sb.append(", ");
      sb.append("allStatus:");
      sb.append(this.allStatus);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxs_argsStandardSchemeFactory implements SchemeFactory {
      public getTranxs_argsStandardScheme getScheme() {
        return new getTranxs_argsStandardScheme();
      }
    }

    private static class getTranxs_argsStandardScheme extends StandardScheme<getTranxs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TX_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.txStatus = iprot.readI16();
                struct.setTxStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALL_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.allStatus = iprot.readBool();
                struct.setAllStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TX_STATUS_FIELD_DESC);
        oprot.writeI16(struct.txStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ALL_STATUS_FIELD_DESC);
        oprot.writeBool(struct.allStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxs_argsTupleSchemeFactory implements SchemeFactory {
      public getTranxs_argsTupleScheme getScheme() {
        return new getTranxs_argsTupleScheme();
      }
    }

    private static class getTranxs_argsTupleScheme extends TupleScheme<getTranxs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        if (struct.isSetTxStatus()) {
          optionals.set(1);
        }
        if (struct.isSetAllStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
        if (struct.isSetTxStatus()) {
          oprot.writeI16(struct.txStatus);
        }
        if (struct.isSetAllStatus()) {
          oprot.writeBool(struct.allStatus);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txStatus = iprot.readI16();
          struct.setTxStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.allStatus = iprot.readBool();
          struct.setAllStatusIsSet(true);
        }
      }
    }

  }

  public static class getTranxs_result implements org.apache.thrift.TBase<getTranxs_result, getTranxs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTranxs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTranxs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTranxs_resultTupleSchemeFactory());
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vng.bankinggateway.thrift.T_TransactionReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTranxs_result.class, metaDataMap);
    }

    public getTranxs_result() {
    }

    public getTranxs_result(
      List<vng.bankinggateway.thrift.T_TransactionReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTranxs_result(getTranxs_result other) {
      if (other.isSetSuccess()) {
        List<vng.bankinggateway.thrift.T_TransactionReport> __this__success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>();
        for (vng.bankinggateway.thrift.T_TransactionReport other_element : other.success) {
          __this__success.add(new vng.bankinggateway.thrift.T_TransactionReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTranxs_result deepCopy() {
      return new getTranxs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.bankinggateway.thrift.T_TransactionReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.bankinggateway.thrift.T_TransactionReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>();
      }
      this.success.add(elem);
    }

    public List<vng.bankinggateway.thrift.T_TransactionReport> getSuccess() {
      return this.success;
    }

    public getTranxs_result setSuccess(List<vng.bankinggateway.thrift.T_TransactionReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.bankinggateway.thrift.T_TransactionReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTranxs_result)
        return this.equals((getTranxs_result)that);
      return false;
    }

    public boolean equals(getTranxs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTranxs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTranxs_result typedOther = (getTranxs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTranxs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTranxs_resultStandardSchemeFactory implements SchemeFactory {
      public getTranxs_resultStandardScheme getScheme() {
        return new getTranxs_resultStandardScheme();
      }
    }

    private static class getTranxs_resultStandardScheme extends StandardScheme<getTranxs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTranxs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    vng.bankinggateway.thrift.T_TransactionReport _elem2; // required
                    _elem2 = new vng.bankinggateway.thrift.T_TransactionReport();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTranxs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (vng.bankinggateway.thrift.T_TransactionReport _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTranxs_resultTupleSchemeFactory implements SchemeFactory {
      public getTranxs_resultTupleScheme getScheme() {
        return new getTranxs_resultTupleScheme();
      }
    }

    private static class getTranxs_resultTupleScheme extends TupleScheme<getTranxs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTranxs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (vng.bankinggateway.thrift.T_TransactionReport _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTranxs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<vng.bankinggateway.thrift.T_TransactionReport>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              vng.bankinggateway.thrift.T_TransactionReport _elem7; // required
              _elem7 = new vng.bankinggateway.thrift.T_TransactionReport();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
