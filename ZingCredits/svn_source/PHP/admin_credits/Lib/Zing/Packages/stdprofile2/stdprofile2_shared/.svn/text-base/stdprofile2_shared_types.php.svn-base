<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once LIB_PATH. 'Zing/Packages/zcommon/zcommon_types.php';

class stdprofile2_TValue {
  static $_TSPEC;

  public $uID = null;
  public $uIN = null;
  public $userName = null;
  public $displayName = null;
  public $gender = null;
  public $dateOfBirth = null;
  public $avatarVersion = null;
  public $status = null;
  public $type = null;
  public $email = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uIN',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'gender',
          'type' => TType::BYTE,
          ),
        6 => array(
          'var' => 'dateOfBirth',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'avatarVersion',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'type',
          'type' => TType::BYTE,
          ),
        10 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uID'])) {
        $this->uID = $vals['uID'];
      }
      if (isset($vals['uIN'])) {
        $this->uIN = $vals['uIN'];
      }
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['dateOfBirth'])) {
        $this->dateOfBirth = $vals['dateOfBirth'];
      }
      if (isset($vals['avatarVersion'])) {
        $this->avatarVersion = $vals['avatarVersion'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
    }
  }

  public function getName() {
    return 'TValue';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uIN);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateOfBirth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->avatarVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TValue');
    if ($this->uID !== null) {
      $xfer += $output->writeFieldBegin('uID', TType::I32, 1);
      $xfer += $output->writeI32($this->uID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uIN !== null) {
      $xfer += $output->writeFieldBegin('uIN', TType::I32, 2);
      $xfer += $output->writeI32($this->uIN);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 3);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 4);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::BYTE, 5);
      $xfer += $output->writeByte($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateOfBirth !== null) {
      $xfer += $output->writeFieldBegin('dateOfBirth', TType::I64, 6);
      $xfer += $output->writeI64($this->dateOfBirth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatarVersion !== null) {
      $xfer += $output->writeFieldBegin('avatarVersion', TType::I16, 7);
      $xfer += $output->writeI16($this->avatarVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 8);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::BYTE, 9);
      $xfer += $output->writeByte($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 10);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class stdprofile2_TData {
  static $_TSPEC;

  public $first = null;
  public $second = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'first',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'second',
          'type' => TType::STRUCT,
          'class' => 'stdprofile2_TValue',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['first'])) {
        $this->first = $vals['first'];
      }
      if (isset($vals['second'])) {
        $this->second = $vals['second'];
      }
    }
  }

  public function getName() {
    return 'TData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->first);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->second = new stdprofile2_TValue();
            $xfer += $this->second->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TData');
    if ($this->first !== null) {
      $xfer += $output->writeFieldBegin('first', TType::I32, 1);
      $xfer += $output->writeI32($this->first);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->second !== null) {
      if (!is_object($this->second)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('second', TType::STRUCT, 2);
      $xfer += $this->second->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class stdprofile2_TValueResult {
  static $_TSPEC;

  public $error = null;
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => 'stdprofile2_TValue',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'TValueResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new stdprofile2_TValue();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TValueResult');
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 1);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class stdprofile2_TMapErrorResult {
  static $_TSPEC;

  public $error = null;
  public $errorMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMap',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['errorMap'])) {
        $this->errorMap = $vals['errorMap'];
      }
    }
  }

  public function getName() {
    return 'TMapErrorResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->errorMap = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = 0;
              $xfer += $input->readI32($key5);
              $xfer += $input->readI32($val6);
              $this->errorMap[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMapErrorResult');
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 1);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMap !== null) {
      if (!is_array($this->errorMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errorMap', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I32, TType::I32, count($this->errorMap));
        {
          foreach ($this->errorMap as $kiter7 => $viter8)
          {
            $xfer += $output->writeI32($kiter7);
            $xfer += $output->writeI32($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class stdprofile2_TMapDataResult {
  static $_TSPEC;

  public $error = null;
  public $dataMap = null;
  public $errorMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'dataMap',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'stdprofile2_TValue',
            ),
          ),
        3 => array(
          'var' => 'errorMap',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['dataMap'])) {
        $this->dataMap = $vals['dataMap'];
      }
      if (isset($vals['errorMap'])) {
        $this->errorMap = $vals['errorMap'];
      }
    }
  }

  public function getName() {
    return 'TMapDataResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->dataMap = array();
            $_size9 = 0;
            $_ktype10 = 0;
            $_vtype11 = 0;
            $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $key14 = 0;
              $val15 = new stdprofile2_TValue();
              $xfer += $input->readI32($key14);
              $val15 = new stdprofile2_TValue();
              $xfer += $val15->read($input);
              $this->dataMap[$key14] = $val15;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->errorMap = array();
            $_size16 = 0;
            $_ktype17 = 0;
            $_vtype18 = 0;
            $xfer += $input->readMapBegin($_ktype17, $_vtype18, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $key21 = 0;
              $val22 = 0;
              $xfer += $input->readI32($key21);
              $xfer += $input->readI32($val22);
              $this->errorMap[$key21] = $val22;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMapDataResult');
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 1);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataMap !== null) {
      if (!is_array($this->dataMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dataMap', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->dataMap));
        {
          foreach ($this->dataMap as $kiter23 => $viter24)
          {
            $xfer += $output->writeI32($kiter23);
            $xfer += $viter24->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMap !== null) {
      if (!is_array($this->errorMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errorMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::I32, count($this->errorMap));
        {
          foreach ($this->errorMap as $kiter25 => $viter26)
          {
            $xfer += $output->writeI32($kiter25);
            $xfer += $output->writeI32($viter26);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class stdprofile2_TUIDResult {
  static $_TSPEC;

  public $error = null;
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'TUIDResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TUIDResult');
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 1);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::I32, 2);
      $xfer += $output->writeI32($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class stdprofile2_TMapNameIDResult {
  static $_TSPEC;

  public $error = null;
  public $dataMap = null;
  public $errorMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'dataMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'errorMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['dataMap'])) {
        $this->dataMap = $vals['dataMap'];
      }
      if (isset($vals['errorMap'])) {
        $this->errorMap = $vals['errorMap'];
      }
    }
  }

  public function getName() {
    return 'TMapNameIDResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->dataMap = array();
            $_size27 = 0;
            $_ktype28 = 0;
            $_vtype29 = 0;
            $xfer += $input->readMapBegin($_ktype28, $_vtype29, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $key32 = '';
              $val33 = 0;
              $xfer += $input->readString($key32);
              $xfer += $input->readI32($val33);
              $this->dataMap[$key32] = $val33;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->errorMap = array();
            $_size34 = 0;
            $_ktype35 = 0;
            $_vtype36 = 0;
            $xfer += $input->readMapBegin($_ktype35, $_vtype36, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $key39 = '';
              $val40 = 0;
              $xfer += $input->readString($key39);
              $xfer += $input->readI32($val40);
              $this->errorMap[$key39] = $val40;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMapNameIDResult');
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 1);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataMap !== null) {
      if (!is_array($this->dataMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dataMap', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->dataMap));
        {
          foreach ($this->dataMap as $kiter41 => $viter42)
          {
            $xfer += $output->writeString($kiter41);
            $xfer += $output->writeI32($viter42);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMap !== null) {
      if (!is_array($this->errorMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errorMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->errorMap));
        {
          foreach ($this->errorMap as $kiter43 => $viter44)
          {
            $xfer += $output->writeString($kiter43);
            $xfer += $output->writeI32($viter44);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class stdprofile2_TMapNameErrorResult {
  static $_TSPEC;

  public $error = null;
  public $errorMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['errorMap'])) {
        $this->errorMap = $vals['errorMap'];
      }
    }
  }

  public function getName() {
    return 'TMapNameErrorResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->errorMap = array();
            $_size45 = 0;
            $_ktype46 = 0;
            $_vtype47 = 0;
            $xfer += $input->readMapBegin($_ktype46, $_vtype47, $_size45);
            for ($_i49 = 0; $_i49 < $_size45; ++$_i49)
            {
              $key50 = '';
              $val51 = 0;
              $xfer += $input->readString($key50);
              $xfer += $input->readI32($val51);
              $this->errorMap[$key50] = $val51;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMapNameErrorResult');
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 1);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMap !== null) {
      if (!is_array($this->errorMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errorMap', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->errorMap));
        {
          foreach ($this->errorMap as $kiter52 => $viter53)
          {
            $xfer += $output->writeString($kiter52);
            $xfer += $output->writeI32($viter53);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class stdprofile2_TMapNameDataResult {
  static $_TSPEC;

  public $error = null;
  public $dataMap = null;
  public $errorMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'dataMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'stdprofile2_TValue',
            ),
          ),
        3 => array(
          'var' => 'errorMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['dataMap'])) {
        $this->dataMap = $vals['dataMap'];
      }
      if (isset($vals['errorMap'])) {
        $this->errorMap = $vals['errorMap'];
      }
    }
  }

  public function getName() {
    return 'TMapNameDataResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->dataMap = array();
            $_size54 = 0;
            $_ktype55 = 0;
            $_vtype56 = 0;
            $xfer += $input->readMapBegin($_ktype55, $_vtype56, $_size54);
            for ($_i58 = 0; $_i58 < $_size54; ++$_i58)
            {
              $key59 = '';
              $val60 = new stdprofile2_TValue();
              $xfer += $input->readString($key59);
              $val60 = new stdprofile2_TValue();
              $xfer += $val60->read($input);
              $this->dataMap[$key59] = $val60;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->errorMap = array();
            $_size61 = 0;
            $_ktype62 = 0;
            $_vtype63 = 0;
            $xfer += $input->readMapBegin($_ktype62, $_vtype63, $_size61);
            for ($_i65 = 0; $_i65 < $_size61; ++$_i65)
            {
              $key66 = '';
              $val67 = 0;
              $xfer += $input->readString($key66);
              $xfer += $input->readI32($val67);
              $this->errorMap[$key66] = $val67;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMapNameDataResult');
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 1);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataMap !== null) {
      if (!is_array($this->dataMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dataMap', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->dataMap));
        {
          foreach ($this->dataMap as $kiter68 => $viter69)
          {
            $xfer += $output->writeString($kiter68);
            $xfer += $viter69->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMap !== null) {
      if (!is_array($this->errorMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errorMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->errorMap));
        {
          foreach ($this->errorMap as $kiter70 => $viter71)
          {
            $xfer += $output->writeString($kiter70);
            $xfer += $output->writeI32($viter71);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
