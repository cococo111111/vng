<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
//include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['LOCAL_LIB_PACKAGES_DIR'].'/ContentFilter/ContentFilter_types.php';

interface ContentFilterServiceIf {
  public function add($data);
  public function get_paging($systemId, $appId, $fromdate, $todate, $page, $count);
  public function filter($systemId, $appId, $toUserId, $keyWord, $resultSize, $offset);
  public function approve($systemId, $appId, $objectContent);
  public function remove($systemId, $appId, $objectContent);
  public function remove_multi($systemId, $appId, $objectContent);
  public function approve_multi($systemId, $appId, $objectContent);
}

class ContentFilterServiceClient implements ContentFilterServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function add($data)
  {
    $this->send_add($data);
  }

  public function send_add($data)
  {
    $args = new contentfilter_ContentFilterService_add_args();
    $args->data = $data;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function get_paging($systemId, $appId, $fromdate, $todate, $page, $count)
  {
    $this->send_get_paging($systemId, $appId, $fromdate, $todate, $page, $count);
    return $this->recv_get_paging();
  }

  public function send_get_paging($systemId, $appId, $fromdate, $todate, $page, $count)
  {
    $args = new contentfilter_ContentFilterService_get_paging_args();
    $args->systemId = $systemId;
    $args->appId = $appId;
    $args->fromdate = $fromdate;
    $args->todate = $todate;
    $args->page = $page;
    $args->count = $count;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_paging', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_paging', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_paging()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'contentfilter_ContentFilterService_get_paging_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new contentfilter_ContentFilterService_get_paging_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("get_paging failed: unknown result");
  }

  public function filter($systemId, $appId, $toUserId, $keyWord, $resultSize, $offset)
  {
    $this->send_filter($systemId, $appId, $toUserId, $keyWord, $resultSize, $offset);
    return $this->recv_filter();
  }

  public function send_filter($systemId, $appId, $toUserId, $keyWord, $resultSize, $offset)
  {
    $args = new contentfilter_ContentFilterService_filter_args();
    $args->systemId = $systemId;
    $args->appId = $appId;
    $args->toUserId = $toUserId;
    $args->keyWord = $keyWord;
    $args->resultSize = $resultSize;
    $args->offset = $offset;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'filter', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('filter', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_filter()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'contentfilter_ContentFilterService_filter_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new contentfilter_ContentFilterService_filter_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("filter failed: unknown result");
  }

  public function approve($systemId, $appId, $objectContent)
  {
    $this->send_approve($systemId, $appId, $objectContent);
  }

  public function send_approve($systemId, $appId, $objectContent)
  {
    $args = new contentfilter_ContentFilterService_approve_args();
    $args->systemId = $systemId;
    $args->appId = $appId;
    $args->objectContent = $objectContent;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'approve', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('approve', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function remove($systemId, $appId, $objectContent)
  {
    $this->send_remove($systemId, $appId, $objectContent);
  }

  public function send_remove($systemId, $appId, $objectContent)
  {
    $args = new contentfilter_ContentFilterService_remove_args();
    $args->systemId = $systemId;
    $args->appId = $appId;
    $args->objectContent = $objectContent;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function remove_multi($systemId, $appId, $objectContent)
  {
    $this->send_remove_multi($systemId, $appId, $objectContent);
  }

  public function send_remove_multi($systemId, $appId, $objectContent)
  {
    $args = new contentfilter_ContentFilterService_remove_multi_args();
    $args->systemId = $systemId;
    $args->appId = $appId;
    $args->objectContent = $objectContent;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove_multi', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove_multi', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function approve_multi($systemId, $appId, $objectContent)
  {
    $this->send_approve_multi($systemId, $appId, $objectContent);
  }

  public function send_approve_multi($systemId, $appId, $objectContent)
  {
    $args = new contentfilter_ContentFilterService_approve_multi_args();
    $args->systemId = $systemId;
    $args->appId = $appId;
    $args->objectContent = $objectContent;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'approve_multi', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('approve_multi', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class contentfilter_ContentFilterService_add_args {
  static $_TSPEC;

  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => 'contentfilter_ContentFilterData',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'ContentFilterService_add_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->data = new contentfilter_ContentFilterData();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentFilterService_add_args');
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 1);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class contentfilter_ContentFilterService_get_paging_args {
  static $_TSPEC;

  public $systemId = null;
  public $appId = null;
  public $fromdate = null;
  public $todate = null;
  public $page = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'systemId',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'appId',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'fromdate',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'todate',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['systemId'])) {
        $this->systemId = $vals['systemId'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['fromdate'])) {
        $this->fromdate = $vals['fromdate'];
      }
      if (isset($vals['todate'])) {
        $this->todate = $vals['todate'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'ContentFilterService_get_paging_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->systemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromdate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->todate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentFilterService_get_paging_args');
    if ($this->systemId !== null) {
      $xfer += $output->writeFieldBegin('systemId', TType::I16, 1);
      $xfer += $output->writeI16($this->systemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I16, 2);
      $xfer += $output->writeI16($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromdate !== null) {
      $xfer += $output->writeFieldBegin('fromdate', TType::I32, 3);
      $xfer += $output->writeI32($this->fromdate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->todate !== null) {
      $xfer += $output->writeFieldBegin('todate', TType::I32, 4);
      $xfer += $output->writeI32($this->todate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 5);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 6);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class contentfilter_ContentFilterService_get_paging_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'contentfilter_ContentFilterData',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'ContentFilterService_get_paging_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new contentfilter_ContentFilterData();
              $xfer += $elem12->read($input);
              $this->success []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentFilterService_get_paging_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class contentfilter_ContentFilterService_filter_args {
  static $_TSPEC;

  public $systemId = null;
  public $appId = null;
  public $toUserId = null;
  public $keyWord = null;
  public $resultSize = null;
  public $offset = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'systemId',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'appId',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'toUserId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'keyWord',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultSize',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'offset',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['systemId'])) {
        $this->systemId = $vals['systemId'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['toUserId'])) {
        $this->toUserId = $vals['toUserId'];
      }
      if (isset($vals['keyWord'])) {
        $this->keyWord = $vals['keyWord'];
      }
      if (isset($vals['resultSize'])) {
        $this->resultSize = $vals['resultSize'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
    }
  }

  public function getName() {
    return 'ContentFilterService_filter_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->systemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->keyWord);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->resultSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentFilterService_filter_args');
    if ($this->systemId !== null) {
      $xfer += $output->writeFieldBegin('systemId', TType::I16, 1);
      $xfer += $output->writeI16($this->systemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I16, 2);
      $xfer += $output->writeI16($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toUserId !== null) {
      $xfer += $output->writeFieldBegin('toUserId', TType::I32, 3);
      $xfer += $output->writeI32($this->toUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keyWord !== null) {
      $xfer += $output->writeFieldBegin('keyWord', TType::STRING, 4);
      $xfer += $output->writeString($this->keyWord);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultSize !== null) {
      $xfer += $output->writeFieldBegin('resultSize', TType::I16, 5);
      $xfer += $output->writeI16($this->resultSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I16, 6);
      $xfer += $output->writeI16($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class contentfilter_ContentFilterService_filter_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'contentfilter_FilterResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'ContentFilterService_filter_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new contentfilter_FilterResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentFilterService_filter_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class contentfilter_ContentFilterService_approve_args {
  static $_TSPEC;

  public $systemId = null;
  public $appId = null;
  public $objectContent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'systemId',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'appId',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'objectContent',
          'type' => TType::STRUCT,
          'class' => 'contentfilter_ObjectContent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['systemId'])) {
        $this->systemId = $vals['systemId'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['objectContent'])) {
        $this->objectContent = $vals['objectContent'];
      }
    }
  }

  public function getName() {
    return 'ContentFilterService_approve_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->systemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->objectContent = new contentfilter_ObjectContent();
            $xfer += $this->objectContent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentFilterService_approve_args');
    if ($this->systemId !== null) {
      $xfer += $output->writeFieldBegin('systemId', TType::I16, 1);
      $xfer += $output->writeI16($this->systemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I16, 2);
      $xfer += $output->writeI16($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objectContent !== null) {
      if (!is_object($this->objectContent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objectContent', TType::STRUCT, 3);
      $xfer += $this->objectContent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class contentfilter_ContentFilterService_remove_args {
  static $_TSPEC;

  public $systemId = null;
  public $appId = null;
  public $objectContent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'systemId',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'appId',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'objectContent',
          'type' => TType::STRUCT,
          'class' => 'contentfilter_ObjectContent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['systemId'])) {
        $this->systemId = $vals['systemId'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['objectContent'])) {
        $this->objectContent = $vals['objectContent'];
      }
    }
  }

  public function getName() {
    return 'ContentFilterService_remove_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->systemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->objectContent = new contentfilter_ObjectContent();
            $xfer += $this->objectContent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentFilterService_remove_args');
    if ($this->systemId !== null) {
      $xfer += $output->writeFieldBegin('systemId', TType::I16, 1);
      $xfer += $output->writeI16($this->systemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I16, 2);
      $xfer += $output->writeI16($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objectContent !== null) {
      if (!is_object($this->objectContent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objectContent', TType::STRUCT, 3);
      $xfer += $this->objectContent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class contentfilter_ContentFilterService_remove_multi_args {
  static $_TSPEC;

  public $systemId = null;
  public $appId = null;
  public $objectContent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'systemId',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'appId',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'objectContent',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'contentfilter_ObjectContent',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['systemId'])) {
        $this->systemId = $vals['systemId'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['objectContent'])) {
        $this->objectContent = $vals['objectContent'];
      }
    }
  }

  public function getName() {
    return 'ContentFilterService_remove_multi_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->systemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->objectContent = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new contentfilter_ObjectContent();
              $xfer += $elem19->read($input);
              $this->objectContent []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentFilterService_remove_multi_args');
    if ($this->systemId !== null) {
      $xfer += $output->writeFieldBegin('systemId', TType::I16, 1);
      $xfer += $output->writeI16($this->systemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I16, 2);
      $xfer += $output->writeI16($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objectContent !== null) {
      if (!is_array($this->objectContent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objectContent', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->objectContent));
        {
          foreach ($this->objectContent as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class contentfilter_ContentFilterService_approve_multi_args {
  static $_TSPEC;

  public $systemId = null;
  public $appId = null;
  public $objectContent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'systemId',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'appId',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'objectContent',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'contentfilter_ObjectContent',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['systemId'])) {
        $this->systemId = $vals['systemId'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['objectContent'])) {
        $this->objectContent = $vals['objectContent'];
      }
    }
  }

  public function getName() {
    return 'ContentFilterService_approve_multi_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->systemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->objectContent = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new contentfilter_ObjectContent();
              $xfer += $elem26->read($input);
              $this->objectContent []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentFilterService_approve_multi_args');
    if ($this->systemId !== null) {
      $xfer += $output->writeFieldBegin('systemId', TType::I16, 1);
      $xfer += $output->writeI16($this->systemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I16, 2);
      $xfer += $output->writeI16($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objectContent !== null) {
      if (!is_array($this->objectContent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objectContent', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->objectContent));
        {
          foreach ($this->objectContent as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>