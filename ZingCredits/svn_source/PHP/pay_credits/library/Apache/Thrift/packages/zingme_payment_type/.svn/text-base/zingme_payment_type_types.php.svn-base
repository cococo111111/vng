<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['vng_zingme_payment_thrift_E_TTokenResCode'] = array(
  'ZC_TK_RESCODE_SUCCESS' => 0,
  'ZC_TK_RESCODE_UNKNOWN' => 1,
  'ZC_TK_RESCODE_EXPIRE' => 2,
  'ZC_TK_RESCODE_NOT_EXIST' => 3,
);

final class vng_zingme_payment_thrift_TTokenResCode {
  const ZC_TK_RESCODE_SUCCESS = 0;
  const ZC_TK_RESCODE_UNKNOWN = 1;
  const ZC_TK_RESCODE_EXPIRE = 2;
  const ZC_TK_RESCODE_NOT_EXIST = 3;
  static public $__names = array(
    0 => 'ZC_TK_RESCODE_SUCCESS',
    1 => 'ZC_TK_RESCODE_UNKNOWN',
    2 => 'ZC_TK_RESCODE_EXPIRE',
    3 => 'ZC_TK_RESCODE_NOT_EXIST',
  );
}

class vng_zingme_payment_thrift_T_Response {
  static $_TSPEC;

  public $code = null;
  public $refNo = null;
  public $mac = null;
  public $mxuBalance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'refNo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mac',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'mxuBalance',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['refNo'])) {
        $this->refNo = $vals['refNo'];
      }
      if (isset($vals['mac'])) {
        $this->mac = $vals['mac'];
      }
      if (isset($vals['mxuBalance'])) {
        $this->mxuBalance = $vals['mxuBalance'];
      }
    }
  }

  public function getName() {
    return 'T_Response';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mac);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->mxuBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('T_Response');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refNo !== null) {
      $xfer += $output->writeFieldBegin('refNo', TType::STRING, 2);
      $xfer += $output->writeString($this->refNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mac !== null) {
      $xfer += $output->writeFieldBegin('mac', TType::STRING, 3);
      $xfer += $output->writeString($this->mac);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mxuBalance !== null) {
      $xfer += $output->writeFieldBegin('mxuBalance', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->mxuBalance);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vng_zingme_payment_thrift_T_AccResponse {
  static $_TSPEC;

  public $code = null;
  public $currentBalance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'currentBalance',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['currentBalance'])) {
        $this->currentBalance = $vals['currentBalance'];
      }
    }
  }

  public function getName() {
    return 'T_AccResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->currentBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('T_AccResponse');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentBalance !== null) {
      $xfer += $output->writeFieldBegin('currentBalance', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->currentBalance);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vng_zingme_payment_thrift_T_Transaction {
  static $_TSPEC;

  public $txID = null;
  public $txType = null;
  public $txTime = null;
  public $txLocalTime = null;
  public $userID = null;
  public $userName = null;
  public $currentBalance = null;
  public $amount = null;
  public $agentID = null;
  public $refID = null;
  public $itemIDs = null;
  public $itemNames = null;
  public $itemPrices = null;
  public $itemQuantities = null;
  public $mac = null;
  public $responseCode = null;
  public $description = null;
  public $clientIP = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'txID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'txType',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'txTime',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'txLocalTime',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'userID',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'currentBalance',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'agentID',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'refID',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'itemIDs',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'itemNames',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'itemPrices',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'itemQuantities',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'mac',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'responseCode',
          'type' => TType::I16,
          ),
        17 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'clientIP',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['txID'])) {
        $this->txID = $vals['txID'];
      }
      if (isset($vals['txType'])) {
        $this->txType = $vals['txType'];
      }
      if (isset($vals['txTime'])) {
        $this->txTime = $vals['txTime'];
      }
      if (isset($vals['txLocalTime'])) {
        $this->txLocalTime = $vals['txLocalTime'];
      }
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
      if (isset($vals['currentBalance'])) {
        $this->currentBalance = $vals['currentBalance'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['agentID'])) {
        $this->agentID = $vals['agentID'];
      }
      if (isset($vals['refID'])) {
        $this->refID = $vals['refID'];
      }
      if (isset($vals['itemIDs'])) {
        $this->itemIDs = $vals['itemIDs'];
      }
      if (isset($vals['itemNames'])) {
        $this->itemNames = $vals['itemNames'];
      }
      if (isset($vals['itemPrices'])) {
        $this->itemPrices = $vals['itemPrices'];
      }
      if (isset($vals['itemQuantities'])) {
        $this->itemQuantities = $vals['itemQuantities'];
      }
      if (isset($vals['mac'])) {
        $this->mac = $vals['mac'];
      }
      if (isset($vals['responseCode'])) {
        $this->responseCode = $vals['responseCode'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['clientIP'])) {
        $this->clientIP = $vals['clientIP'];
      }
    }
  }

  public function getName() {
    return 'T_Transaction';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->txID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->txType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->txTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->txLocalTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->currentBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->agentID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemIDs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemNames);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemPrices);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemQuantities);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mac);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->responseCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientIP);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('T_Transaction');
    if ($this->txID !== null) {
      $xfer += $output->writeFieldBegin('txID', TType::I64, 1);
      $xfer += $output->writeI64($this->txID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->txType !== null) {
      $xfer += $output->writeFieldBegin('txType', TType::I16, 2);
      $xfer += $output->writeI16($this->txType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->txTime !== null) {
      $xfer += $output->writeFieldBegin('txTime', TType::I32, 3);
      $xfer += $output->writeI32($this->txTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->txLocalTime !== null) {
      $xfer += $output->writeFieldBegin('txLocalTime', TType::I32, 4);
      $xfer += $output->writeI32($this->txLocalTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I32, 5);
      $xfer += $output->writeI32($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 6);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentBalance !== null) {
      $xfer += $output->writeFieldBegin('currentBalance', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->currentBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agentID !== null) {
      $xfer += $output->writeFieldBegin('agentID', TType::STRING, 9);
      $xfer += $output->writeString($this->agentID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refID !== null) {
      $xfer += $output->writeFieldBegin('refID', TType::STRING, 10);
      $xfer += $output->writeString($this->refID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemIDs !== null) {
      $xfer += $output->writeFieldBegin('itemIDs', TType::STRING, 11);
      $xfer += $output->writeString($this->itemIDs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemNames !== null) {
      $xfer += $output->writeFieldBegin('itemNames', TType::STRING, 12);
      $xfer += $output->writeString($this->itemNames);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemPrices !== null) {
      $xfer += $output->writeFieldBegin('itemPrices', TType::STRING, 13);
      $xfer += $output->writeString($this->itemPrices);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemQuantities !== null) {
      $xfer += $output->writeFieldBegin('itemQuantities', TType::STRING, 14);
      $xfer += $output->writeString($this->itemQuantities);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mac !== null) {
      $xfer += $output->writeFieldBegin('mac', TType::STRING, 15);
      $xfer += $output->writeString($this->mac);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->responseCode !== null) {
      $xfer += $output->writeFieldBegin('responseCode', TType::I16, 16);
      $xfer += $output->writeI16($this->responseCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 17);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientIP !== null) {
      $xfer += $output->writeFieldBegin('clientIP', TType::STRING, 18);
      $xfer += $output->writeString($this->clientIP);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vng_zingme_payment_thrift_T_Account {
  static $_TSPEC;

  public $userID = null;
  public $currentBalance = null;
  public $amount = null;
  public $txID = null;
  public $txType = null;
  public $agentID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'currentBalance',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'txID',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'txType',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'agentID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['currentBalance'])) {
        $this->currentBalance = $vals['currentBalance'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['txID'])) {
        $this->txID = $vals['txID'];
      }
      if (isset($vals['txType'])) {
        $this->txType = $vals['txType'];
      }
      if (isset($vals['agentID'])) {
        $this->agentID = $vals['agentID'];
      }
    }
  }

  public function getName() {
    return 'T_Account';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->currentBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->txID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->txType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->agentID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('T_Account');
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I32, 1);
      $xfer += $output->writeI32($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentBalance !== null) {
      $xfer += $output->writeFieldBegin('currentBalance', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->currentBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->txID !== null) {
      $xfer += $output->writeFieldBegin('txID', TType::I64, 4);
      $xfer += $output->writeI64($this->txID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->txType !== null) {
      $xfer += $output->writeFieldBegin('txType', TType::I16, 5);
      $xfer += $output->writeI16($this->txType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agentID !== null) {
      $xfer += $output->writeFieldBegin('agentID', TType::STRING, 6);
      $xfer += $output->writeString($this->agentID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vng_zingme_payment_thrift_T_Stat {
  static $_TSPEC;

  public $txID = null;
  public $stat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'txID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'stat',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['txID'])) {
        $this->txID = $vals['txID'];
      }
      if (isset($vals['stat'])) {
        $this->stat = $vals['stat'];
      }
    }
  }

  public function getName() {
    return 'T_Stat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->txID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('T_Stat');
    if ($this->txID !== null) {
      $xfer += $output->writeFieldBegin('txID', TType::STRING, 1);
      $xfer += $output->writeString($this->txID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stat !== null) {
      $xfer += $output->writeFieldBegin('stat', TType::STRING, 2);
      $xfer += $output->writeString($this->stat);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vng_zingme_payment_thrift_T_Token {
  static $_TSPEC;

  public $pToken = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pToken',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pToken'])) {
        $this->pToken = $vals['pToken'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
    }
  }

  public function getName() {
    return 'T_Token';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('T_Token');
    if ($this->pToken !== null) {
      $xfer += $output->writeFieldBegin('pToken', TType::STRING, 1);
      $xfer += $output->writeString($this->pToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vng_zingme_payment_thrift_T_AppInfo {
  static $_TSPEC;

  public $appID = null;
  public $appName = null;
  public $appDes = null;
  public $appURL = null;
  public $iconPath = null;
  public $restURL = null;
  public $key1 = null;
  public $key2 = null;
  public $isEnabled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'appName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appDes',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'appURL',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'iconPath',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'restURL',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'key1',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'key2',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'isEnabled',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['appName'])) {
        $this->appName = $vals['appName'];
      }
      if (isset($vals['appDes'])) {
        $this->appDes = $vals['appDes'];
      }
      if (isset($vals['appURL'])) {
        $this->appURL = $vals['appURL'];
      }
      if (isset($vals['iconPath'])) {
        $this->iconPath = $vals['iconPath'];
      }
      if (isset($vals['restURL'])) {
        $this->restURL = $vals['restURL'];
      }
      if (isset($vals['key1'])) {
        $this->key1 = $vals['key1'];
      }
      if (isset($vals['key2'])) {
        $this->key2 = $vals['key2'];
      }
      if (isset($vals['isEnabled'])) {
        $this->isEnabled = $vals['isEnabled'];
      }
    }
  }

  public function getName() {
    return 'T_AppInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appDes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appURL);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->restURL);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->isEnabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('T_AppInfo');
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 1);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appName !== null) {
      $xfer += $output->writeFieldBegin('appName', TType::STRING, 2);
      $xfer += $output->writeString($this->appName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appDes !== null) {
      $xfer += $output->writeFieldBegin('appDes', TType::STRING, 3);
      $xfer += $output->writeString($this->appDes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appURL !== null) {
      $xfer += $output->writeFieldBegin('appURL', TType::STRING, 4);
      $xfer += $output->writeString($this->appURL);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconPath !== null) {
      $xfer += $output->writeFieldBegin('iconPath', TType::STRING, 5);
      $xfer += $output->writeString($this->iconPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->restURL !== null) {
      $xfer += $output->writeFieldBegin('restURL', TType::STRING, 6);
      $xfer += $output->writeString($this->restURL);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key1 !== null) {
      $xfer += $output->writeFieldBegin('key1', TType::STRING, 7);
      $xfer += $output->writeString($this->key1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key2 !== null) {
      $xfer += $output->writeFieldBegin('key2', TType::STRING, 8);
      $xfer += $output->writeString($this->key2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isEnabled !== null) {
      $xfer += $output->writeFieldBegin('isEnabled', TType::BYTE, 9);
      $xfer += $output->writeByte($this->isEnabled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vng_zingme_payment_thrift_T_TranStat {
  static $_TSPEC;

  public $txID = null;
  public $txStatus = null;
  public $resultCode = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'txID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'txStatus',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'resultCode',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['txID'])) {
        $this->txID = $vals['txID'];
      }
      if (isset($vals['txStatus'])) {
        $this->txStatus = $vals['txStatus'];
      }
      if (isset($vals['resultCode'])) {
        $this->resultCode = $vals['resultCode'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'T_TranStat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->txID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->txStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->resultCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('T_TranStat');
    if ($this->txID !== null) {
      $xfer += $output->writeFieldBegin('txID', TType::I64, 1);
      $xfer += $output->writeI64($this->txID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->txStatus !== null) {
      $xfer += $output->writeFieldBegin('txStatus', TType::I16, 2);
      $xfer += $output->writeI16($this->txStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultCode !== null) {
      $xfer += $output->writeFieldBegin('resultCode', TType::I16, 3);
      $xfer += $output->writeI16($this->resultCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 4);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vng_zingme_payment_thrift_T_ReportTransaction {
  static $_TSPEC;

  public $txID = null;
  public $txType = null;
  public $txTime = null;
  public $txLocalTime = null;
  public $currentBalance = null;
  public $amount = null;
  public $agentID = null;
  public $refID = null;
  public $txStatus = null;
  public $resultCode = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'txID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'txType',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'txTime',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'txLocalTime',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'currentBalance',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'agentID',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'refID',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'txStatus',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'resultCode',
          'type' => TType::I16,
          ),
        11 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['txID'])) {
        $this->txID = $vals['txID'];
      }
      if (isset($vals['txType'])) {
        $this->txType = $vals['txType'];
      }
      if (isset($vals['txTime'])) {
        $this->txTime = $vals['txTime'];
      }
      if (isset($vals['txLocalTime'])) {
        $this->txLocalTime = $vals['txLocalTime'];
      }
      if (isset($vals['currentBalance'])) {
        $this->currentBalance = $vals['currentBalance'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['agentID'])) {
        $this->agentID = $vals['agentID'];
      }
      if (isset($vals['refID'])) {
        $this->refID = $vals['refID'];
      }
      if (isset($vals['txStatus'])) {
        $this->txStatus = $vals['txStatus'];
      }
      if (isset($vals['resultCode'])) {
        $this->resultCode = $vals['resultCode'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'T_ReportTransaction';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->txID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->txType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->txTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->txLocalTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->currentBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->agentID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->txStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->resultCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('T_ReportTransaction');
    if ($this->txID !== null) {
      $xfer += $output->writeFieldBegin('txID', TType::I64, 1);
      $xfer += $output->writeI64($this->txID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->txType !== null) {
      $xfer += $output->writeFieldBegin('txType', TType::I16, 2);
      $xfer += $output->writeI16($this->txType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->txTime !== null) {
      $xfer += $output->writeFieldBegin('txTime', TType::I32, 3);
      $xfer += $output->writeI32($this->txTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->txLocalTime !== null) {
      $xfer += $output->writeFieldBegin('txLocalTime', TType::I32, 4);
      $xfer += $output->writeI32($this->txLocalTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentBalance !== null) {
      $xfer += $output->writeFieldBegin('currentBalance', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->currentBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agentID !== null) {
      $xfer += $output->writeFieldBegin('agentID', TType::STRING, 7);
      $xfer += $output->writeString($this->agentID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refID !== null) {
      $xfer += $output->writeFieldBegin('refID', TType::STRING, 8);
      $xfer += $output->writeString($this->refID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->txStatus !== null) {
      $xfer += $output->writeFieldBegin('txStatus', TType::I16, 9);
      $xfer += $output->writeI16($this->txStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultCode !== null) {
      $xfer += $output->writeFieldBegin('resultCode', TType::I16, 10);
      $xfer += $output->writeI16($this->resultCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 11);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
