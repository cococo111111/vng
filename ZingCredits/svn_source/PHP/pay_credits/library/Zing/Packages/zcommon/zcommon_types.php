<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['zcommon_E_ECode'] = array(
  'SUCCESS' => 0,
  'FAIL' => 1,
  'EXCEPTION' => 2,
  'NULL_PTR' => 3,
  'INVALID_PARAM' => 4,
  'INVALID_DATA' => 5,
  'INVALID_OPERATION' => 6,
  'NOT_FOUND' => 7,
  'OUT_RANGE' => 8,
  'NOT_EXIST' => 9,
  'ALREADY_EXIST' => 10,
  'C_EMPTY' => 11,
  'UNSUPPORTED' => 12,
  'UNLOADED' => 13,
  'TIMEOUT' => 14,
  'OVER_FLOW' => 15,
  'UNDER_FLOW' => 16,
  'NOT_SERVE' => 17,
  'NOT_PERMIT' => 18,
  'NOT_ALLOW' => 19,
  'UNREADABLE' => 20,
  'UNWRITABLE' => 21,
  'WRONG_AUTH' => 22,
  'NOT_CONNECTED' => 23,
  'BAD_CONNECTION' => 24,
  'LOW_MEM' => 25,
  'LOW_DISK_SPACE' => 26,
  'REACH_MAX' => 27,
);

final class zcommon_ECode {
  const SUCCESS = 0;
  const FAIL = 1;
  const EXCEPTION = 2;
  const NULL_PTR = 3;
  const INVALID_PARAM = 4;
  const INVALID_DATA = 5;
  const INVALID_OPERATION = 6;
  const NOT_FOUND = 7;
  const OUT_RANGE = 8;
  const NOT_EXIST = 9;
  const ALREADY_EXIST = 10;
  const C_EMPTY = 11;
  const UNSUPPORTED = 12;
  const UNLOADED = 13;
  const TIMEOUT = 14;
  const OVER_FLOW = 15;
  const UNDER_FLOW = 16;
  const NOT_SERVE = 17;
  const NOT_PERMIT = 18;
  const NOT_ALLOW = 19;
  const UNREADABLE = 20;
  const UNWRITABLE = 21;
  const WRONG_AUTH = 22;
  const NOT_CONNECTED = 23;
  const BAD_CONNECTION = 24;
  const LOW_MEM = 25;
  const LOW_DISK_SPACE = 26;
  const REACH_MAX = 27;
  static public $__names = array(
    0 => 'SUCCESS',
    1 => 'FAIL',
    2 => 'EXCEPTION',
    3 => 'NULL_PTR',
    4 => 'INVALID_PARAM',
    5 => 'INVALID_DATA',
    6 => 'INVALID_OPERATION',
    7 => 'NOT_FOUND',
    8 => 'OUT_RANGE',
    9 => 'NOT_EXIST',
    10 => 'ALREADY_EXIST',
    11 => 'C_EMPTY',
    12 => 'UNSUPPORTED',
    13 => 'UNLOADED',
    14 => 'TIMEOUT',
    15 => 'OVER_FLOW',
    16 => 'UNDER_FLOW',
    17 => 'NOT_SERVE',
    18 => 'NOT_PERMIT',
    19 => 'NOT_ALLOW',
    20 => 'UNREADABLE',
    21 => 'UNWRITABLE',
    22 => 'WRONG_AUTH',
    23 => 'NOT_CONNECTED',
    24 => 'BAD_CONNECTION',
    25 => 'LOW_MEM',
    26 => 'LOW_DISK_SPACE',
    27 => 'REACH_MAX',
  );
}

$GLOBALS['zcommon_E_DataCommand'] = array(
  'ADD' => 1,
  'UPDATE' => 2,
  'ADD_OR_UDP' => 3,
  'DELETE' => 4,
);

final class zcommon_DataCommand {
  const ADD = 1;
  const UPDATE = 2;
  const ADD_OR_UDP = 3;
  const DELETE = 4;
  static public $__names = array(
    1 => 'ADD',
    2 => 'UPDATE',
    3 => 'ADD_OR_UDP',
    4 => 'DELETE',
  );
}

$GLOBALS['zcommon_E_PutPolicy'] = array(
  'ADD' => 1,
  'UPDATE' => 2,
  'ADD_OR_UDP' => 3,
);

final class zcommon_PutPolicy {
  const ADD = 1;
  const UPDATE = 2;
  const ADD_OR_UDP = 3;
  static public $__names = array(
    1 => 'ADD',
    2 => 'UPDATE',
    3 => 'ADD_OR_UDP',
  );
}

$GLOBALS['zcommon_E_OpReason'] = array(
  'CLI_REQ' => 0,
  'SVR_BK' => 1,
  'SVR_RS' => 2,
  'SVR_WU' => 3,
  'SVR_SYN' => 4,
  'SVR_REP' => 5,
  'PRX_FW' => 6,
);

final class zcommon_OpReason {
  const CLI_REQ = 0;
  const SVR_BK = 1;
  const SVR_RS = 2;
  const SVR_WU = 3;
  const SVR_SYN = 4;
  const SVR_REP = 5;
  const PRX_FW = 6;
  static public $__names = array(
    0 => 'CLI_REQ',
    1 => 'SVR_BK',
    2 => 'SVR_RS',
    3 => 'SVR_WU',
    4 => 'SVR_SYN',
    5 => 'SVR_REP',
    6 => 'PRX_FW',
  );
}

$GLOBALS['zcommon_E_TServiceState'] = array(
  'Begin' => 0,
  'Initialized' => 1,
  'Running' => 2,
  'Stopped' => 3,
  'Terminated' => 4,
);

final class zcommon_TServiceState {
  const Begin = 0;
  const Initialized = 1;
  const Running = 2;
  const Stopped = 3;
  const Terminated = 4;
  static public $__names = array(
    0 => 'Begin',
    1 => 'Initialized',
    2 => 'Running',
    3 => 'Stopped',
    4 => 'Terminated',
  );
}

class zcommon_ZException extends TException {
  static $_TSPEC;

  public $error = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ZException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ZException');
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 1);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class zcommon_OpHandle {
  static $_TSPEC;

  public $source = null;
  public $auth = null;
  public $reason = null;
  public $seq = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'auth',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'reason',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'seq',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['auth'])) {
        $this->auth = $vals['auth'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['seq'])) {
        $this->seq = $vals['seq'];
      }
    }
  }

  public function getName() {
    return 'OpHandle';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->auth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OpHandle');
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::STRING, 1);
      $xfer += $output->writeString($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auth !== null) {
      $xfer += $output->writeFieldBegin('auth', TType::STRING, 2);
      $xfer += $output->writeString($this->auth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::I32, 3);
      $xfer += $output->writeI32($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seq !== null) {
      $xfer += $output->writeFieldBegin('seq', TType::I32, 4);
      $xfer += $output->writeI32($this->seq);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class zcommon_TVersion {
  static $_TSPEC;

  public $verMajor = null;
  public $verMinor = null;
  public $verBuild = null;
  public $verRev = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'verMajor',
          'type' => TType::BYTE,
          ),
        2 => array(
          'var' => 'verMinor',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'verBuild',
          'type' => TType::BYTE,
          ),
        4 => array(
          'var' => 'verRev',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['verMajor'])) {
        $this->verMajor = $vals['verMajor'];
      }
      if (isset($vals['verMinor'])) {
        $this->verMinor = $vals['verMinor'];
      }
      if (isset($vals['verBuild'])) {
        $this->verBuild = $vals['verBuild'];
      }
      if (isset($vals['verRev'])) {
        $this->verRev = $vals['verRev'];
      }
    }
  }

  public function getName() {
    return 'TVersion';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->verMajor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->verMinor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->verBuild);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->verRev);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TVersion');
    if ($this->verMajor !== null) {
      $xfer += $output->writeFieldBegin('verMajor', TType::BYTE, 1);
      $xfer += $output->writeByte($this->verMajor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verMinor !== null) {
      $xfer += $output->writeFieldBegin('verMinor', TType::BYTE, 2);
      $xfer += $output->writeByte($this->verMinor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verBuild !== null) {
      $xfer += $output->writeFieldBegin('verBuild', TType::BYTE, 3);
      $xfer += $output->writeByte($this->verBuild);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verRev !== null) {
      $xfer += $output->writeFieldBegin('verRev', TType::BYTE, 4);
      $xfer += $output->writeByte($this->verRev);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class zcommon_TConnInfo {
  static $_TSPEC;

  public $address = null;
  public $port = null;
  public $framed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'framed',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['framed'])) {
        $this->framed = $vals['framed'];
      }
    }
  }

  public function getName() {
    return 'TConnInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->framed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConnInfo');
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 1);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 2);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->framed !== null) {
      $xfer += $output->writeFieldBegin('framed', TType::BOOL, 3);
      $xfer += $output->writeBool($this->framed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class zcommon_TAppInfo {
  static $_TSPEC;

  public $name = null;
  public $desc = null;
  public $version = null;
  public $connInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'version',
          'type' => TType::STRUCT,
          'class' => 'zcommon_TVersion',
          ),
        4 => array(
          'var' => 'connInfo',
          'type' => TType::STRUCT,
          'class' => 'zcommon_TConnInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['connInfo'])) {
        $this->connInfo = $vals['connInfo'];
      }
    }
  }

  public function getName() {
    return 'TAppInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->version = new zcommon_TVersion();
            $xfer += $this->version->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->connInfo = new zcommon_TConnInfo();
            $xfer += $this->connInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TAppInfo');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 2);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      if (!is_object($this->version)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('version', TType::STRUCT, 3);
      $xfer += $this->version->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connInfo !== null) {
      if (!is_object($this->connInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('connInfo', TType::STRUCT, 4);
      $xfer += $this->connInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
