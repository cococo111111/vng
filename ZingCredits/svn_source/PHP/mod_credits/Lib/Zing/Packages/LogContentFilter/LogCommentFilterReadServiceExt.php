<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['LOCAL_LIB_PACKAGES_DIR'].'/LogContentFilter/LogCommentFilter_types.php';
include_once $GLOBALS['LOCAL_LIB_PACKAGES_DIR'].'/LogContentFilter/LogCommentFilterReadService.php';

interface LogCommentFilterReadServiceExtIf extends LogCommentFilterReadServiceIf {
}

class LogCommentFilterReadServiceExtClient extends LogCommentFilterReadServiceClient implements LogCommentFilterReadServiceExtIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class LogCommentFilterReadServiceExtProcessor extends LogCommentFilterReadServiceProcessor {
  public function __construct($handler) {
    parent::__construct($handler);
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

}
?>
