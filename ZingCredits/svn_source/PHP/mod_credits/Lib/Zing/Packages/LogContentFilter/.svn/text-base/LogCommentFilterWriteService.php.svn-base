<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['LOCAL_LIB_PACKAGES_DIR'].'/LogContentFilter/LogCommentFilter_types.php';

interface LogCommentFilterWriteServiceIf {
  public function addLog($log);
  public function addMultiLog($logs);
}

class LogCommentFilterWriteServiceClient implements LogCommentFilterWriteServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function addLog($log)
  {
    $this->send_addLog($log);
  }

  public function send_addLog($log)
  {
    $args = new logcommentfilter_LogCommentFilterWriteService_addLog_args();
    $args->log = $log;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addLog', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addLog', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function addMultiLog($logs)
  {
    $this->send_addMultiLog($logs);
  }

  public function send_addMultiLog($logs)
  {
    $args = new logcommentfilter_LogCommentFilterWriteService_addMultiLog_args();
    $args->logs = $logs;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addMultiLog', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addMultiLog', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class logcommentfilter_LogCommentFilterWriteService_addLog_args {
  static $_TSPEC;

  public $log = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'log',
          'type' => TType::STRUCT,
          'class' => 'logcommentfilter_ZLog',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['log'])) {
        $this->log = $vals['log'];
      }
    }
  }

  public function getName() {
    return 'LogCommentFilterWriteService_addLog_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->log = new logcommentfilter_ZLog();
            $xfer += $this->log->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LogCommentFilterWriteService_addLog_args');
    if ($this->log !== null) {
      if (!is_object($this->log)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('log', TType::STRUCT, 1);
      $xfer += $this->log->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class logcommentfilter_LogCommentFilterWriteService_addMultiLog_args {
  static $_TSPEC;

  public $logs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'logs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'logcommentfilter_ZLog',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['logs'])) {
        $this->logs = $vals['logs'];
      }
    }
  }

  public function getName() {
    return 'LogCommentFilterWriteService_addMultiLog_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->logs = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new logcommentfilter_ZLog();
              $xfer += $elem19->read($input);
              $this->logs []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LogCommentFilterWriteService_addMultiLog_args');
    if ($this->logs !== null) {
      if (!is_array($this->logs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('logs', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->logs));
        {
          foreach ($this->logs as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LogCommentFilterWriteServiceProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_addLog($seqid, $input, $output) {
    $args = new logcommentfilter_LogCommentFilterWriteService_addLog_args();
    $args->read($input);
    $input->readMessageEnd();
    $this->handler_->addLog($args->log);
    return;
  }
  protected function process_addMultiLog($seqid, $input, $output) {
    $args = new logcommentfilter_LogCommentFilterWriteService_addMultiLog_args();
    $args->read($input);
    $input->readMessageEnd();
    $this->handler_->addMultiLog($args->logs);
    return;
  }
}
?>
