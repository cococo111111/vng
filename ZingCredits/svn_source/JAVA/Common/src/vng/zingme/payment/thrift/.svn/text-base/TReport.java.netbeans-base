/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package vng.zingme.payment.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TReport {

  public interface Iface {

    public List<vng.zingme.payment.thrift.T_ReportTransaction> getTransByApp(String appID, String startTime, String endTime, int tranxType, int startIndex, int numRow, int txStatus) throws TException;

    public List<vng.zingme.payment.thrift.T_ReportTransaction> getTransByUser(int userID, long txID, String startTime, String endTime, int startIndex, int numRow, int txStatus) throws TException;

    public List<vng.zingme.payment.thrift.T_ReportTransaction> getTransStatus(long txID, int localTime) throws TException;

    public vng.zingme.payment.thrift.T_ReportSummary summary(String appID, String startTime, String endTime) throws TException;

    public List<vng.zingme.payment.thrift.T_ReportSummary> summaryDaily(String appID, String startTime, String endTime) throws TException;

  }

  public interface AsyncIface {

    public void getTransByApp(String appID, String startTime, String endTime, int tranxType, int startIndex, int numRow, int txStatus, AsyncMethodCallback<AsyncClient.getTransByApp_call> resultHandler) throws TException;

    public void getTransByUser(int userID, long txID, String startTime, String endTime, int startIndex, int numRow, int txStatus, AsyncMethodCallback<AsyncClient.getTransByUser_call> resultHandler) throws TException;

    public void getTransStatus(long txID, int localTime, AsyncMethodCallback<AsyncClient.getTransStatus_call> resultHandler) throws TException;

    public void summary(String appID, String startTime, String endTime, AsyncMethodCallback<AsyncClient.summary_call> resultHandler) throws TException;

    public void summaryDaily(String appID, String startTime, String endTime, AsyncMethodCallback<AsyncClient.summaryDaily_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public List<vng.zingme.payment.thrift.T_ReportTransaction> getTransByApp(String appID, String startTime, String endTime, int tranxType, int startIndex, int numRow, int txStatus) throws TException
    {
      send_getTransByApp(appID, startTime, endTime, tranxType, startIndex, numRow, txStatus);
      return recv_getTransByApp();
    }

    public void send_getTransByApp(String appID, String startTime, String endTime, int tranxType, int startIndex, int numRow, int txStatus) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getTransByApp", TMessageType.CALL, ++seqid_));
      getTransByApp_args args = new getTransByApp_args();
      args.setAppID(appID);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setTranxType(tranxType);
      args.setStartIndex(startIndex);
      args.setNumRow(numRow);
      args.setTxStatus(txStatus);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<vng.zingme.payment.thrift.T_ReportTransaction> recv_getTransByApp() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getTransByApp failed: out of sequence response");
      }
      getTransByApp_result result = new getTransByApp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getTransByApp failed: unknown result");
    }

    public List<vng.zingme.payment.thrift.T_ReportTransaction> getTransByUser(int userID, long txID, String startTime, String endTime, int startIndex, int numRow, int txStatus) throws TException
    {
      send_getTransByUser(userID, txID, startTime, endTime, startIndex, numRow, txStatus);
      return recv_getTransByUser();
    }

    public void send_getTransByUser(int userID, long txID, String startTime, String endTime, int startIndex, int numRow, int txStatus) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getTransByUser", TMessageType.CALL, ++seqid_));
      getTransByUser_args args = new getTransByUser_args();
      args.setUserID(userID);
      args.setTxID(txID);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setStartIndex(startIndex);
      args.setNumRow(numRow);
      args.setTxStatus(txStatus);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<vng.zingme.payment.thrift.T_ReportTransaction> recv_getTransByUser() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getTransByUser failed: out of sequence response");
      }
      getTransByUser_result result = new getTransByUser_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getTransByUser failed: unknown result");
    }

    public List<vng.zingme.payment.thrift.T_ReportTransaction> getTransStatus(long txID, int localTime) throws TException
    {
      send_getTransStatus(txID, localTime);
      return recv_getTransStatus();
    }

    public void send_getTransStatus(long txID, int localTime) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getTransStatus", TMessageType.CALL, ++seqid_));
      getTransStatus_args args = new getTransStatus_args();
      args.setTxID(txID);
      args.setLocalTime(localTime);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<vng.zingme.payment.thrift.T_ReportTransaction> recv_getTransStatus() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getTransStatus failed: out of sequence response");
      }
      getTransStatus_result result = new getTransStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getTransStatus failed: unknown result");
    }

    public vng.zingme.payment.thrift.T_ReportSummary summary(String appID, String startTime, String endTime) throws TException
    {
      send_summary(appID, startTime, endTime);
      return recv_summary();
    }

    public void send_summary(String appID, String startTime, String endTime) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("summary", TMessageType.CALL, ++seqid_));
      summary_args args = new summary_args();
      args.setAppID(appID);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public vng.zingme.payment.thrift.T_ReportSummary recv_summary() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "summary failed: out of sequence response");
      }
      summary_result result = new summary_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "summary failed: unknown result");
    }

    public List<vng.zingme.payment.thrift.T_ReportSummary> summaryDaily(String appID, String startTime, String endTime) throws TException
    {
      send_summaryDaily(appID, startTime, endTime);
      return recv_summaryDaily();
    }

    public void send_summaryDaily(String appID, String startTime, String endTime) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("summaryDaily", TMessageType.CALL, ++seqid_));
      summaryDaily_args args = new summaryDaily_args();
      args.setAppID(appID);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<vng.zingme.payment.thrift.T_ReportSummary> recv_summaryDaily() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "summaryDaily failed: out of sequence response");
      }
      summaryDaily_result result = new summaryDaily_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "summaryDaily failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTransByApp(String appID, String startTime, String endTime, int tranxType, int startIndex, int numRow, int txStatus, AsyncMethodCallback<getTransByApp_call> resultHandler) throws TException {
      checkReady();
      getTransByApp_call method_call = new getTransByApp_call(appID, startTime, endTime, tranxType, startIndex, numRow, txStatus, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getTransByApp_call extends TAsyncMethodCall {
      private String appID;
      private String startTime;
      private String endTime;
      private int tranxType;
      private int startIndex;
      private int numRow;
      private int txStatus;
      public getTransByApp_call(String appID, String startTime, String endTime, int tranxType, int startIndex, int numRow, int txStatus, AsyncMethodCallback<getTransByApp_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appID = appID;
        this.startTime = startTime;
        this.endTime = endTime;
        this.tranxType = tranxType;
        this.startIndex = startIndex;
        this.numRow = numRow;
        this.txStatus = txStatus;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getTransByApp", TMessageType.CALL, 0));
        getTransByApp_args args = new getTransByApp_args();
        args.setAppID(appID);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setTranxType(tranxType);
        args.setStartIndex(startIndex);
        args.setNumRow(numRow);
        args.setTxStatus(txStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.zingme.payment.thrift.T_ReportTransaction> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTransByApp();
      }
    }

    public void getTransByUser(int userID, long txID, String startTime, String endTime, int startIndex, int numRow, int txStatus, AsyncMethodCallback<getTransByUser_call> resultHandler) throws TException {
      checkReady();
      getTransByUser_call method_call = new getTransByUser_call(userID, txID, startTime, endTime, startIndex, numRow, txStatus, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getTransByUser_call extends TAsyncMethodCall {
      private int userID;
      private long txID;
      private String startTime;
      private String endTime;
      private int startIndex;
      private int numRow;
      private int txStatus;
      public getTransByUser_call(int userID, long txID, String startTime, String endTime, int startIndex, int numRow, int txStatus, AsyncMethodCallback<getTransByUser_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userID = userID;
        this.txID = txID;
        this.startTime = startTime;
        this.endTime = endTime;
        this.startIndex = startIndex;
        this.numRow = numRow;
        this.txStatus = txStatus;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getTransByUser", TMessageType.CALL, 0));
        getTransByUser_args args = new getTransByUser_args();
        args.setUserID(userID);
        args.setTxID(txID);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setStartIndex(startIndex);
        args.setNumRow(numRow);
        args.setTxStatus(txStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.zingme.payment.thrift.T_ReportTransaction> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTransByUser();
      }
    }

    public void getTransStatus(long txID, int localTime, AsyncMethodCallback<getTransStatus_call> resultHandler) throws TException {
      checkReady();
      getTransStatus_call method_call = new getTransStatus_call(txID, localTime, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getTransStatus_call extends TAsyncMethodCall {
      private long txID;
      private int localTime;
      public getTransStatus_call(long txID, int localTime, AsyncMethodCallback<getTransStatus_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.txID = txID;
        this.localTime = localTime;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getTransStatus", TMessageType.CALL, 0));
        getTransStatus_args args = new getTransStatus_args();
        args.setTxID(txID);
        args.setLocalTime(localTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.zingme.payment.thrift.T_ReportTransaction> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTransStatus();
      }
    }

    public void summary(String appID, String startTime, String endTime, AsyncMethodCallback<summary_call> resultHandler) throws TException {
      checkReady();
      summary_call method_call = new summary_call(appID, startTime, endTime, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class summary_call extends TAsyncMethodCall {
      private String appID;
      private String startTime;
      private String endTime;
      public summary_call(String appID, String startTime, String endTime, AsyncMethodCallback<summary_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appID = appID;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("summary", TMessageType.CALL, 0));
        summary_args args = new summary_args();
        args.setAppID(appID);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.zingme.payment.thrift.T_ReportSummary getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_summary();
      }
    }

    public void summaryDaily(String appID, String startTime, String endTime, AsyncMethodCallback<summaryDaily_call> resultHandler) throws TException {
      checkReady();
      summaryDaily_call method_call = new summaryDaily_call(appID, startTime, endTime, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class summaryDaily_call extends TAsyncMethodCall {
      private String appID;
      private String startTime;
      private String endTime;
      public summaryDaily_call(String appID, String startTime, String endTime, AsyncMethodCallback<summaryDaily_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appID = appID;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("summaryDaily", TMessageType.CALL, 0));
        summaryDaily_args args = new summaryDaily_args();
        args.setAppID(appID);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.zingme.payment.thrift.T_ReportSummary> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_summaryDaily();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getTransByApp", new getTransByApp());
      processMap_.put("getTransByUser", new getTransByUser());
      processMap_.put("getTransStatus", new getTransStatus());
      processMap_.put("summary", new summary());
      processMap_.put("summaryDaily", new summaryDaily());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getTransByApp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getTransByApp_args args = new getTransByApp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getTransByApp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getTransByApp_result result = new getTransByApp_result();
        result.success = iface_.getTransByApp(args.appID, args.startTime, args.endTime, args.tranxType, args.startIndex, args.numRow, args.txStatus);
        oprot.writeMessageBegin(new TMessage("getTransByApp", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getTransByUser implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getTransByUser_args args = new getTransByUser_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getTransByUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getTransByUser_result result = new getTransByUser_result();
        result.success = iface_.getTransByUser(args.userID, args.txID, args.startTime, args.endTime, args.startIndex, args.numRow, args.txStatus);
        oprot.writeMessageBegin(new TMessage("getTransByUser", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getTransStatus implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getTransStatus_args args = new getTransStatus_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getTransStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getTransStatus_result result = new getTransStatus_result();
        result.success = iface_.getTransStatus(args.txID, args.localTime);
        oprot.writeMessageBegin(new TMessage("getTransStatus", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class summary implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        summary_args args = new summary_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("summary", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        summary_result result = new summary_result();
        result.success = iface_.summary(args.appID, args.startTime, args.endTime);
        oprot.writeMessageBegin(new TMessage("summary", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class summaryDaily implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        summaryDaily_args args = new summaryDaily_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("summaryDaily", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        summaryDaily_result result = new summaryDaily_result();
        result.success = iface_.summaryDaily(args.appID, args.startTime, args.endTime);
        oprot.writeMessageBegin(new TMessage("summaryDaily", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getTransByApp_args implements TBase<getTransByApp_args, getTransByApp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getTransByApp_args");

    private static final TField APP_ID_FIELD_DESC = new TField("appID", TType.STRING, (short)1);
    private static final TField START_TIME_FIELD_DESC = new TField("startTime", TType.STRING, (short)2);
    private static final TField END_TIME_FIELD_DESC = new TField("endTime", TType.STRING, (short)3);
    private static final TField TRANX_TYPE_FIELD_DESC = new TField("tranxType", TType.I32, (short)4);
    private static final TField START_INDEX_FIELD_DESC = new TField("startIndex", TType.I32, (short)5);
    private static final TField NUM_ROW_FIELD_DESC = new TField("numRow", TType.I32, (short)6);
    private static final TField TX_STATUS_FIELD_DESC = new TField("txStatus", TType.I32, (short)7);

    public String appID;
    public String startTime;
    public String endTime;
    public int tranxType;
    public int startIndex;
    public int numRow;
    public int txStatus;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      APP_ID((short)1, "appID"),
      START_TIME((short)2, "startTime"),
      END_TIME((short)3, "endTime"),
      TRANX_TYPE((short)4, "tranxType"),
      START_INDEX((short)5, "startIndex"),
      NUM_ROW((short)6, "numRow"),
      TX_STATUS((short)7, "txStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // START_TIME
            return START_TIME;
          case 3: // END_TIME
            return END_TIME;
          case 4: // TRANX_TYPE
            return TRANX_TYPE;
          case 5: // START_INDEX
            return START_INDEX;
          case 6: // NUM_ROW
            return NUM_ROW;
          case 7: // TX_STATUS
            return TX_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TRANXTYPE_ISSET_ID = 0;
    private static final int __STARTINDEX_ISSET_ID = 1;
    private static final int __NUMROW_ISSET_ID = 2;
    private static final int __TXSTATUS_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new FieldMetaData("appID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new FieldMetaData("startTime", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new FieldMetaData("endTime", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TRANX_TYPE, new FieldMetaData("tranxType", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.START_INDEX, new FieldMetaData("startIndex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.NUM_ROW, new FieldMetaData("numRow", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.TX_STATUS, new FieldMetaData("txStatus", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getTransByApp_args.class, metaDataMap);
    }

    public getTransByApp_args() {
    }

    public getTransByApp_args(
      String appID,
      String startTime,
      String endTime,
      int tranxType,
      int startIndex,
      int numRow,
      int txStatus)
    {
      this();
      this.appID = appID;
      this.startTime = startTime;
      this.endTime = endTime;
      this.tranxType = tranxType;
      setTranxTypeIsSet(true);
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      this.numRow = numRow;
      setNumRowIsSet(true);
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransByApp_args(getTransByApp_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAppID()) {
        this.appID = other.appID;
      }
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
      this.tranxType = other.tranxType;
      this.startIndex = other.startIndex;
      this.numRow = other.numRow;
      this.txStatus = other.txStatus;
    }

    public getTransByApp_args deepCopy() {
      return new getTransByApp_args(this);
    }

    @Override
    public void clear() {
      this.appID = null;
      this.startTime = null;
      this.endTime = null;
      setTranxTypeIsSet(false);
      this.tranxType = 0;
      setStartIndexIsSet(false);
      this.startIndex = 0;
      setNumRowIsSet(false);
      this.numRow = 0;
      setTxStatusIsSet(false);
      this.txStatus = 0;
    }

    public String getAppID() {
      return this.appID;
    }

    public getTransByApp_args setAppID(String appID) {
      this.appID = appID;
      return this;
    }

    public void unsetAppID() {
      this.appID = null;
    }

    /** Returns true if field appID is set (has been asigned a value) and false otherwise */
    public boolean isSetAppID() {
      return this.appID != null;
    }

    public void setAppIDIsSet(boolean value) {
      if (!value) {
        this.appID = null;
      }
    }

    public String getStartTime() {
      return this.startTime;
    }

    public getTransByApp_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been asigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public getTransByApp_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been asigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public int getTranxType() {
      return this.tranxType;
    }

    public getTransByApp_args setTranxType(int tranxType) {
      this.tranxType = tranxType;
      setTranxTypeIsSet(true);
      return this;
    }

    public void unsetTranxType() {
      __isset_bit_vector.clear(__TRANXTYPE_ISSET_ID);
    }

    /** Returns true if field tranxType is set (has been asigned a value) and false otherwise */
    public boolean isSetTranxType() {
      return __isset_bit_vector.get(__TRANXTYPE_ISSET_ID);
    }

    public void setTranxTypeIsSet(boolean value) {
      __isset_bit_vector.set(__TRANXTYPE_ISSET_ID, value);
    }

    public int getStartIndex() {
      return this.startIndex;
    }

    public getTransByApp_args setStartIndex(int startIndex) {
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      return this;
    }

    public void unsetStartIndex() {
      __isset_bit_vector.clear(__STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been asigned a value) and false otherwise */
    public boolean isSetStartIndex() {
      return __isset_bit_vector.get(__STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
      __isset_bit_vector.set(__STARTINDEX_ISSET_ID, value);
    }

    public int getNumRow() {
      return this.numRow;
    }

    public getTransByApp_args setNumRow(int numRow) {
      this.numRow = numRow;
      setNumRowIsSet(true);
      return this;
    }

    public void unsetNumRow() {
      __isset_bit_vector.clear(__NUMROW_ISSET_ID);
    }

    /** Returns true if field numRow is set (has been asigned a value) and false otherwise */
    public boolean isSetNumRow() {
      return __isset_bit_vector.get(__NUMROW_ISSET_ID);
    }

    public void setNumRowIsSet(boolean value) {
      __isset_bit_vector.set(__NUMROW_ISSET_ID, value);
    }

    public int getTxStatus() {
      return this.txStatus;
    }

    public getTransByApp_args setTxStatus(int txStatus) {
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
      return this;
    }

    public void unsetTxStatus() {
      __isset_bit_vector.clear(__TXSTATUS_ISSET_ID);
    }

    /** Returns true if field txStatus is set (has been asigned a value) and false otherwise */
    public boolean isSetTxStatus() {
      return __isset_bit_vector.get(__TXSTATUS_ISSET_ID);
    }

    public void setTxStatusIsSet(boolean value) {
      __isset_bit_vector.set(__TXSTATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppID();
        } else {
          setAppID((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      case TRANX_TYPE:
        if (value == null) {
          unsetTranxType();
        } else {
          setTranxType((Integer)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStartIndex();
        } else {
          setStartIndex((Integer)value);
        }
        break;

      case NUM_ROW:
        if (value == null) {
          unsetNumRow();
        } else {
          setNumRow((Integer)value);
        }
        break;

      case TX_STATUS:
        if (value == null) {
          unsetTxStatus();
        } else {
          setTxStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return getAppID();

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      case TRANX_TYPE:
        return new Integer(getTranxType());

      case START_INDEX:
        return new Integer(getStartIndex());

      case NUM_ROW:
        return new Integer(getNumRow());

      case TX_STATUS:
        return new Integer(getTxStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppID();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case TRANX_TYPE:
        return isSetTranxType();
      case START_INDEX:
        return isSetStartIndex();
      case NUM_ROW:
        return isSetNumRow();
      case TX_STATUS:
        return isSetTxStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransByApp_args)
        return this.equals((getTransByApp_args)that);
      return false;
    }

    public boolean equals(getTransByApp_args that) {
      if (that == null)
        return false;

      boolean this_present_appID = true && this.isSetAppID();
      boolean that_present_appID = true && that.isSetAppID();
      if (this_present_appID || that_present_appID) {
        if (!(this_present_appID && that_present_appID))
          return false;
        if (!this.appID.equals(that.appID))
          return false;
      }

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      boolean this_present_tranxType = true;
      boolean that_present_tranxType = true;
      if (this_present_tranxType || that_present_tranxType) {
        if (!(this_present_tranxType && that_present_tranxType))
          return false;
        if (this.tranxType != that.tranxType)
          return false;
      }

      boolean this_present_startIndex = true;
      boolean that_present_startIndex = true;
      if (this_present_startIndex || that_present_startIndex) {
        if (!(this_present_startIndex && that_present_startIndex))
          return false;
        if (this.startIndex != that.startIndex)
          return false;
      }

      boolean this_present_numRow = true;
      boolean that_present_numRow = true;
      if (this_present_numRow || that_present_numRow) {
        if (!(this_present_numRow && that_present_numRow))
          return false;
        if (this.numRow != that.numRow)
          return false;
      }

      boolean this_present_txStatus = true;
      boolean that_present_txStatus = true;
      if (this_present_txStatus || that_present_txStatus) {
        if (!(this_present_txStatus && that_present_txStatus))
          return false;
        if (this.txStatus != that.txStatus)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTransByApp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTransByApp_args typedOther = (getTransByApp_args)other;

      lastComparison = Boolean.valueOf(isSetAppID()).compareTo(typedOther.isSetAppID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppID()) {
        lastComparison = TBaseHelper.compareTo(this.appID, typedOther.appID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTranxType()).compareTo(typedOther.isSetTranxType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTranxType()) {
        lastComparison = TBaseHelper.compareTo(this.tranxType, typedOther.tranxType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(typedOther.isSetStartIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIndex()) {
        lastComparison = TBaseHelper.compareTo(this.startIndex, typedOther.startIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumRow()).compareTo(typedOther.isSetNumRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRow()) {
        lastComparison = TBaseHelper.compareTo(this.numRow, typedOther.numRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxStatus()).compareTo(typedOther.isSetTxStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxStatus()) {
        lastComparison = TBaseHelper.compareTo(this.txStatus, typedOther.txStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_ID
            if (field.type == TType.STRING) {
              this.appID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // START_TIME
            if (field.type == TType.STRING) {
              this.startTime = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // END_TIME
            if (field.type == TType.STRING) {
              this.endTime = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // TRANX_TYPE
            if (field.type == TType.I32) {
              this.tranxType = iprot.readI32();
              setTranxTypeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // START_INDEX
            if (field.type == TType.I32) {
              this.startIndex = iprot.readI32();
              setStartIndexIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // NUM_ROW
            if (field.type == TType.I32) {
              this.numRow = iprot.readI32();
              setNumRowIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // TX_STATUS
            if (field.type == TType.I32) {
              this.txStatus = iprot.readI32();
              setTxStatusIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appID != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(this.appID);
        oprot.writeFieldEnd();
      }
      if (this.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(this.startTime);
        oprot.writeFieldEnd();
      }
      if (this.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(this.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRANX_TYPE_FIELD_DESC);
      oprot.writeI32(this.tranxType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
      oprot.writeI32(this.startIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_ROW_FIELD_DESC);
      oprot.writeI32(this.numRow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TX_STATUS_FIELD_DESC);
      oprot.writeI32(this.txStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransByApp_args(");
      boolean first = true;

      sb.append("appID:");
      if (this.appID == null) {
        sb.append("null");
      } else {
        sb.append(this.appID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tranxType:");
      sb.append(this.tranxType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRow:");
      sb.append(this.numRow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txStatus:");
      sb.append(this.txStatus);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTransByApp_result implements TBase<getTransByApp_result, getTransByApp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getTransByApp_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    public List<vng.zingme.payment.thrift.T_ReportTransaction> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_ReportTransaction.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getTransByApp_result.class, metaDataMap);
    }

    public getTransByApp_result() {
    }

    public getTransByApp_result(
      List<vng.zingme.payment.thrift.T_ReportTransaction> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransByApp_result(getTransByApp_result other) {
      if (other.isSetSuccess()) {
        List<vng.zingme.payment.thrift.T_ReportTransaction> __this__success = new ArrayList<vng.zingme.payment.thrift.T_ReportTransaction>();
        for (vng.zingme.payment.thrift.T_ReportTransaction other_element : other.success) {
          __this__success.add(new vng.zingme.payment.thrift.T_ReportTransaction(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTransByApp_result deepCopy() {
      return new getTransByApp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.zingme.payment.thrift.T_ReportTransaction> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.zingme.payment.thrift.T_ReportTransaction elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.zingme.payment.thrift.T_ReportTransaction>();
      }
      this.success.add(elem);
    }

    public List<vng.zingme.payment.thrift.T_ReportTransaction> getSuccess() {
      return this.success;
    }

    public getTransByApp_result setSuccess(List<vng.zingme.payment.thrift.T_ReportTransaction> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.zingme.payment.thrift.T_ReportTransaction>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransByApp_result)
        return this.equals((getTransByApp_result)that);
      return false;
    }

    public boolean equals(getTransByApp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTransByApp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTransByApp_result typedOther = (getTransByApp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list12 = iprot.readListBegin();
                this.success = new ArrayList<vng.zingme.payment.thrift.T_ReportTransaction>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  vng.zingme.payment.thrift.T_ReportTransaction _elem14;
                  _elem14 = new vng.zingme.payment.thrift.T_ReportTransaction();
                  _elem14.read(iprot);
                  this.success.add(_elem14);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (vng.zingme.payment.thrift.T_ReportTransaction _iter15 : this.success)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransByApp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTransByUser_args implements TBase<getTransByUser_args, getTransByUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getTransByUser_args");

    private static final TField USER_ID_FIELD_DESC = new TField("userID", TType.I32, (short)1);
    private static final TField TX_ID_FIELD_DESC = new TField("txID", TType.I64, (short)2);
    private static final TField START_TIME_FIELD_DESC = new TField("startTime", TType.STRING, (short)3);
    private static final TField END_TIME_FIELD_DESC = new TField("endTime", TType.STRING, (short)4);
    private static final TField START_INDEX_FIELD_DESC = new TField("startIndex", TType.I32, (short)5);
    private static final TField NUM_ROW_FIELD_DESC = new TField("numRow", TType.I32, (short)6);
    private static final TField TX_STATUS_FIELD_DESC = new TField("txStatus", TType.I32, (short)7);

    public int userID;
    public long txID;
    public String startTime;
    public String endTime;
    public int startIndex;
    public int numRow;
    public int txStatus;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER_ID((short)1, "userID"),
      TX_ID((short)2, "txID"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime"),
      START_INDEX((short)5, "startIndex"),
      NUM_ROW((short)6, "numRow"),
      TX_STATUS((short)7, "txStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // TX_ID
            return TX_ID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          case 5: // START_INDEX
            return START_INDEX;
          case 6: // NUM_ROW
            return NUM_ROW;
          case 7: // TX_STATUS
            return TX_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __TXID_ISSET_ID = 1;
    private static final int __STARTINDEX_ISSET_ID = 2;
    private static final int __NUMROW_ISSET_ID = 3;
    private static final int __TXSTATUS_ISSET_ID = 4;
    private BitSet __isset_bit_vector = new BitSet(5);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new FieldMetaData("userID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.TX_ID, new FieldMetaData("txID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      tmpMap.put(_Fields.START_TIME, new FieldMetaData("startTime", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new FieldMetaData("endTime", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.START_INDEX, new FieldMetaData("startIndex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.NUM_ROW, new FieldMetaData("numRow", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.TX_STATUS, new FieldMetaData("txStatus", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getTransByUser_args.class, metaDataMap);
    }

    public getTransByUser_args() {
    }

    public getTransByUser_args(
      int userID,
      long txID,
      String startTime,
      String endTime,
      int startIndex,
      int numRow,
      int txStatus)
    {
      this();
      this.userID = userID;
      setUserIDIsSet(true);
      this.txID = txID;
      setTxIDIsSet(true);
      this.startTime = startTime;
      this.endTime = endTime;
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      this.numRow = numRow;
      setNumRowIsSet(true);
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransByUser_args(getTransByUser_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.userID = other.userID;
      this.txID = other.txID;
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
      this.startIndex = other.startIndex;
      this.numRow = other.numRow;
      this.txStatus = other.txStatus;
    }

    public getTransByUser_args deepCopy() {
      return new getTransByUser_args(this);
    }

    @Override
    public void clear() {
      setUserIDIsSet(false);
      this.userID = 0;
      setTxIDIsSet(false);
      this.txID = 0;
      this.startTime = null;
      this.endTime = null;
      setStartIndexIsSet(false);
      this.startIndex = 0;
      setNumRowIsSet(false);
      this.numRow = 0;
      setTxStatusIsSet(false);
      this.txStatus = 0;
    }

    public int getUserID() {
      return this.userID;
    }

    public getTransByUser_args setUserID(int userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been asigned a value) and false otherwise */
    public boolean isSetUserID() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public long getTxID() {
      return this.txID;
    }

    public getTransByUser_args setTxID(long txID) {
      this.txID = txID;
      setTxIDIsSet(true);
      return this;
    }

    public void unsetTxID() {
      __isset_bit_vector.clear(__TXID_ISSET_ID);
    }

    /** Returns true if field txID is set (has been asigned a value) and false otherwise */
    public boolean isSetTxID() {
      return __isset_bit_vector.get(__TXID_ISSET_ID);
    }

    public void setTxIDIsSet(boolean value) {
      __isset_bit_vector.set(__TXID_ISSET_ID, value);
    }

    public String getStartTime() {
      return this.startTime;
    }

    public getTransByUser_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been asigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public getTransByUser_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been asigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public int getStartIndex() {
      return this.startIndex;
    }

    public getTransByUser_args setStartIndex(int startIndex) {
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      return this;
    }

    public void unsetStartIndex() {
      __isset_bit_vector.clear(__STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been asigned a value) and false otherwise */
    public boolean isSetStartIndex() {
      return __isset_bit_vector.get(__STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
      __isset_bit_vector.set(__STARTINDEX_ISSET_ID, value);
    }

    public int getNumRow() {
      return this.numRow;
    }

    public getTransByUser_args setNumRow(int numRow) {
      this.numRow = numRow;
      setNumRowIsSet(true);
      return this;
    }

    public void unsetNumRow() {
      __isset_bit_vector.clear(__NUMROW_ISSET_ID);
    }

    /** Returns true if field numRow is set (has been asigned a value) and false otherwise */
    public boolean isSetNumRow() {
      return __isset_bit_vector.get(__NUMROW_ISSET_ID);
    }

    public void setNumRowIsSet(boolean value) {
      __isset_bit_vector.set(__NUMROW_ISSET_ID, value);
    }

    public int getTxStatus() {
      return this.txStatus;
    }

    public getTransByUser_args setTxStatus(int txStatus) {
      this.txStatus = txStatus;
      setTxStatusIsSet(true);
      return this;
    }

    public void unsetTxStatus() {
      __isset_bit_vector.clear(__TXSTATUS_ISSET_ID);
    }

    /** Returns true if field txStatus is set (has been asigned a value) and false otherwise */
    public boolean isSetTxStatus() {
      return __isset_bit_vector.get(__TXSTATUS_ISSET_ID);
    }

    public void setTxStatusIsSet(boolean value) {
      __isset_bit_vector.set(__TXSTATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Integer)value);
        }
        break;

      case TX_ID:
        if (value == null) {
          unsetTxID();
        } else {
          setTxID((Long)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStartIndex();
        } else {
          setStartIndex((Integer)value);
        }
        break;

      case NUM_ROW:
        if (value == null) {
          unsetNumRow();
        } else {
          setNumRow((Integer)value);
        }
        break;

      case TX_STATUS:
        if (value == null) {
          unsetTxStatus();
        } else {
          setTxStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return new Integer(getUserID());

      case TX_ID:
        return new Long(getTxID());

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      case START_INDEX:
        return new Integer(getStartIndex());

      case NUM_ROW:
        return new Integer(getNumRow());

      case TX_STATUS:
        return new Integer(getTxStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserID();
      case TX_ID:
        return isSetTxID();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case START_INDEX:
        return isSetStartIndex();
      case NUM_ROW:
        return isSetNumRow();
      case TX_STATUS:
        return isSetTxStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransByUser_args)
        return this.equals((getTransByUser_args)that);
      return false;
    }

    public boolean equals(getTransByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      boolean this_present_txID = true;
      boolean that_present_txID = true;
      if (this_present_txID || that_present_txID) {
        if (!(this_present_txID && that_present_txID))
          return false;
        if (this.txID != that.txID)
          return false;
      }

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      boolean this_present_startIndex = true;
      boolean that_present_startIndex = true;
      if (this_present_startIndex || that_present_startIndex) {
        if (!(this_present_startIndex && that_present_startIndex))
          return false;
        if (this.startIndex != that.startIndex)
          return false;
      }

      boolean this_present_numRow = true;
      boolean that_present_numRow = true;
      if (this_present_numRow || that_present_numRow) {
        if (!(this_present_numRow && that_present_numRow))
          return false;
        if (this.numRow != that.numRow)
          return false;
      }

      boolean this_present_txStatus = true;
      boolean that_present_txStatus = true;
      if (this_present_txStatus || that_present_txStatus) {
        if (!(this_present_txStatus && that_present_txStatus))
          return false;
        if (this.txStatus != that.txStatus)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTransByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTransByUser_args typedOther = (getTransByUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxID()).compareTo(typedOther.isSetTxID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxID()) {
        lastComparison = TBaseHelper.compareTo(this.txID, typedOther.txID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(typedOther.isSetStartIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIndex()) {
        lastComparison = TBaseHelper.compareTo(this.startIndex, typedOther.startIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumRow()).compareTo(typedOther.isSetNumRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRow()) {
        lastComparison = TBaseHelper.compareTo(this.numRow, typedOther.numRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxStatus()).compareTo(typedOther.isSetTxStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxStatus()) {
        lastComparison = TBaseHelper.compareTo(this.txStatus, typedOther.txStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_ID
            if (field.type == TType.I32) {
              this.userID = iprot.readI32();
              setUserIDIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TX_ID
            if (field.type == TType.I64) {
              this.txID = iprot.readI64();
              setTxIDIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // START_TIME
            if (field.type == TType.STRING) {
              this.startTime = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // END_TIME
            if (field.type == TType.STRING) {
              this.endTime = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // START_INDEX
            if (field.type == TType.I32) {
              this.startIndex = iprot.readI32();
              setStartIndexIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // NUM_ROW
            if (field.type == TType.I32) {
              this.numRow = iprot.readI32();
              setNumRowIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // TX_STATUS
            if (field.type == TType.I32) {
              this.txStatus = iprot.readI32();
              setTxStatusIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(this.userID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TX_ID_FIELD_DESC);
      oprot.writeI64(this.txID);
      oprot.writeFieldEnd();
      if (this.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(this.startTime);
        oprot.writeFieldEnd();
      }
      if (this.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(this.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
      oprot.writeI32(this.startIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_ROW_FIELD_DESC);
      oprot.writeI32(this.numRow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TX_STATUS_FIELD_DESC);
      oprot.writeI32(this.txStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransByUser_args(");
      boolean first = true;

      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txID:");
      sb.append(this.txID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRow:");
      sb.append(this.numRow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txStatus:");
      sb.append(this.txStatus);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTransByUser_result implements TBase<getTransByUser_result, getTransByUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getTransByUser_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    public List<vng.zingme.payment.thrift.T_ReportTransaction> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_ReportTransaction.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getTransByUser_result.class, metaDataMap);
    }

    public getTransByUser_result() {
    }

    public getTransByUser_result(
      List<vng.zingme.payment.thrift.T_ReportTransaction> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransByUser_result(getTransByUser_result other) {
      if (other.isSetSuccess()) {
        List<vng.zingme.payment.thrift.T_ReportTransaction> __this__success = new ArrayList<vng.zingme.payment.thrift.T_ReportTransaction>();
        for (vng.zingme.payment.thrift.T_ReportTransaction other_element : other.success) {
          __this__success.add(new vng.zingme.payment.thrift.T_ReportTransaction(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTransByUser_result deepCopy() {
      return new getTransByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.zingme.payment.thrift.T_ReportTransaction> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.zingme.payment.thrift.T_ReportTransaction elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.zingme.payment.thrift.T_ReportTransaction>();
      }
      this.success.add(elem);
    }

    public List<vng.zingme.payment.thrift.T_ReportTransaction> getSuccess() {
      return this.success;
    }

    public getTransByUser_result setSuccess(List<vng.zingme.payment.thrift.T_ReportTransaction> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.zingme.payment.thrift.T_ReportTransaction>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransByUser_result)
        return this.equals((getTransByUser_result)that);
      return false;
    }

    public boolean equals(getTransByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTransByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTransByUser_result typedOther = (getTransByUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list16 = iprot.readListBegin();
                this.success = new ArrayList<vng.zingme.payment.thrift.T_ReportTransaction>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  vng.zingme.payment.thrift.T_ReportTransaction _elem18;
                  _elem18 = new vng.zingme.payment.thrift.T_ReportTransaction();
                  _elem18.read(iprot);
                  this.success.add(_elem18);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (vng.zingme.payment.thrift.T_ReportTransaction _iter19 : this.success)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTransStatus_args implements TBase<getTransStatus_args, getTransStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getTransStatus_args");

    private static final TField TX_ID_FIELD_DESC = new TField("txID", TType.I64, (short)1);
    private static final TField LOCAL_TIME_FIELD_DESC = new TField("localTime", TType.I32, (short)2);

    public long txID;
    public int localTime;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TX_ID((short)1, "txID"),
      LOCAL_TIME((short)2, "localTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TX_ID
            return TX_ID;
          case 2: // LOCAL_TIME
            return LOCAL_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TXID_ISSET_ID = 0;
    private static final int __LOCALTIME_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TX_ID, new FieldMetaData("txID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      tmpMap.put(_Fields.LOCAL_TIME, new FieldMetaData("localTime", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getTransStatus_args.class, metaDataMap);
    }

    public getTransStatus_args() {
    }

    public getTransStatus_args(
      long txID,
      int localTime)
    {
      this();
      this.txID = txID;
      setTxIDIsSet(true);
      this.localTime = localTime;
      setLocalTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransStatus_args(getTransStatus_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.txID = other.txID;
      this.localTime = other.localTime;
    }

    public getTransStatus_args deepCopy() {
      return new getTransStatus_args(this);
    }

    @Override
    public void clear() {
      setTxIDIsSet(false);
      this.txID = 0;
      setLocalTimeIsSet(false);
      this.localTime = 0;
    }

    public long getTxID() {
      return this.txID;
    }

    public getTransStatus_args setTxID(long txID) {
      this.txID = txID;
      setTxIDIsSet(true);
      return this;
    }

    public void unsetTxID() {
      __isset_bit_vector.clear(__TXID_ISSET_ID);
    }

    /** Returns true if field txID is set (has been asigned a value) and false otherwise */
    public boolean isSetTxID() {
      return __isset_bit_vector.get(__TXID_ISSET_ID);
    }

    public void setTxIDIsSet(boolean value) {
      __isset_bit_vector.set(__TXID_ISSET_ID, value);
    }

    public int getLocalTime() {
      return this.localTime;
    }

    public getTransStatus_args setLocalTime(int localTime) {
      this.localTime = localTime;
      setLocalTimeIsSet(true);
      return this;
    }

    public void unsetLocalTime() {
      __isset_bit_vector.clear(__LOCALTIME_ISSET_ID);
    }

    /** Returns true if field localTime is set (has been asigned a value) and false otherwise */
    public boolean isSetLocalTime() {
      return __isset_bit_vector.get(__LOCALTIME_ISSET_ID);
    }

    public void setLocalTimeIsSet(boolean value) {
      __isset_bit_vector.set(__LOCALTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TX_ID:
        if (value == null) {
          unsetTxID();
        } else {
          setTxID((Long)value);
        }
        break;

      case LOCAL_TIME:
        if (value == null) {
          unsetLocalTime();
        } else {
          setLocalTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TX_ID:
        return new Long(getTxID());

      case LOCAL_TIME:
        return new Integer(getLocalTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TX_ID:
        return isSetTxID();
      case LOCAL_TIME:
        return isSetLocalTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransStatus_args)
        return this.equals((getTransStatus_args)that);
      return false;
    }

    public boolean equals(getTransStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_txID = true;
      boolean that_present_txID = true;
      if (this_present_txID || that_present_txID) {
        if (!(this_present_txID && that_present_txID))
          return false;
        if (this.txID != that.txID)
          return false;
      }

      boolean this_present_localTime = true;
      boolean that_present_localTime = true;
      if (this_present_localTime || that_present_localTime) {
        if (!(this_present_localTime && that_present_localTime))
          return false;
        if (this.localTime != that.localTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTransStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTransStatus_args typedOther = (getTransStatus_args)other;

      lastComparison = Boolean.valueOf(isSetTxID()).compareTo(typedOther.isSetTxID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxID()) {
        lastComparison = TBaseHelper.compareTo(this.txID, typedOther.txID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocalTime()).compareTo(typedOther.isSetLocalTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalTime()) {
        lastComparison = TBaseHelper.compareTo(this.localTime, typedOther.localTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TX_ID
            if (field.type == TType.I64) {
              this.txID = iprot.readI64();
              setTxIDIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LOCAL_TIME
            if (field.type == TType.I32) {
              this.localTime = iprot.readI32();
              setLocalTimeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TX_ID_FIELD_DESC);
      oprot.writeI64(this.txID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCAL_TIME_FIELD_DESC);
      oprot.writeI32(this.localTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransStatus_args(");
      boolean first = true;

      sb.append("txID:");
      sb.append(this.txID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("localTime:");
      sb.append(this.localTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTransStatus_result implements TBase<getTransStatus_result, getTransStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getTransStatus_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    public List<vng.zingme.payment.thrift.T_ReportTransaction> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_ReportTransaction.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getTransStatus_result.class, metaDataMap);
    }

    public getTransStatus_result() {
    }

    public getTransStatus_result(
      List<vng.zingme.payment.thrift.T_ReportTransaction> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransStatus_result(getTransStatus_result other) {
      if (other.isSetSuccess()) {
        List<vng.zingme.payment.thrift.T_ReportTransaction> __this__success = new ArrayList<vng.zingme.payment.thrift.T_ReportTransaction>();
        for (vng.zingme.payment.thrift.T_ReportTransaction other_element : other.success) {
          __this__success.add(new vng.zingme.payment.thrift.T_ReportTransaction(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTransStatus_result deepCopy() {
      return new getTransStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.zingme.payment.thrift.T_ReportTransaction> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.zingme.payment.thrift.T_ReportTransaction elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.zingme.payment.thrift.T_ReportTransaction>();
      }
      this.success.add(elem);
    }

    public List<vng.zingme.payment.thrift.T_ReportTransaction> getSuccess() {
      return this.success;
    }

    public getTransStatus_result setSuccess(List<vng.zingme.payment.thrift.T_ReportTransaction> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.zingme.payment.thrift.T_ReportTransaction>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransStatus_result)
        return this.equals((getTransStatus_result)that);
      return false;
    }

    public boolean equals(getTransStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTransStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTransStatus_result typedOther = (getTransStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list20 = iprot.readListBegin();
                this.success = new ArrayList<vng.zingme.payment.thrift.T_ReportTransaction>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  vng.zingme.payment.thrift.T_ReportTransaction _elem22;
                  _elem22 = new vng.zingme.payment.thrift.T_ReportTransaction();
                  _elem22.read(iprot);
                  this.success.add(_elem22);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (vng.zingme.payment.thrift.T_ReportTransaction _iter23 : this.success)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class summary_args implements TBase<summary_args, summary_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("summary_args");

    private static final TField APP_ID_FIELD_DESC = new TField("appID", TType.STRING, (short)1);
    private static final TField START_TIME_FIELD_DESC = new TField("startTime", TType.STRING, (short)2);
    private static final TField END_TIME_FIELD_DESC = new TField("endTime", TType.STRING, (short)3);

    public String appID;
    public String startTime;
    public String endTime;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      APP_ID((short)1, "appID"),
      START_TIME((short)2, "startTime"),
      END_TIME((short)3, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // START_TIME
            return START_TIME;
          case 3: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new FieldMetaData("appID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new FieldMetaData("startTime", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new FieldMetaData("endTime", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(summary_args.class, metaDataMap);
    }

    public summary_args() {
    }

    public summary_args(
      String appID,
      String startTime,
      String endTime)
    {
      this();
      this.appID = appID;
      this.startTime = startTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public summary_args(summary_args other) {
      if (other.isSetAppID()) {
        this.appID = other.appID;
      }
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public summary_args deepCopy() {
      return new summary_args(this);
    }

    @Override
    public void clear() {
      this.appID = null;
      this.startTime = null;
      this.endTime = null;
    }

    public String getAppID() {
      return this.appID;
    }

    public summary_args setAppID(String appID) {
      this.appID = appID;
      return this;
    }

    public void unsetAppID() {
      this.appID = null;
    }

    /** Returns true if field appID is set (has been asigned a value) and false otherwise */
    public boolean isSetAppID() {
      return this.appID != null;
    }

    public void setAppIDIsSet(boolean value) {
      if (!value) {
        this.appID = null;
      }
    }

    public String getStartTime() {
      return this.startTime;
    }

    public summary_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been asigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public summary_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been asigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppID();
        } else {
          setAppID((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return getAppID();

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppID();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof summary_args)
        return this.equals((summary_args)that);
      return false;
    }

    public boolean equals(summary_args that) {
      if (that == null)
        return false;

      boolean this_present_appID = true && this.isSetAppID();
      boolean that_present_appID = true && that.isSetAppID();
      if (this_present_appID || that_present_appID) {
        if (!(this_present_appID && that_present_appID))
          return false;
        if (!this.appID.equals(that.appID))
          return false;
      }

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(summary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      summary_args typedOther = (summary_args)other;

      lastComparison = Boolean.valueOf(isSetAppID()).compareTo(typedOther.isSetAppID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppID()) {
        lastComparison = TBaseHelper.compareTo(this.appID, typedOther.appID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_ID
            if (field.type == TType.STRING) {
              this.appID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // START_TIME
            if (field.type == TType.STRING) {
              this.startTime = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // END_TIME
            if (field.type == TType.STRING) {
              this.endTime = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appID != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(this.appID);
        oprot.writeFieldEnd();
      }
      if (this.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(this.startTime);
        oprot.writeFieldEnd();
      }
      if (this.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(this.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("summary_args(");
      boolean first = true;

      sb.append("appID:");
      if (this.appID == null) {
        sb.append("null");
      } else {
        sb.append(this.appID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class summary_result implements TBase<summary_result, summary_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("summary_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public vng.zingme.payment.thrift.T_ReportSummary success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_ReportSummary.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(summary_result.class, metaDataMap);
    }

    public summary_result() {
    }

    public summary_result(
      vng.zingme.payment.thrift.T_ReportSummary success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public summary_result(summary_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.zingme.payment.thrift.T_ReportSummary(other.success);
      }
    }

    public summary_result deepCopy() {
      return new summary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.zingme.payment.thrift.T_ReportSummary getSuccess() {
      return this.success;
    }

    public summary_result setSuccess(vng.zingme.payment.thrift.T_ReportSummary success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.zingme.payment.thrift.T_ReportSummary)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof summary_result)
        return this.equals((summary_result)that);
      return false;
    }

    public boolean equals(summary_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(summary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      summary_result typedOther = (summary_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new vng.zingme.payment.thrift.T_ReportSummary();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("summary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class summaryDaily_args implements TBase<summaryDaily_args, summaryDaily_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("summaryDaily_args");

    private static final TField APP_ID_FIELD_DESC = new TField("appID", TType.STRING, (short)1);
    private static final TField START_TIME_FIELD_DESC = new TField("startTime", TType.STRING, (short)2);
    private static final TField END_TIME_FIELD_DESC = new TField("endTime", TType.STRING, (short)3);

    public String appID;
    public String startTime;
    public String endTime;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      APP_ID((short)1, "appID"),
      START_TIME((short)2, "startTime"),
      END_TIME((short)3, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // START_TIME
            return START_TIME;
          case 3: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new FieldMetaData("appID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new FieldMetaData("startTime", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new FieldMetaData("endTime", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(summaryDaily_args.class, metaDataMap);
    }

    public summaryDaily_args() {
    }

    public summaryDaily_args(
      String appID,
      String startTime,
      String endTime)
    {
      this();
      this.appID = appID;
      this.startTime = startTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public summaryDaily_args(summaryDaily_args other) {
      if (other.isSetAppID()) {
        this.appID = other.appID;
      }
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public summaryDaily_args deepCopy() {
      return new summaryDaily_args(this);
    }

    @Override
    public void clear() {
      this.appID = null;
      this.startTime = null;
      this.endTime = null;
    }

    public String getAppID() {
      return this.appID;
    }

    public summaryDaily_args setAppID(String appID) {
      this.appID = appID;
      return this;
    }

    public void unsetAppID() {
      this.appID = null;
    }

    /** Returns true if field appID is set (has been asigned a value) and false otherwise */
    public boolean isSetAppID() {
      return this.appID != null;
    }

    public void setAppIDIsSet(boolean value) {
      if (!value) {
        this.appID = null;
      }
    }

    public String getStartTime() {
      return this.startTime;
    }

    public summaryDaily_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been asigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public summaryDaily_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been asigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppID();
        } else {
          setAppID((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return getAppID();

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppID();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof summaryDaily_args)
        return this.equals((summaryDaily_args)that);
      return false;
    }

    public boolean equals(summaryDaily_args that) {
      if (that == null)
        return false;

      boolean this_present_appID = true && this.isSetAppID();
      boolean that_present_appID = true && that.isSetAppID();
      if (this_present_appID || that_present_appID) {
        if (!(this_present_appID && that_present_appID))
          return false;
        if (!this.appID.equals(that.appID))
          return false;
      }

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(summaryDaily_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      summaryDaily_args typedOther = (summaryDaily_args)other;

      lastComparison = Boolean.valueOf(isSetAppID()).compareTo(typedOther.isSetAppID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppID()) {
        lastComparison = TBaseHelper.compareTo(this.appID, typedOther.appID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_ID
            if (field.type == TType.STRING) {
              this.appID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // START_TIME
            if (field.type == TType.STRING) {
              this.startTime = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // END_TIME
            if (field.type == TType.STRING) {
              this.endTime = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appID != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(this.appID);
        oprot.writeFieldEnd();
      }
      if (this.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(this.startTime);
        oprot.writeFieldEnd();
      }
      if (this.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(this.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("summaryDaily_args(");
      boolean first = true;

      sb.append("appID:");
      if (this.appID == null) {
        sb.append("null");
      } else {
        sb.append(this.appID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class summaryDaily_result implements TBase<summaryDaily_result, summaryDaily_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("summaryDaily_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    public List<vng.zingme.payment.thrift.T_ReportSummary> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_ReportSummary.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(summaryDaily_result.class, metaDataMap);
    }

    public summaryDaily_result() {
    }

    public summaryDaily_result(
      List<vng.zingme.payment.thrift.T_ReportSummary> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public summaryDaily_result(summaryDaily_result other) {
      if (other.isSetSuccess()) {
        List<vng.zingme.payment.thrift.T_ReportSummary> __this__success = new ArrayList<vng.zingme.payment.thrift.T_ReportSummary>();
        for (vng.zingme.payment.thrift.T_ReportSummary other_element : other.success) {
          __this__success.add(new vng.zingme.payment.thrift.T_ReportSummary(other_element));
        }
        this.success = __this__success;
      }
    }

    public summaryDaily_result deepCopy() {
      return new summaryDaily_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.zingme.payment.thrift.T_ReportSummary> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.zingme.payment.thrift.T_ReportSummary elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.zingme.payment.thrift.T_ReportSummary>();
      }
      this.success.add(elem);
    }

    public List<vng.zingme.payment.thrift.T_ReportSummary> getSuccess() {
      return this.success;
    }

    public summaryDaily_result setSuccess(List<vng.zingme.payment.thrift.T_ReportSummary> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.zingme.payment.thrift.T_ReportSummary>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof summaryDaily_result)
        return this.equals((summaryDaily_result)that);
      return false;
    }

    public boolean equals(summaryDaily_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(summaryDaily_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      summaryDaily_result typedOther = (summaryDaily_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list24 = iprot.readListBegin();
                this.success = new ArrayList<vng.zingme.payment.thrift.T_ReportSummary>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  vng.zingme.payment.thrift.T_ReportSummary _elem26;
                  _elem26 = new vng.zingme.payment.thrift.T_ReportSummary();
                  _elem26.read(iprot);
                  this.success.add(_elem26);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (vng.zingme.payment.thrift.T_ReportSummary _iter27 : this.success)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("summaryDaily_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
