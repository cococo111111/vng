/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package vng.zingme.payment.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class T_VerifyCardRequest implements TBase<T_VerifyCardRequest, T_VerifyCardRequest._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("T_VerifyCardRequest");

  private static final TField USER_ID_FIELD_DESC = new TField("userID", TType.I32, (short)1);
  private static final TField CARD_TYPE_FIELD_DESC = new TField("cardType", TType.STRING, (short)2);
  private static final TField CARD_SERIAL_FIELD_DESC = new TField("cardSerial", TType.STRING, (short)3);
  private static final TField CARD_CODE_FIELD_DESC = new TField("cardCode", TType.STRING, (short)4);
  private static final TField CLIENT_IP_FIELD_DESC = new TField("clientIP", TType.STRING, (short)5);
  private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)6);
  private static final TField CURRENT_BALANCE_FIELD_DESC = new TField("currentBalance", TType.DOUBLE, (short)7);

  public int userID;
  public String cardType;
  public String cardSerial;
  public String cardCode;
  public String clientIP;
  public String username;
  public double currentBalance;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_ID((short)1, "userID"),
    CARD_TYPE((short)2, "cardType"),
    CARD_SERIAL((short)3, "cardSerial"),
    CARD_CODE((short)4, "cardCode"),
    CLIENT_IP((short)5, "clientIP"),
    USERNAME((short)6, "username"),
    CURRENT_BALANCE((short)7, "currentBalance");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // CARD_TYPE
          return CARD_TYPE;
        case 3: // CARD_SERIAL
          return CARD_SERIAL;
        case 4: // CARD_CODE
          return CARD_CODE;
        case 5: // CLIENT_IP
          return CLIENT_IP;
        case 6: // USERNAME
          return USERNAME;
        case 7: // CURRENT_BALANCE
          return CURRENT_BALANCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __CURRENTBALANCE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CARD_TYPE, new FieldMetaData("cardType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CARD_SERIAL, new FieldMetaData("cardSerial", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CARD_CODE, new FieldMetaData("cardCode", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CLIENT_IP, new FieldMetaData("clientIP", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CURRENT_BALANCE, new FieldMetaData("currentBalance", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(T_VerifyCardRequest.class, metaDataMap);
  }

  public T_VerifyCardRequest() {
  }

  public T_VerifyCardRequest(
    int userID,
    String cardType,
    String cardSerial,
    String cardCode,
    String clientIP,
    String username,
    double currentBalance)
  {
    this();
    this.userID = userID;
    setUserIDIsSet(true);
    this.cardType = cardType;
    this.cardSerial = cardSerial;
    this.cardCode = cardCode;
    this.clientIP = clientIP;
    this.username = username;
    this.currentBalance = currentBalance;
    setCurrentBalanceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public T_VerifyCardRequest(T_VerifyCardRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userID = other.userID;
    if (other.isSetCardType()) {
      this.cardType = other.cardType;
    }
    if (other.isSetCardSerial()) {
      this.cardSerial = other.cardSerial;
    }
    if (other.isSetCardCode()) {
      this.cardCode = other.cardCode;
    }
    if (other.isSetClientIP()) {
      this.clientIP = other.clientIP;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    this.currentBalance = other.currentBalance;
  }

  public T_VerifyCardRequest deepCopy() {
    return new T_VerifyCardRequest(this);
  }

  @Override
  public void clear() {
    setUserIDIsSet(false);
    this.userID = 0;
    this.cardType = null;
    this.cardSerial = null;
    this.cardCode = null;
    this.clientIP = null;
    this.username = null;
    setCurrentBalanceIsSet(false);
    this.currentBalance = 0.0;
  }

  public int getUserID() {
    return this.userID;
  }

  public T_VerifyCardRequest setUserID(int userID) {
    this.userID = userID;
    setUserIDIsSet(true);
    return this;
  }

  public void unsetUserID() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userID is set (has been asigned a value) and false otherwise */
  public boolean isSetUserID() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIDIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getCardType() {
    return this.cardType;
  }

  public T_VerifyCardRequest setCardType(String cardType) {
    this.cardType = cardType;
    return this;
  }

  public void unsetCardType() {
    this.cardType = null;
  }

  /** Returns true if field cardType is set (has been asigned a value) and false otherwise */
  public boolean isSetCardType() {
    return this.cardType != null;
  }

  public void setCardTypeIsSet(boolean value) {
    if (!value) {
      this.cardType = null;
    }
  }

  public String getCardSerial() {
    return this.cardSerial;
  }

  public T_VerifyCardRequest setCardSerial(String cardSerial) {
    this.cardSerial = cardSerial;
    return this;
  }

  public void unsetCardSerial() {
    this.cardSerial = null;
  }

  /** Returns true if field cardSerial is set (has been asigned a value) and false otherwise */
  public boolean isSetCardSerial() {
    return this.cardSerial != null;
  }

  public void setCardSerialIsSet(boolean value) {
    if (!value) {
      this.cardSerial = null;
    }
  }

  public String getCardCode() {
    return this.cardCode;
  }

  public T_VerifyCardRequest setCardCode(String cardCode) {
    this.cardCode = cardCode;
    return this;
  }

  public void unsetCardCode() {
    this.cardCode = null;
  }

  /** Returns true if field cardCode is set (has been asigned a value) and false otherwise */
  public boolean isSetCardCode() {
    return this.cardCode != null;
  }

  public void setCardCodeIsSet(boolean value) {
    if (!value) {
      this.cardCode = null;
    }
  }

  public String getClientIP() {
    return this.clientIP;
  }

  public T_VerifyCardRequest setClientIP(String clientIP) {
    this.clientIP = clientIP;
    return this;
  }

  public void unsetClientIP() {
    this.clientIP = null;
  }

  /** Returns true if field clientIP is set (has been asigned a value) and false otherwise */
  public boolean isSetClientIP() {
    return this.clientIP != null;
  }

  public void setClientIPIsSet(boolean value) {
    if (!value) {
      this.clientIP = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public T_VerifyCardRequest setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been asigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public double getCurrentBalance() {
    return this.currentBalance;
  }

  public T_VerifyCardRequest setCurrentBalance(double currentBalance) {
    this.currentBalance = currentBalance;
    setCurrentBalanceIsSet(true);
    return this;
  }

  public void unsetCurrentBalance() {
    __isset_bit_vector.clear(__CURRENTBALANCE_ISSET_ID);
  }

  /** Returns true if field currentBalance is set (has been asigned a value) and false otherwise */
  public boolean isSetCurrentBalance() {
    return __isset_bit_vector.get(__CURRENTBALANCE_ISSET_ID);
  }

  public void setCurrentBalanceIsSet(boolean value) {
    __isset_bit_vector.set(__CURRENTBALANCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((Integer)value);
      }
      break;

    case CARD_TYPE:
      if (value == null) {
        unsetCardType();
      } else {
        setCardType((String)value);
      }
      break;

    case CARD_SERIAL:
      if (value == null) {
        unsetCardSerial();
      } else {
        setCardSerial((String)value);
      }
      break;

    case CARD_CODE:
      if (value == null) {
        unsetCardCode();
      } else {
        setCardCode((String)value);
      }
      break;

    case CLIENT_IP:
      if (value == null) {
        unsetClientIP();
      } else {
        setClientIP((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case CURRENT_BALANCE:
      if (value == null) {
        unsetCurrentBalance();
      } else {
        setCurrentBalance((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return new Integer(getUserID());

    case CARD_TYPE:
      return getCardType();

    case CARD_SERIAL:
      return getCardSerial();

    case CARD_CODE:
      return getCardCode();

    case CLIENT_IP:
      return getClientIP();

    case USERNAME:
      return getUsername();

    case CURRENT_BALANCE:
      return new Double(getCurrentBalance());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserID();
    case CARD_TYPE:
      return isSetCardType();
    case CARD_SERIAL:
      return isSetCardSerial();
    case CARD_CODE:
      return isSetCardCode();
    case CLIENT_IP:
      return isSetClientIP();
    case USERNAME:
      return isSetUsername();
    case CURRENT_BALANCE:
      return isSetCurrentBalance();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof T_VerifyCardRequest)
      return this.equals((T_VerifyCardRequest)that);
    return false;
  }

  public boolean equals(T_VerifyCardRequest that) {
    if (that == null)
      return false;

    boolean this_present_userID = true;
    boolean that_present_userID = true;
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (this.userID != that.userID)
        return false;
    }

    boolean this_present_cardType = true && this.isSetCardType();
    boolean that_present_cardType = true && that.isSetCardType();
    if (this_present_cardType || that_present_cardType) {
      if (!(this_present_cardType && that_present_cardType))
        return false;
      if (!this.cardType.equals(that.cardType))
        return false;
    }

    boolean this_present_cardSerial = true && this.isSetCardSerial();
    boolean that_present_cardSerial = true && that.isSetCardSerial();
    if (this_present_cardSerial || that_present_cardSerial) {
      if (!(this_present_cardSerial && that_present_cardSerial))
        return false;
      if (!this.cardSerial.equals(that.cardSerial))
        return false;
    }

    boolean this_present_cardCode = true && this.isSetCardCode();
    boolean that_present_cardCode = true && that.isSetCardCode();
    if (this_present_cardCode || that_present_cardCode) {
      if (!(this_present_cardCode && that_present_cardCode))
        return false;
      if (!this.cardCode.equals(that.cardCode))
        return false;
    }

    boolean this_present_clientIP = true && this.isSetClientIP();
    boolean that_present_clientIP = true && that.isSetClientIP();
    if (this_present_clientIP || that_present_clientIP) {
      if (!(this_present_clientIP && that_present_clientIP))
        return false;
      if (!this.clientIP.equals(that.clientIP))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_currentBalance = true;
    boolean that_present_currentBalance = true;
    if (this_present_currentBalance || that_present_currentBalance) {
      if (!(this_present_currentBalance && that_present_currentBalance))
        return false;
      if (this.currentBalance != that.currentBalance)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(T_VerifyCardRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    T_VerifyCardRequest typedOther = (T_VerifyCardRequest)other;

    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = TBaseHelper.compareTo(this.userID, typedOther.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardType()).compareTo(typedOther.isSetCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardType()) {
      lastComparison = TBaseHelper.compareTo(this.cardType, typedOther.cardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardSerial()).compareTo(typedOther.isSetCardSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardSerial()) {
      lastComparison = TBaseHelper.compareTo(this.cardSerial, typedOther.cardSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardCode()).compareTo(typedOther.isSetCardCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardCode()) {
      lastComparison = TBaseHelper.compareTo(this.cardCode, typedOther.cardCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientIP()).compareTo(typedOther.isSetClientIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientIP()) {
      lastComparison = TBaseHelper.compareTo(this.clientIP, typedOther.clientIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentBalance()).compareTo(typedOther.isSetCurrentBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentBalance()) {
      lastComparison = TBaseHelper.compareTo(this.currentBalance, typedOther.currentBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // USER_ID
          if (field.type == TType.I32) {
            this.userID = iprot.readI32();
            setUserIDIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CARD_TYPE
          if (field.type == TType.STRING) {
            this.cardType = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CARD_SERIAL
          if (field.type == TType.STRING) {
            this.cardSerial = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CARD_CODE
          if (field.type == TType.STRING) {
            this.cardCode = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CLIENT_IP
          if (field.type == TType.STRING) {
            this.clientIP = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // USERNAME
          if (field.type == TType.STRING) {
            this.username = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CURRENT_BALANCE
          if (field.type == TType.DOUBLE) {
            this.currentBalance = iprot.readDouble();
            setCurrentBalanceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI32(this.userID);
    oprot.writeFieldEnd();
    if (this.cardType != null) {
      oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
      oprot.writeString(this.cardType);
      oprot.writeFieldEnd();
    }
    if (this.cardSerial != null) {
      oprot.writeFieldBegin(CARD_SERIAL_FIELD_DESC);
      oprot.writeString(this.cardSerial);
      oprot.writeFieldEnd();
    }
    if (this.cardCode != null) {
      oprot.writeFieldBegin(CARD_CODE_FIELD_DESC);
      oprot.writeString(this.cardCode);
      oprot.writeFieldEnd();
    }
    if (this.clientIP != null) {
      oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
      oprot.writeString(this.clientIP);
      oprot.writeFieldEnd();
    }
    if (this.username != null) {
      oprot.writeFieldBegin(USERNAME_FIELD_DESC);
      oprot.writeString(this.username);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CURRENT_BALANCE_FIELD_DESC);
    oprot.writeDouble(this.currentBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("T_VerifyCardRequest(");
    boolean first = true;

    sb.append("userID:");
    sb.append(this.userID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardType:");
    if (this.cardType == null) {
      sb.append("null");
    } else {
      sb.append(this.cardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardSerial:");
    if (this.cardSerial == null) {
      sb.append("null");
    } else {
      sb.append(this.cardSerial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardCode:");
    if (this.cardCode == null) {
      sb.append("null");
    } else {
      sb.append(this.cardCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientIP:");
    if (this.clientIP == null) {
      sb.append("null");
    } else {
      sb.append(this.clientIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentBalance:");
    sb.append(this.currentBalance);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

