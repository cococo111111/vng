/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package vng.zingme.payment.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TAppServer {

  public interface Iface {

    public String getAppName(String appID) throws TException;

    public vng.zingme.payment.thrift.T_AppInfo getAppInfo(String appID) throws TException;

    public String registerGameServer(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig, boolean isNewkey) throws TException;

    public int registerPayLetterServer(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig) throws TException;

    public List<vng.zingme.payment.thrift.T_AppInfo> getAllAppInfo() throws TException;

    public void addIdToWhitelist(String appID, int userID) throws TException;

    public void addIdsToWhitelist(String appID, List<Integer> userID) throws TException;

    public void removeIdFromWhitelist(String appID, int userID) throws TException;

  }

  public interface AsyncIface {

    public void getAppName(String appID, AsyncMethodCallback<AsyncClient.getAppName_call> resultHandler) throws TException;

    public void getAppInfo(String appID, AsyncMethodCallback<AsyncClient.getAppInfo_call> resultHandler) throws TException;

    public void registerGameServer(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig, boolean isNewkey, AsyncMethodCallback<AsyncClient.registerGameServer_call> resultHandler) throws TException;

    public void registerPayLetterServer(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig, AsyncMethodCallback<AsyncClient.registerPayLetterServer_call> resultHandler) throws TException;

    public void getAllAppInfo(AsyncMethodCallback<AsyncClient.getAllAppInfo_call> resultHandler) throws TException;

    public void addIdToWhitelist(String appID, int userID, AsyncMethodCallback<AsyncClient.addIdToWhitelist_call> resultHandler) throws TException;

    public void addIdsToWhitelist(String appID, List<Integer> userID, AsyncMethodCallback<AsyncClient.addIdsToWhitelist_call> resultHandler) throws TException;

    public void removeIdFromWhitelist(String appID, int userID, AsyncMethodCallback<AsyncClient.removeIdFromWhitelist_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public String getAppName(String appID) throws TException
    {
      send_getAppName(appID);
      return recv_getAppName();
    }

    public void send_getAppName(String appID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAppName", TMessageType.CALL, ++seqid_));
      getAppName_args args = new getAppName_args();
      args.setAppID(appID);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getAppName() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAppName failed: out of sequence response");
      }
      getAppName_result result = new getAppName_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAppName failed: unknown result");
    }

    public vng.zingme.payment.thrift.T_AppInfo getAppInfo(String appID) throws TException
    {
      send_getAppInfo(appID);
      return recv_getAppInfo();
    }

    public void send_getAppInfo(String appID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAppInfo", TMessageType.CALL, ++seqid_));
      getAppInfo_args args = new getAppInfo_args();
      args.setAppID(appID);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public vng.zingme.payment.thrift.T_AppInfo recv_getAppInfo() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAppInfo failed: out of sequence response");
      }
      getAppInfo_result result = new getAppInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAppInfo failed: unknown result");
    }

    public String registerGameServer(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig, boolean isNewkey) throws TException
    {
      send_registerGameServer(appInfo, adminSig, isNewkey);
      return recv_registerGameServer();
    }

    public void send_registerGameServer(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig, boolean isNewkey) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerGameServer", TMessageType.CALL, ++seqid_));
      registerGameServer_args args = new registerGameServer_args();
      args.setAppInfo(appInfo);
      args.setAdminSig(adminSig);
      args.setIsNewkey(isNewkey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerGameServer() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerGameServer failed: out of sequence response");
      }
      registerGameServer_result result = new registerGameServer_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerGameServer failed: unknown result");
    }

    public int registerPayLetterServer(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig) throws TException
    {
      send_registerPayLetterServer(appInfo, adminSig);
      return recv_registerPayLetterServer();
    }

    public void send_registerPayLetterServer(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerPayLetterServer", TMessageType.CALL, ++seqid_));
      registerPayLetterServer_args args = new registerPayLetterServer_args();
      args.setAppInfo(appInfo);
      args.setAdminSig(adminSig);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_registerPayLetterServer() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerPayLetterServer failed: out of sequence response");
      }
      registerPayLetterServer_result result = new registerPayLetterServer_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerPayLetterServer failed: unknown result");
    }

    public List<vng.zingme.payment.thrift.T_AppInfo> getAllAppInfo() throws TException
    {
      send_getAllAppInfo();
      return recv_getAllAppInfo();
    }

    public void send_getAllAppInfo() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAllAppInfo", TMessageType.CALL, ++seqid_));
      getAllAppInfo_args args = new getAllAppInfo_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<vng.zingme.payment.thrift.T_AppInfo> recv_getAllAppInfo() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAllAppInfo failed: out of sequence response");
      }
      getAllAppInfo_result result = new getAllAppInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAllAppInfo failed: unknown result");
    }

    public void addIdToWhitelist(String appID, int userID) throws TException
    {
      send_addIdToWhitelist(appID, userID);
      recv_addIdToWhitelist();
    }

    public void send_addIdToWhitelist(String appID, int userID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addIdToWhitelist", TMessageType.CALL, ++seqid_));
      addIdToWhitelist_args args = new addIdToWhitelist_args();
      args.setAppID(appID);
      args.setUserID(userID);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_addIdToWhitelist() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addIdToWhitelist failed: out of sequence response");
      }
      addIdToWhitelist_result result = new addIdToWhitelist_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void addIdsToWhitelist(String appID, List<Integer> userID) throws TException
    {
      send_addIdsToWhitelist(appID, userID);
      recv_addIdsToWhitelist();
    }

    public void send_addIdsToWhitelist(String appID, List<Integer> userID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addIdsToWhitelist", TMessageType.CALL, ++seqid_));
      addIdsToWhitelist_args args = new addIdsToWhitelist_args();
      args.setAppID(appID);
      args.setUserID(userID);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_addIdsToWhitelist() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addIdsToWhitelist failed: out of sequence response");
      }
      addIdsToWhitelist_result result = new addIdsToWhitelist_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void removeIdFromWhitelist(String appID, int userID) throws TException
    {
      send_removeIdFromWhitelist(appID, userID);
      recv_removeIdFromWhitelist();
    }

    public void send_removeIdFromWhitelist(String appID, int userID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeIdFromWhitelist", TMessageType.CALL, ++seqid_));
      removeIdFromWhitelist_args args = new removeIdFromWhitelist_args();
      args.setAppID(appID);
      args.setUserID(userID);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_removeIdFromWhitelist() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeIdFromWhitelist failed: out of sequence response");
      }
      removeIdFromWhitelist_result result = new removeIdFromWhitelist_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAppName(String appID, AsyncMethodCallback<getAppName_call> resultHandler) throws TException {
      checkReady();
      getAppName_call method_call = new getAppName_call(appID, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getAppName_call extends TAsyncMethodCall {
      private String appID;
      public getAppName_call(String appID, AsyncMethodCallback<getAppName_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appID = appID;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getAppName", TMessageType.CALL, 0));
        getAppName_args args = new getAppName_args();
        args.setAppID(appID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAppName();
      }
    }

    public void getAppInfo(String appID, AsyncMethodCallback<getAppInfo_call> resultHandler) throws TException {
      checkReady();
      getAppInfo_call method_call = new getAppInfo_call(appID, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getAppInfo_call extends TAsyncMethodCall {
      private String appID;
      public getAppInfo_call(String appID, AsyncMethodCallback<getAppInfo_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appID = appID;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getAppInfo", TMessageType.CALL, 0));
        getAppInfo_args args = new getAppInfo_args();
        args.setAppID(appID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.zingme.payment.thrift.T_AppInfo getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAppInfo();
      }
    }

    public void registerGameServer(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig, boolean isNewkey, AsyncMethodCallback<registerGameServer_call> resultHandler) throws TException {
      checkReady();
      registerGameServer_call method_call = new registerGameServer_call(appInfo, adminSig, isNewkey, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class registerGameServer_call extends TAsyncMethodCall {
      private vng.zingme.payment.thrift.T_AppInfo appInfo;
      private String adminSig;
      private boolean isNewkey;
      public registerGameServer_call(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig, boolean isNewkey, AsyncMethodCallback<registerGameServer_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appInfo = appInfo;
        this.adminSig = adminSig;
        this.isNewkey = isNewkey;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("registerGameServer", TMessageType.CALL, 0));
        registerGameServer_args args = new registerGameServer_args();
        args.setAppInfo(appInfo);
        args.setAdminSig(adminSig);
        args.setIsNewkey(isNewkey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerGameServer();
      }
    }

    public void registerPayLetterServer(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig, AsyncMethodCallback<registerPayLetterServer_call> resultHandler) throws TException {
      checkReady();
      registerPayLetterServer_call method_call = new registerPayLetterServer_call(appInfo, adminSig, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class registerPayLetterServer_call extends TAsyncMethodCall {
      private vng.zingme.payment.thrift.T_AppInfo appInfo;
      private String adminSig;
      public registerPayLetterServer_call(vng.zingme.payment.thrift.T_AppInfo appInfo, String adminSig, AsyncMethodCallback<registerPayLetterServer_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appInfo = appInfo;
        this.adminSig = adminSig;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("registerPayLetterServer", TMessageType.CALL, 0));
        registerPayLetterServer_args args = new registerPayLetterServer_args();
        args.setAppInfo(appInfo);
        args.setAdminSig(adminSig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerPayLetterServer();
      }
    }

    public void getAllAppInfo(AsyncMethodCallback<getAllAppInfo_call> resultHandler) throws TException {
      checkReady();
      getAllAppInfo_call method_call = new getAllAppInfo_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getAllAppInfo_call extends TAsyncMethodCall {
      public getAllAppInfo_call(AsyncMethodCallback<getAllAppInfo_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getAllAppInfo", TMessageType.CALL, 0));
        getAllAppInfo_args args = new getAllAppInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<vng.zingme.payment.thrift.T_AppInfo> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllAppInfo();
      }
    }

    public void addIdToWhitelist(String appID, int userID, AsyncMethodCallback<addIdToWhitelist_call> resultHandler) throws TException {
      checkReady();
      addIdToWhitelist_call method_call = new addIdToWhitelist_call(appID, userID, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class addIdToWhitelist_call extends TAsyncMethodCall {
      private String appID;
      private int userID;
      public addIdToWhitelist_call(String appID, int userID, AsyncMethodCallback<addIdToWhitelist_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appID = appID;
        this.userID = userID;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("addIdToWhitelist", TMessageType.CALL, 0));
        addIdToWhitelist_args args = new addIdToWhitelist_args();
        args.setAppID(appID);
        args.setUserID(userID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addIdToWhitelist();
      }
    }

    public void addIdsToWhitelist(String appID, List<Integer> userID, AsyncMethodCallback<addIdsToWhitelist_call> resultHandler) throws TException {
      checkReady();
      addIdsToWhitelist_call method_call = new addIdsToWhitelist_call(appID, userID, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class addIdsToWhitelist_call extends TAsyncMethodCall {
      private String appID;
      private List<Integer> userID;
      public addIdsToWhitelist_call(String appID, List<Integer> userID, AsyncMethodCallback<addIdsToWhitelist_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appID = appID;
        this.userID = userID;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("addIdsToWhitelist", TMessageType.CALL, 0));
        addIdsToWhitelist_args args = new addIdsToWhitelist_args();
        args.setAppID(appID);
        args.setUserID(userID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addIdsToWhitelist();
      }
    }

    public void removeIdFromWhitelist(String appID, int userID, AsyncMethodCallback<removeIdFromWhitelist_call> resultHandler) throws TException {
      checkReady();
      removeIdFromWhitelist_call method_call = new removeIdFromWhitelist_call(appID, userID, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class removeIdFromWhitelist_call extends TAsyncMethodCall {
      private String appID;
      private int userID;
      public removeIdFromWhitelist_call(String appID, int userID, AsyncMethodCallback<removeIdFromWhitelist_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appID = appID;
        this.userID = userID;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("removeIdFromWhitelist", TMessageType.CALL, 0));
        removeIdFromWhitelist_args args = new removeIdFromWhitelist_args();
        args.setAppID(appID);
        args.setUserID(userID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeIdFromWhitelist();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getAppName", new getAppName());
      processMap_.put("getAppInfo", new getAppInfo());
      processMap_.put("registerGameServer", new registerGameServer());
      processMap_.put("registerPayLetterServer", new registerPayLetterServer());
      processMap_.put("getAllAppInfo", new getAllAppInfo());
      processMap_.put("addIdToWhitelist", new addIdToWhitelist());
      processMap_.put("addIdsToWhitelist", new addIdsToWhitelist());
      processMap_.put("removeIdFromWhitelist", new removeIdFromWhitelist());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getAppName implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAppName_args args = new getAppName_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAppName", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAppName_result result = new getAppName_result();
        result.success = iface_.getAppName(args.appID);
        oprot.writeMessageBegin(new TMessage("getAppName", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAppInfo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAppInfo_args args = new getAppInfo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAppInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAppInfo_result result = new getAppInfo_result();
        result.success = iface_.getAppInfo(args.appID);
        oprot.writeMessageBegin(new TMessage("getAppInfo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerGameServer implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerGameServer_args args = new registerGameServer_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerGameServer", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerGameServer_result result = new registerGameServer_result();
        result.success = iface_.registerGameServer(args.appInfo, args.adminSig, args.isNewkey);
        oprot.writeMessageBegin(new TMessage("registerGameServer", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerPayLetterServer implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerPayLetterServer_args args = new registerPayLetterServer_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerPayLetterServer", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerPayLetterServer_result result = new registerPayLetterServer_result();
        result.success = iface_.registerPayLetterServer(args.appInfo, args.adminSig);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("registerPayLetterServer", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAllAppInfo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAllAppInfo_args args = new getAllAppInfo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAllAppInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAllAppInfo_result result = new getAllAppInfo_result();
        result.success = iface_.getAllAppInfo();
        oprot.writeMessageBegin(new TMessage("getAllAppInfo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addIdToWhitelist implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addIdToWhitelist_args args = new addIdToWhitelist_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addIdToWhitelist", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addIdToWhitelist_result result = new addIdToWhitelist_result();
        iface_.addIdToWhitelist(args.appID, args.userID);
        oprot.writeMessageBegin(new TMessage("addIdToWhitelist", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addIdsToWhitelist implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addIdsToWhitelist_args args = new addIdsToWhitelist_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addIdsToWhitelist", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addIdsToWhitelist_result result = new addIdsToWhitelist_result();
        iface_.addIdsToWhitelist(args.appID, args.userID);
        oprot.writeMessageBegin(new TMessage("addIdsToWhitelist", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeIdFromWhitelist implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeIdFromWhitelist_args args = new removeIdFromWhitelist_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeIdFromWhitelist", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeIdFromWhitelist_result result = new removeIdFromWhitelist_result();
        iface_.removeIdFromWhitelist(args.appID, args.userID);
        oprot.writeMessageBegin(new TMessage("removeIdFromWhitelist", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getAppName_args implements TBase<getAppName_args, getAppName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAppName_args");

    private static final TField APP_ID_FIELD_DESC = new TField("appID", TType.STRING, (short)1);

    public String appID;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      APP_ID((short)1, "appID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new FieldMetaData("appID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getAppName_args.class, metaDataMap);
    }

    public getAppName_args() {
    }

    public getAppName_args(
      String appID)
    {
      this();
      this.appID = appID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppName_args(getAppName_args other) {
      if (other.isSetAppID()) {
        this.appID = other.appID;
      }
    }

    public getAppName_args deepCopy() {
      return new getAppName_args(this);
    }

    @Override
    public void clear() {
      this.appID = null;
    }

    public String getAppID() {
      return this.appID;
    }

    public getAppName_args setAppID(String appID) {
      this.appID = appID;
      return this;
    }

    public void unsetAppID() {
      this.appID = null;
    }

    /** Returns true if field appID is set (has been asigned a value) and false otherwise */
    public boolean isSetAppID() {
      return this.appID != null;
    }

    public void setAppIDIsSet(boolean value) {
      if (!value) {
        this.appID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppID();
        } else {
          setAppID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return getAppID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppName_args)
        return this.equals((getAppName_args)that);
      return false;
    }

    public boolean equals(getAppName_args that) {
      if (that == null)
        return false;

      boolean this_present_appID = true && this.isSetAppID();
      boolean that_present_appID = true && that.isSetAppID();
      if (this_present_appID || that_present_appID) {
        if (!(this_present_appID && that_present_appID))
          return false;
        if (!this.appID.equals(that.appID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAppName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAppName_args typedOther = (getAppName_args)other;

      lastComparison = Boolean.valueOf(isSetAppID()).compareTo(typedOther.isSetAppID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppID()) {
        lastComparison = TBaseHelper.compareTo(this.appID, typedOther.appID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_ID
            if (field.type == TType.STRING) {
              this.appID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appID != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(this.appID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppName_args(");
      boolean first = true;

      sb.append("appID:");
      if (this.appID == null) {
        sb.append("null");
      } else {
        sb.append(this.appID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAppName_result implements TBase<getAppName_result, getAppName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAppName_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getAppName_result.class, metaDataMap);
    }

    public getAppName_result() {
    }

    public getAppName_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppName_result(getAppName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getAppName_result deepCopy() {
      return new getAppName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getAppName_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppName_result)
        return this.equals((getAppName_result)that);
      return false;
    }

    public boolean equals(getAppName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAppName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAppName_result typedOther = (getAppName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAppInfo_args implements TBase<getAppInfo_args, getAppInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAppInfo_args");

    private static final TField APP_ID_FIELD_DESC = new TField("appID", TType.STRING, (short)1);

    public String appID;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      APP_ID((short)1, "appID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new FieldMetaData("appID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getAppInfo_args.class, metaDataMap);
    }

    public getAppInfo_args() {
    }

    public getAppInfo_args(
      String appID)
    {
      this();
      this.appID = appID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppInfo_args(getAppInfo_args other) {
      if (other.isSetAppID()) {
        this.appID = other.appID;
      }
    }

    public getAppInfo_args deepCopy() {
      return new getAppInfo_args(this);
    }

    @Override
    public void clear() {
      this.appID = null;
    }

    public String getAppID() {
      return this.appID;
    }

    public getAppInfo_args setAppID(String appID) {
      this.appID = appID;
      return this;
    }

    public void unsetAppID() {
      this.appID = null;
    }

    /** Returns true if field appID is set (has been asigned a value) and false otherwise */
    public boolean isSetAppID() {
      return this.appID != null;
    }

    public void setAppIDIsSet(boolean value) {
      if (!value) {
        this.appID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppID();
        } else {
          setAppID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return getAppID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppInfo_args)
        return this.equals((getAppInfo_args)that);
      return false;
    }

    public boolean equals(getAppInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_appID = true && this.isSetAppID();
      boolean that_present_appID = true && that.isSetAppID();
      if (this_present_appID || that_present_appID) {
        if (!(this_present_appID && that_present_appID))
          return false;
        if (!this.appID.equals(that.appID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAppInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAppInfo_args typedOther = (getAppInfo_args)other;

      lastComparison = Boolean.valueOf(isSetAppID()).compareTo(typedOther.isSetAppID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppID()) {
        lastComparison = TBaseHelper.compareTo(this.appID, typedOther.appID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_ID
            if (field.type == TType.STRING) {
              this.appID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appID != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(this.appID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppInfo_args(");
      boolean first = true;

      sb.append("appID:");
      if (this.appID == null) {
        sb.append("null");
      } else {
        sb.append(this.appID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAppInfo_result implements TBase<getAppInfo_result, getAppInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAppInfo_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public vng.zingme.payment.thrift.T_AppInfo success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_AppInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getAppInfo_result.class, metaDataMap);
    }

    public getAppInfo_result() {
    }

    public getAppInfo_result(
      vng.zingme.payment.thrift.T_AppInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppInfo_result(getAppInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.zingme.payment.thrift.T_AppInfo(other.success);
      }
    }

    public getAppInfo_result deepCopy() {
      return new getAppInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.zingme.payment.thrift.T_AppInfo getSuccess() {
      return this.success;
    }

    public getAppInfo_result setSuccess(vng.zingme.payment.thrift.T_AppInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.zingme.payment.thrift.T_AppInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppInfo_result)
        return this.equals((getAppInfo_result)that);
      return false;
    }

    public boolean equals(getAppInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAppInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAppInfo_result typedOther = (getAppInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new vng.zingme.payment.thrift.T_AppInfo();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerGameServer_args implements TBase<registerGameServer_args, registerGameServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("registerGameServer_args");

    private static final TField APP_INFO_FIELD_DESC = new TField("appInfo", TType.STRUCT, (short)1);
    private static final TField ADMIN_SIG_FIELD_DESC = new TField("adminSig", TType.STRING, (short)2);
    private static final TField IS_NEWKEY_FIELD_DESC = new TField("isNewkey", TType.BOOL, (short)3);

    public vng.zingme.payment.thrift.T_AppInfo appInfo;
    public String adminSig;
    public boolean isNewkey;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      APP_INFO((short)1, "appInfo"),
      ADMIN_SIG((short)2, "adminSig"),
      IS_NEWKEY((short)3, "isNewkey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_INFO
            return APP_INFO;
          case 2: // ADMIN_SIG
            return ADMIN_SIG;
          case 3: // IS_NEWKEY
            return IS_NEWKEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISNEWKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_INFO, new FieldMetaData("appInfo", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_AppInfo.class)));
      tmpMap.put(_Fields.ADMIN_SIG, new FieldMetaData("adminSig", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.IS_NEWKEY, new FieldMetaData("isNewkey", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(registerGameServer_args.class, metaDataMap);
    }

    public registerGameServer_args() {
    }

    public registerGameServer_args(
      vng.zingme.payment.thrift.T_AppInfo appInfo,
      String adminSig,
      boolean isNewkey)
    {
      this();
      this.appInfo = appInfo;
      this.adminSig = adminSig;
      this.isNewkey = isNewkey;
      setIsNewkeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerGameServer_args(registerGameServer_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAppInfo()) {
        this.appInfo = new vng.zingme.payment.thrift.T_AppInfo(other.appInfo);
      }
      if (other.isSetAdminSig()) {
        this.adminSig = other.adminSig;
      }
      this.isNewkey = other.isNewkey;
    }

    public registerGameServer_args deepCopy() {
      return new registerGameServer_args(this);
    }

    @Override
    public void clear() {
      this.appInfo = null;
      this.adminSig = null;
      setIsNewkeyIsSet(false);
      this.isNewkey = false;
    }

    public vng.zingme.payment.thrift.T_AppInfo getAppInfo() {
      return this.appInfo;
    }

    public registerGameServer_args setAppInfo(vng.zingme.payment.thrift.T_AppInfo appInfo) {
      this.appInfo = appInfo;
      return this;
    }

    public void unsetAppInfo() {
      this.appInfo = null;
    }

    /** Returns true if field appInfo is set (has been asigned a value) and false otherwise */
    public boolean isSetAppInfo() {
      return this.appInfo != null;
    }

    public void setAppInfoIsSet(boolean value) {
      if (!value) {
        this.appInfo = null;
      }
    }

    public String getAdminSig() {
      return this.adminSig;
    }

    public registerGameServer_args setAdminSig(String adminSig) {
      this.adminSig = adminSig;
      return this;
    }

    public void unsetAdminSig() {
      this.adminSig = null;
    }

    /** Returns true if field adminSig is set (has been asigned a value) and false otherwise */
    public boolean isSetAdminSig() {
      return this.adminSig != null;
    }

    public void setAdminSigIsSet(boolean value) {
      if (!value) {
        this.adminSig = null;
      }
    }

    public boolean isIsNewkey() {
      return this.isNewkey;
    }

    public registerGameServer_args setIsNewkey(boolean isNewkey) {
      this.isNewkey = isNewkey;
      setIsNewkeyIsSet(true);
      return this;
    }

    public void unsetIsNewkey() {
      __isset_bit_vector.clear(__ISNEWKEY_ISSET_ID);
    }

    /** Returns true if field isNewkey is set (has been asigned a value) and false otherwise */
    public boolean isSetIsNewkey() {
      return __isset_bit_vector.get(__ISNEWKEY_ISSET_ID);
    }

    public void setIsNewkeyIsSet(boolean value) {
      __isset_bit_vector.set(__ISNEWKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_INFO:
        if (value == null) {
          unsetAppInfo();
        } else {
          setAppInfo((vng.zingme.payment.thrift.T_AppInfo)value);
        }
        break;

      case ADMIN_SIG:
        if (value == null) {
          unsetAdminSig();
        } else {
          setAdminSig((String)value);
        }
        break;

      case IS_NEWKEY:
        if (value == null) {
          unsetIsNewkey();
        } else {
          setIsNewkey((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_INFO:
        return getAppInfo();

      case ADMIN_SIG:
        return getAdminSig();

      case IS_NEWKEY:
        return new Boolean(isIsNewkey());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_INFO:
        return isSetAppInfo();
      case ADMIN_SIG:
        return isSetAdminSig();
      case IS_NEWKEY:
        return isSetIsNewkey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerGameServer_args)
        return this.equals((registerGameServer_args)that);
      return false;
    }

    public boolean equals(registerGameServer_args that) {
      if (that == null)
        return false;

      boolean this_present_appInfo = true && this.isSetAppInfo();
      boolean that_present_appInfo = true && that.isSetAppInfo();
      if (this_present_appInfo || that_present_appInfo) {
        if (!(this_present_appInfo && that_present_appInfo))
          return false;
        if (!this.appInfo.equals(that.appInfo))
          return false;
      }

      boolean this_present_adminSig = true && this.isSetAdminSig();
      boolean that_present_adminSig = true && that.isSetAdminSig();
      if (this_present_adminSig || that_present_adminSig) {
        if (!(this_present_adminSig && that_present_adminSig))
          return false;
        if (!this.adminSig.equals(that.adminSig))
          return false;
      }

      boolean this_present_isNewkey = true;
      boolean that_present_isNewkey = true;
      if (this_present_isNewkey || that_present_isNewkey) {
        if (!(this_present_isNewkey && that_present_isNewkey))
          return false;
        if (this.isNewkey != that.isNewkey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerGameServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerGameServer_args typedOther = (registerGameServer_args)other;

      lastComparison = Boolean.valueOf(isSetAppInfo()).compareTo(typedOther.isSetAppInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppInfo()) {
        lastComparison = TBaseHelper.compareTo(this.appInfo, typedOther.appInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdminSig()).compareTo(typedOther.isSetAdminSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminSig()) {
        lastComparison = TBaseHelper.compareTo(this.adminSig, typedOther.adminSig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsNewkey()).compareTo(typedOther.isSetIsNewkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsNewkey()) {
        lastComparison = TBaseHelper.compareTo(this.isNewkey, typedOther.isNewkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_INFO
            if (field.type == TType.STRUCT) {
              this.appInfo = new vng.zingme.payment.thrift.T_AppInfo();
              this.appInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ADMIN_SIG
            if (field.type == TType.STRING) {
              this.adminSig = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // IS_NEWKEY
            if (field.type == TType.BOOL) {
              this.isNewkey = iprot.readBool();
              setIsNewkeyIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appInfo != null) {
        oprot.writeFieldBegin(APP_INFO_FIELD_DESC);
        this.appInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.adminSig != null) {
        oprot.writeFieldBegin(ADMIN_SIG_FIELD_DESC);
        oprot.writeString(this.adminSig);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_NEWKEY_FIELD_DESC);
      oprot.writeBool(this.isNewkey);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerGameServer_args(");
      boolean first = true;

      sb.append("appInfo:");
      if (this.appInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.appInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("adminSig:");
      if (this.adminSig == null) {
        sb.append("null");
      } else {
        sb.append(this.adminSig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isNewkey:");
      sb.append(this.isNewkey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerGameServer_result implements TBase<registerGameServer_result, registerGameServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("registerGameServer_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(registerGameServer_result.class, metaDataMap);
    }

    public registerGameServer_result() {
    }

    public registerGameServer_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerGameServer_result(registerGameServer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public registerGameServer_result deepCopy() {
      return new registerGameServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public registerGameServer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerGameServer_result)
        return this.equals((registerGameServer_result)that);
      return false;
    }

    public boolean equals(registerGameServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerGameServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerGameServer_result typedOther = (registerGameServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerGameServer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerPayLetterServer_args implements TBase<registerPayLetterServer_args, registerPayLetterServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("registerPayLetterServer_args");

    private static final TField APP_INFO_FIELD_DESC = new TField("appInfo", TType.STRUCT, (short)1);
    private static final TField ADMIN_SIG_FIELD_DESC = new TField("adminSig", TType.STRING, (short)2);

    public vng.zingme.payment.thrift.T_AppInfo appInfo;
    public String adminSig;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      APP_INFO((short)1, "appInfo"),
      ADMIN_SIG((short)2, "adminSig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_INFO
            return APP_INFO;
          case 2: // ADMIN_SIG
            return ADMIN_SIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_INFO, new FieldMetaData("appInfo", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_AppInfo.class)));
      tmpMap.put(_Fields.ADMIN_SIG, new FieldMetaData("adminSig", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(registerPayLetterServer_args.class, metaDataMap);
    }

    public registerPayLetterServer_args() {
    }

    public registerPayLetterServer_args(
      vng.zingme.payment.thrift.T_AppInfo appInfo,
      String adminSig)
    {
      this();
      this.appInfo = appInfo;
      this.adminSig = adminSig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerPayLetterServer_args(registerPayLetterServer_args other) {
      if (other.isSetAppInfo()) {
        this.appInfo = new vng.zingme.payment.thrift.T_AppInfo(other.appInfo);
      }
      if (other.isSetAdminSig()) {
        this.adminSig = other.adminSig;
      }
    }

    public registerPayLetterServer_args deepCopy() {
      return new registerPayLetterServer_args(this);
    }

    @Override
    public void clear() {
      this.appInfo = null;
      this.adminSig = null;
    }

    public vng.zingme.payment.thrift.T_AppInfo getAppInfo() {
      return this.appInfo;
    }

    public registerPayLetterServer_args setAppInfo(vng.zingme.payment.thrift.T_AppInfo appInfo) {
      this.appInfo = appInfo;
      return this;
    }

    public void unsetAppInfo() {
      this.appInfo = null;
    }

    /** Returns true if field appInfo is set (has been asigned a value) and false otherwise */
    public boolean isSetAppInfo() {
      return this.appInfo != null;
    }

    public void setAppInfoIsSet(boolean value) {
      if (!value) {
        this.appInfo = null;
      }
    }

    public String getAdminSig() {
      return this.adminSig;
    }

    public registerPayLetterServer_args setAdminSig(String adminSig) {
      this.adminSig = adminSig;
      return this;
    }

    public void unsetAdminSig() {
      this.adminSig = null;
    }

    /** Returns true if field adminSig is set (has been asigned a value) and false otherwise */
    public boolean isSetAdminSig() {
      return this.adminSig != null;
    }

    public void setAdminSigIsSet(boolean value) {
      if (!value) {
        this.adminSig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_INFO:
        if (value == null) {
          unsetAppInfo();
        } else {
          setAppInfo((vng.zingme.payment.thrift.T_AppInfo)value);
        }
        break;

      case ADMIN_SIG:
        if (value == null) {
          unsetAdminSig();
        } else {
          setAdminSig((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_INFO:
        return getAppInfo();

      case ADMIN_SIG:
        return getAdminSig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_INFO:
        return isSetAppInfo();
      case ADMIN_SIG:
        return isSetAdminSig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerPayLetterServer_args)
        return this.equals((registerPayLetterServer_args)that);
      return false;
    }

    public boolean equals(registerPayLetterServer_args that) {
      if (that == null)
        return false;

      boolean this_present_appInfo = true && this.isSetAppInfo();
      boolean that_present_appInfo = true && that.isSetAppInfo();
      if (this_present_appInfo || that_present_appInfo) {
        if (!(this_present_appInfo && that_present_appInfo))
          return false;
        if (!this.appInfo.equals(that.appInfo))
          return false;
      }

      boolean this_present_adminSig = true && this.isSetAdminSig();
      boolean that_present_adminSig = true && that.isSetAdminSig();
      if (this_present_adminSig || that_present_adminSig) {
        if (!(this_present_adminSig && that_present_adminSig))
          return false;
        if (!this.adminSig.equals(that.adminSig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerPayLetterServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerPayLetterServer_args typedOther = (registerPayLetterServer_args)other;

      lastComparison = Boolean.valueOf(isSetAppInfo()).compareTo(typedOther.isSetAppInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppInfo()) {
        lastComparison = TBaseHelper.compareTo(this.appInfo, typedOther.appInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdminSig()).compareTo(typedOther.isSetAdminSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminSig()) {
        lastComparison = TBaseHelper.compareTo(this.adminSig, typedOther.adminSig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_INFO
            if (field.type == TType.STRUCT) {
              this.appInfo = new vng.zingme.payment.thrift.T_AppInfo();
              this.appInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ADMIN_SIG
            if (field.type == TType.STRING) {
              this.adminSig = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appInfo != null) {
        oprot.writeFieldBegin(APP_INFO_FIELD_DESC);
        this.appInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.adminSig != null) {
        oprot.writeFieldBegin(ADMIN_SIG_FIELD_DESC);
        oprot.writeString(this.adminSig);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerPayLetterServer_args(");
      boolean first = true;

      sb.append("appInfo:");
      if (this.appInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.appInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("adminSig:");
      if (this.adminSig == null) {
        sb.append("null");
      } else {
        sb.append(this.adminSig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerPayLetterServer_result implements TBase<registerPayLetterServer_result, registerPayLetterServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("registerPayLetterServer_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(registerPayLetterServer_result.class, metaDataMap);
    }

    public registerPayLetterServer_result() {
    }

    public registerPayLetterServer_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerPayLetterServer_result(registerPayLetterServer_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public registerPayLetterServer_result deepCopy() {
      return new registerPayLetterServer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public registerPayLetterServer_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerPayLetterServer_result)
        return this.equals((registerPayLetterServer_result)that);
      return false;
    }

    public boolean equals(registerPayLetterServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerPayLetterServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerPayLetterServer_result typedOther = (registerPayLetterServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerPayLetterServer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllAppInfo_args implements TBase<getAllAppInfo_args, getAllAppInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllAppInfo_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getAllAppInfo_args.class, metaDataMap);
    }

    public getAllAppInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAppInfo_args(getAllAppInfo_args other) {
    }

    public getAllAppInfo_args deepCopy() {
      return new getAllAppInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAppInfo_args)
        return this.equals((getAllAppInfo_args)that);
      return false;
    }

    public boolean equals(getAllAppInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllAppInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllAppInfo_args typedOther = (getAllAppInfo_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllAppInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllAppInfo_result implements TBase<getAllAppInfo_result, getAllAppInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllAppInfo_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    public List<vng.zingme.payment.thrift.T_AppInfo> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_AppInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getAllAppInfo_result.class, metaDataMap);
    }

    public getAllAppInfo_result() {
    }

    public getAllAppInfo_result(
      List<vng.zingme.payment.thrift.T_AppInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAppInfo_result(getAllAppInfo_result other) {
      if (other.isSetSuccess()) {
        List<vng.zingme.payment.thrift.T_AppInfo> __this__success = new ArrayList<vng.zingme.payment.thrift.T_AppInfo>();
        for (vng.zingme.payment.thrift.T_AppInfo other_element : other.success) {
          __this__success.add(new vng.zingme.payment.thrift.T_AppInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllAppInfo_result deepCopy() {
      return new getAllAppInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<vng.zingme.payment.thrift.T_AppInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(vng.zingme.payment.thrift.T_AppInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<vng.zingme.payment.thrift.T_AppInfo>();
      }
      this.success.add(elem);
    }

    public List<vng.zingme.payment.thrift.T_AppInfo> getSuccess() {
      return this.success;
    }

    public getAllAppInfo_result setSuccess(List<vng.zingme.payment.thrift.T_AppInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<vng.zingme.payment.thrift.T_AppInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAppInfo_result)
        return this.equals((getAllAppInfo_result)that);
      return false;
    }

    public boolean equals(getAllAppInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllAppInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllAppInfo_result typedOther = (getAllAppInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list8 = iprot.readListBegin();
                this.success = new ArrayList<vng.zingme.payment.thrift.T_AppInfo>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  vng.zingme.payment.thrift.T_AppInfo _elem10;
                  _elem10 = new vng.zingme.payment.thrift.T_AppInfo();
                  _elem10.read(iprot);
                  this.success.add(_elem10);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (vng.zingme.payment.thrift.T_AppInfo _iter11 : this.success)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllAppInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addIdToWhitelist_args implements TBase<addIdToWhitelist_args, addIdToWhitelist_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("addIdToWhitelist_args");

    private static final TField APP_ID_FIELD_DESC = new TField("appID", TType.STRING, (short)1);
    private static final TField USER_ID_FIELD_DESC = new TField("userID", TType.I32, (short)2);

    public String appID;
    public int userID;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      APP_ID((short)1, "appID"),
      USER_ID((short)2, "userID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new FieldMetaData("appID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new FieldMetaData("userID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(addIdToWhitelist_args.class, metaDataMap);
    }

    public addIdToWhitelist_args() {
    }

    public addIdToWhitelist_args(
      String appID,
      int userID)
    {
      this();
      this.appID = appID;
      this.userID = userID;
      setUserIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addIdToWhitelist_args(addIdToWhitelist_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAppID()) {
        this.appID = other.appID;
      }
      this.userID = other.userID;
    }

    public addIdToWhitelist_args deepCopy() {
      return new addIdToWhitelist_args(this);
    }

    @Override
    public void clear() {
      this.appID = null;
      setUserIDIsSet(false);
      this.userID = 0;
    }

    public String getAppID() {
      return this.appID;
    }

    public addIdToWhitelist_args setAppID(String appID) {
      this.appID = appID;
      return this;
    }

    public void unsetAppID() {
      this.appID = null;
    }

    /** Returns true if field appID is set (has been asigned a value) and false otherwise */
    public boolean isSetAppID() {
      return this.appID != null;
    }

    public void setAppIDIsSet(boolean value) {
      if (!value) {
        this.appID = null;
      }
    }

    public int getUserID() {
      return this.userID;
    }

    public addIdToWhitelist_args setUserID(int userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been asigned a value) and false otherwise */
    public boolean isSetUserID() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppID();
        } else {
          setAppID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return getAppID();

      case USER_ID:
        return new Integer(getUserID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppID();
      case USER_ID:
        return isSetUserID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addIdToWhitelist_args)
        return this.equals((addIdToWhitelist_args)that);
      return false;
    }

    public boolean equals(addIdToWhitelist_args that) {
      if (that == null)
        return false;

      boolean this_present_appID = true && this.isSetAppID();
      boolean that_present_appID = true && that.isSetAppID();
      if (this_present_appID || that_present_appID) {
        if (!(this_present_appID && that_present_appID))
          return false;
        if (!this.appID.equals(that.appID))
          return false;
      }

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addIdToWhitelist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addIdToWhitelist_args typedOther = (addIdToWhitelist_args)other;

      lastComparison = Boolean.valueOf(isSetAppID()).compareTo(typedOther.isSetAppID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppID()) {
        lastComparison = TBaseHelper.compareTo(this.appID, typedOther.appID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_ID
            if (field.type == TType.STRING) {
              this.appID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_ID
            if (field.type == TType.I32) {
              this.userID = iprot.readI32();
              setUserIDIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appID != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(this.appID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(this.userID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addIdToWhitelist_args(");
      boolean first = true;

      sb.append("appID:");
      if (this.appID == null) {
        sb.append("null");
      } else {
        sb.append(this.appID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addIdToWhitelist_result implements TBase<addIdToWhitelist_result, addIdToWhitelist_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("addIdToWhitelist_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(addIdToWhitelist_result.class, metaDataMap);
    }

    public addIdToWhitelist_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addIdToWhitelist_result(addIdToWhitelist_result other) {
    }

    public addIdToWhitelist_result deepCopy() {
      return new addIdToWhitelist_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addIdToWhitelist_result)
        return this.equals((addIdToWhitelist_result)that);
      return false;
    }

    public boolean equals(addIdToWhitelist_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addIdToWhitelist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addIdToWhitelist_result typedOther = (addIdToWhitelist_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addIdToWhitelist_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addIdsToWhitelist_args implements TBase<addIdsToWhitelist_args, addIdsToWhitelist_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("addIdsToWhitelist_args");

    private static final TField APP_ID_FIELD_DESC = new TField("appID", TType.STRING, (short)1);
    private static final TField USER_ID_FIELD_DESC = new TField("userID", TType.LIST, (short)2);

    public String appID;
    public List<Integer> userID;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      APP_ID((short)1, "appID"),
      USER_ID((short)2, "userID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new FieldMetaData("appID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new FieldMetaData("userID", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(addIdsToWhitelist_args.class, metaDataMap);
    }

    public addIdsToWhitelist_args() {
    }

    public addIdsToWhitelist_args(
      String appID,
      List<Integer> userID)
    {
      this();
      this.appID = appID;
      this.userID = userID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addIdsToWhitelist_args(addIdsToWhitelist_args other) {
      if (other.isSetAppID()) {
        this.appID = other.appID;
      }
      if (other.isSetUserID()) {
        List<Integer> __this__userID = new ArrayList<Integer>();
        for (Integer other_element : other.userID) {
          __this__userID.add(other_element);
        }
        this.userID = __this__userID;
      }
    }

    public addIdsToWhitelist_args deepCopy() {
      return new addIdsToWhitelist_args(this);
    }

    @Override
    public void clear() {
      this.appID = null;
      this.userID = null;
    }

    public String getAppID() {
      return this.appID;
    }

    public addIdsToWhitelist_args setAppID(String appID) {
      this.appID = appID;
      return this;
    }

    public void unsetAppID() {
      this.appID = null;
    }

    /** Returns true if field appID is set (has been asigned a value) and false otherwise */
    public boolean isSetAppID() {
      return this.appID != null;
    }

    public void setAppIDIsSet(boolean value) {
      if (!value) {
        this.appID = null;
      }
    }

    public int getUserIDSize() {
      return (this.userID == null) ? 0 : this.userID.size();
    }

    public java.util.Iterator<Integer> getUserIDIterator() {
      return (this.userID == null) ? null : this.userID.iterator();
    }

    public void addToUserID(int elem) {
      if (this.userID == null) {
        this.userID = new ArrayList<Integer>();
      }
      this.userID.add(elem);
    }

    public List<Integer> getUserID() {
      return this.userID;
    }

    public addIdsToWhitelist_args setUserID(List<Integer> userID) {
      this.userID = userID;
      return this;
    }

    public void unsetUserID() {
      this.userID = null;
    }

    /** Returns true if field userID is set (has been asigned a value) and false otherwise */
    public boolean isSetUserID() {
      return this.userID != null;
    }

    public void setUserIDIsSet(boolean value) {
      if (!value) {
        this.userID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppID();
        } else {
          setAppID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return getAppID();

      case USER_ID:
        return getUserID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppID();
      case USER_ID:
        return isSetUserID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addIdsToWhitelist_args)
        return this.equals((addIdsToWhitelist_args)that);
      return false;
    }

    public boolean equals(addIdsToWhitelist_args that) {
      if (that == null)
        return false;

      boolean this_present_appID = true && this.isSetAppID();
      boolean that_present_appID = true && that.isSetAppID();
      if (this_present_appID || that_present_appID) {
        if (!(this_present_appID && that_present_appID))
          return false;
        if (!this.appID.equals(that.appID))
          return false;
      }

      boolean this_present_userID = true && this.isSetUserID();
      boolean that_present_userID = true && that.isSetUserID();
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (!this.userID.equals(that.userID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addIdsToWhitelist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addIdsToWhitelist_args typedOther = (addIdsToWhitelist_args)other;

      lastComparison = Boolean.valueOf(isSetAppID()).compareTo(typedOther.isSetAppID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppID()) {
        lastComparison = TBaseHelper.compareTo(this.appID, typedOther.appID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_ID
            if (field.type == TType.STRING) {
              this.appID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_ID
            if (field.type == TType.LIST) {
              {
                TList _list12 = iprot.readListBegin();
                this.userID = new ArrayList<Integer>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  int _elem14;
                  _elem14 = iprot.readI32();
                  this.userID.add(_elem14);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appID != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(this.appID);
        oprot.writeFieldEnd();
      }
      if (this.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.userID.size()));
          for (int _iter15 : this.userID)
          {
            oprot.writeI32(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addIdsToWhitelist_args(");
      boolean first = true;

      sb.append("appID:");
      if (this.appID == null) {
        sb.append("null");
      } else {
        sb.append(this.appID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      if (this.userID == null) {
        sb.append("null");
      } else {
        sb.append(this.userID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addIdsToWhitelist_result implements TBase<addIdsToWhitelist_result, addIdsToWhitelist_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("addIdsToWhitelist_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(addIdsToWhitelist_result.class, metaDataMap);
    }

    public addIdsToWhitelist_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addIdsToWhitelist_result(addIdsToWhitelist_result other) {
    }

    public addIdsToWhitelist_result deepCopy() {
      return new addIdsToWhitelist_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addIdsToWhitelist_result)
        return this.equals((addIdsToWhitelist_result)that);
      return false;
    }

    public boolean equals(addIdsToWhitelist_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addIdsToWhitelist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addIdsToWhitelist_result typedOther = (addIdsToWhitelist_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addIdsToWhitelist_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeIdFromWhitelist_args implements TBase<removeIdFromWhitelist_args, removeIdFromWhitelist_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("removeIdFromWhitelist_args");

    private static final TField APP_ID_FIELD_DESC = new TField("appID", TType.STRING, (short)1);
    private static final TField USER_ID_FIELD_DESC = new TField("userID", TType.I32, (short)2);

    public String appID;
    public int userID;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      APP_ID((short)1, "appID"),
      USER_ID((short)2, "userID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new FieldMetaData("appID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new FieldMetaData("userID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(removeIdFromWhitelist_args.class, metaDataMap);
    }

    public removeIdFromWhitelist_args() {
    }

    public removeIdFromWhitelist_args(
      String appID,
      int userID)
    {
      this();
      this.appID = appID;
      this.userID = userID;
      setUserIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeIdFromWhitelist_args(removeIdFromWhitelist_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAppID()) {
        this.appID = other.appID;
      }
      this.userID = other.userID;
    }

    public removeIdFromWhitelist_args deepCopy() {
      return new removeIdFromWhitelist_args(this);
    }

    @Override
    public void clear() {
      this.appID = null;
      setUserIDIsSet(false);
      this.userID = 0;
    }

    public String getAppID() {
      return this.appID;
    }

    public removeIdFromWhitelist_args setAppID(String appID) {
      this.appID = appID;
      return this;
    }

    public void unsetAppID() {
      this.appID = null;
    }

    /** Returns true if field appID is set (has been asigned a value) and false otherwise */
    public boolean isSetAppID() {
      return this.appID != null;
    }

    public void setAppIDIsSet(boolean value) {
      if (!value) {
        this.appID = null;
      }
    }

    public int getUserID() {
      return this.userID;
    }

    public removeIdFromWhitelist_args setUserID(int userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been asigned a value) and false otherwise */
    public boolean isSetUserID() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppID();
        } else {
          setAppID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return getAppID();

      case USER_ID:
        return new Integer(getUserID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppID();
      case USER_ID:
        return isSetUserID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeIdFromWhitelist_args)
        return this.equals((removeIdFromWhitelist_args)that);
      return false;
    }

    public boolean equals(removeIdFromWhitelist_args that) {
      if (that == null)
        return false;

      boolean this_present_appID = true && this.isSetAppID();
      boolean that_present_appID = true && that.isSetAppID();
      if (this_present_appID || that_present_appID) {
        if (!(this_present_appID && that_present_appID))
          return false;
        if (!this.appID.equals(that.appID))
          return false;
      }

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeIdFromWhitelist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeIdFromWhitelist_args typedOther = (removeIdFromWhitelist_args)other;

      lastComparison = Boolean.valueOf(isSetAppID()).compareTo(typedOther.isSetAppID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppID()) {
        lastComparison = TBaseHelper.compareTo(this.appID, typedOther.appID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_ID
            if (field.type == TType.STRING) {
              this.appID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_ID
            if (field.type == TType.I32) {
              this.userID = iprot.readI32();
              setUserIDIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appID != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(this.appID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(this.userID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeIdFromWhitelist_args(");
      boolean first = true;

      sb.append("appID:");
      if (this.appID == null) {
        sb.append("null");
      } else {
        sb.append(this.appID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeIdFromWhitelist_result implements TBase<removeIdFromWhitelist_result, removeIdFromWhitelist_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("removeIdFromWhitelist_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(removeIdFromWhitelist_result.class, metaDataMap);
    }

    public removeIdFromWhitelist_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeIdFromWhitelist_result(removeIdFromWhitelist_result other) {
    }

    public removeIdFromWhitelist_result deepCopy() {
      return new removeIdFromWhitelist_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeIdFromWhitelist_result)
        return this.equals((removeIdFromWhitelist_result)that);
      return false;
    }

    public boolean equals(removeIdFromWhitelist_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeIdFromWhitelist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeIdFromWhitelist_result typedOther = (removeIdFromWhitelist_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeIdFromWhitelist_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
