/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package vng.zingme.payment.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class T_ReportSummary implements TBase<T_ReportSummary, T_ReportSummary._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("T_ReportSummary");

  private static final TField AGENT_ID_FIELD_DESC = new TField("agentID", TType.STRING, (short)1);
  private static final TField START_TIME_FIELD_DESC = new TField("startTime", TType.STRING, (short)2);
  private static final TField END_TIME_FIELD_DESC = new TField("endTime", TType.STRING, (short)3);
  private static final TField TOTAL_TRANSACTION_FIELD_DESC = new TField("totalTransaction", TType.I32, (short)4);
  private static final TField TOTAL_TRANSACTION_SUCCESS_FIELD_DESC = new TField("totalTransactionSuccess", TType.I32, (short)5);
  private static final TField TOTAL_TRANSACTION_FAIL_FIELD_DESC = new TField("totalTransactionFail", TType.I32, (short)6);
  private static final TField TOTAL_MONEY_FIELD_DESC = new TField("totalMoney", TType.DOUBLE, (short)7);
  private static final TField TOTAL_TRANSACTION_TIME_OUT_FIELD_DESC = new TField("totalTransactionTimeOut", TType.I32, (short)8);
  private static final TField TOTAL_TRANSACTION_NET_ERROR_FIELD_DESC = new TField("totalTransactionNetError", TType.I32, (short)9);
  private static final TField TOTAL_DIFF_USER_FIELD_DESC = new TField("totalDiffUser", TType.I32, (short)10);

  public String agentID;
  public String startTime;
  public String endTime;
  public int totalTransaction;
  public int totalTransactionSuccess;
  public int totalTransactionFail;
  public double totalMoney;
  public int totalTransactionTimeOut;
  public int totalTransactionNetError;
  public int totalDiffUser;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    AGENT_ID((short)1, "agentID"),
    START_TIME((short)2, "startTime"),
    END_TIME((short)3, "endTime"),
    TOTAL_TRANSACTION((short)4, "totalTransaction"),
    TOTAL_TRANSACTION_SUCCESS((short)5, "totalTransactionSuccess"),
    TOTAL_TRANSACTION_FAIL((short)6, "totalTransactionFail"),
    TOTAL_MONEY((short)7, "totalMoney"),
    TOTAL_TRANSACTION_TIME_OUT((short)8, "totalTransactionTimeOut"),
    TOTAL_TRANSACTION_NET_ERROR((short)9, "totalTransactionNetError"),
    TOTAL_DIFF_USER((short)10, "totalDiffUser");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_ID
          return AGENT_ID;
        case 2: // START_TIME
          return START_TIME;
        case 3: // END_TIME
          return END_TIME;
        case 4: // TOTAL_TRANSACTION
          return TOTAL_TRANSACTION;
        case 5: // TOTAL_TRANSACTION_SUCCESS
          return TOTAL_TRANSACTION_SUCCESS;
        case 6: // TOTAL_TRANSACTION_FAIL
          return TOTAL_TRANSACTION_FAIL;
        case 7: // TOTAL_MONEY
          return TOTAL_MONEY;
        case 8: // TOTAL_TRANSACTION_TIME_OUT
          return TOTAL_TRANSACTION_TIME_OUT;
        case 9: // TOTAL_TRANSACTION_NET_ERROR
          return TOTAL_TRANSACTION_NET_ERROR;
        case 10: // TOTAL_DIFF_USER
          return TOTAL_DIFF_USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALTRANSACTION_ISSET_ID = 0;
  private static final int __TOTALTRANSACTIONSUCCESS_ISSET_ID = 1;
  private static final int __TOTALTRANSACTIONFAIL_ISSET_ID = 2;
  private static final int __TOTALMONEY_ISSET_ID = 3;
  private static final int __TOTALTRANSACTIONTIMEOUT_ISSET_ID = 4;
  private static final int __TOTALTRANSACTIONNETERROR_ISSET_ID = 5;
  private static final int __TOTALDIFFUSER_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_ID, new FieldMetaData("agentID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new FieldMetaData("startTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new FieldMetaData("endTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TOTAL_TRANSACTION, new FieldMetaData("totalTransaction", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TOTAL_TRANSACTION_SUCCESS, new FieldMetaData("totalTransactionSuccess", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TOTAL_TRANSACTION_FAIL, new FieldMetaData("totalTransactionFail", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TOTAL_MONEY, new FieldMetaData("totalMoney", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_TRANSACTION_TIME_OUT, new FieldMetaData("totalTransactionTimeOut", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TOTAL_TRANSACTION_NET_ERROR, new FieldMetaData("totalTransactionNetError", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TOTAL_DIFF_USER, new FieldMetaData("totalDiffUser", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(T_ReportSummary.class, metaDataMap);
  }

  public T_ReportSummary() {
  }

  public T_ReportSummary(
    String agentID,
    String startTime,
    String endTime,
    int totalTransaction,
    int totalTransactionSuccess,
    int totalTransactionFail,
    double totalMoney,
    int totalTransactionTimeOut,
    int totalTransactionNetError,
    int totalDiffUser)
  {
    this();
    this.agentID = agentID;
    this.startTime = startTime;
    this.endTime = endTime;
    this.totalTransaction = totalTransaction;
    setTotalTransactionIsSet(true);
    this.totalTransactionSuccess = totalTransactionSuccess;
    setTotalTransactionSuccessIsSet(true);
    this.totalTransactionFail = totalTransactionFail;
    setTotalTransactionFailIsSet(true);
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    this.totalTransactionTimeOut = totalTransactionTimeOut;
    setTotalTransactionTimeOutIsSet(true);
    this.totalTransactionNetError = totalTransactionNetError;
    setTotalTransactionNetErrorIsSet(true);
    this.totalDiffUser = totalDiffUser;
    setTotalDiffUserIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public T_ReportSummary(T_ReportSummary other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAgentID()) {
      this.agentID = other.agentID;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.totalTransaction = other.totalTransaction;
    this.totalTransactionSuccess = other.totalTransactionSuccess;
    this.totalTransactionFail = other.totalTransactionFail;
    this.totalMoney = other.totalMoney;
    this.totalTransactionTimeOut = other.totalTransactionTimeOut;
    this.totalTransactionNetError = other.totalTransactionNetError;
    this.totalDiffUser = other.totalDiffUser;
  }

  public T_ReportSummary deepCopy() {
    return new T_ReportSummary(this);
  }

  @Override
  public void clear() {
    this.agentID = null;
    this.startTime = null;
    this.endTime = null;
    setTotalTransactionIsSet(false);
    this.totalTransaction = 0;
    setTotalTransactionSuccessIsSet(false);
    this.totalTransactionSuccess = 0;
    setTotalTransactionFailIsSet(false);
    this.totalTransactionFail = 0;
    setTotalMoneyIsSet(false);
    this.totalMoney = 0.0;
    setTotalTransactionTimeOutIsSet(false);
    this.totalTransactionTimeOut = 0;
    setTotalTransactionNetErrorIsSet(false);
    this.totalTransactionNetError = 0;
    setTotalDiffUserIsSet(false);
    this.totalDiffUser = 0;
  }

  public String getAgentID() {
    return this.agentID;
  }

  public T_ReportSummary setAgentID(String agentID) {
    this.agentID = agentID;
    return this;
  }

  public void unsetAgentID() {
    this.agentID = null;
  }

  /** Returns true if field agentID is set (has been asigned a value) and false otherwise */
  public boolean isSetAgentID() {
    return this.agentID != null;
  }

  public void setAgentIDIsSet(boolean value) {
    if (!value) {
      this.agentID = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public T_ReportSummary setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been asigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public T_ReportSummary setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been asigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public int getTotalTransaction() {
    return this.totalTransaction;
  }

  public T_ReportSummary setTotalTransaction(int totalTransaction) {
    this.totalTransaction = totalTransaction;
    setTotalTransactionIsSet(true);
    return this;
  }

  public void unsetTotalTransaction() {
    __isset_bit_vector.clear(__TOTALTRANSACTION_ISSET_ID);
  }

  /** Returns true if field totalTransaction is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalTransaction() {
    return __isset_bit_vector.get(__TOTALTRANSACTION_ISSET_ID);
  }

  public void setTotalTransactionIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALTRANSACTION_ISSET_ID, value);
  }

  public int getTotalTransactionSuccess() {
    return this.totalTransactionSuccess;
  }

  public T_ReportSummary setTotalTransactionSuccess(int totalTransactionSuccess) {
    this.totalTransactionSuccess = totalTransactionSuccess;
    setTotalTransactionSuccessIsSet(true);
    return this;
  }

  public void unsetTotalTransactionSuccess() {
    __isset_bit_vector.clear(__TOTALTRANSACTIONSUCCESS_ISSET_ID);
  }

  /** Returns true if field totalTransactionSuccess is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalTransactionSuccess() {
    return __isset_bit_vector.get(__TOTALTRANSACTIONSUCCESS_ISSET_ID);
  }

  public void setTotalTransactionSuccessIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALTRANSACTIONSUCCESS_ISSET_ID, value);
  }

  public int getTotalTransactionFail() {
    return this.totalTransactionFail;
  }

  public T_ReportSummary setTotalTransactionFail(int totalTransactionFail) {
    this.totalTransactionFail = totalTransactionFail;
    setTotalTransactionFailIsSet(true);
    return this;
  }

  public void unsetTotalTransactionFail() {
    __isset_bit_vector.clear(__TOTALTRANSACTIONFAIL_ISSET_ID);
  }

  /** Returns true if field totalTransactionFail is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalTransactionFail() {
    return __isset_bit_vector.get(__TOTALTRANSACTIONFAIL_ISSET_ID);
  }

  public void setTotalTransactionFailIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALTRANSACTIONFAIL_ISSET_ID, value);
  }

  public double getTotalMoney() {
    return this.totalMoney;
  }

  public T_ReportSummary setTotalMoney(double totalMoney) {
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    return this;
  }

  public void unsetTotalMoney() {
    __isset_bit_vector.clear(__TOTALMONEY_ISSET_ID);
  }

  /** Returns true if field totalMoney is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalMoney() {
    return __isset_bit_vector.get(__TOTALMONEY_ISSET_ID);
  }

  public void setTotalMoneyIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALMONEY_ISSET_ID, value);
  }

  public int getTotalTransactionTimeOut() {
    return this.totalTransactionTimeOut;
  }

  public T_ReportSummary setTotalTransactionTimeOut(int totalTransactionTimeOut) {
    this.totalTransactionTimeOut = totalTransactionTimeOut;
    setTotalTransactionTimeOutIsSet(true);
    return this;
  }

  public void unsetTotalTransactionTimeOut() {
    __isset_bit_vector.clear(__TOTALTRANSACTIONTIMEOUT_ISSET_ID);
  }

  /** Returns true if field totalTransactionTimeOut is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalTransactionTimeOut() {
    return __isset_bit_vector.get(__TOTALTRANSACTIONTIMEOUT_ISSET_ID);
  }

  public void setTotalTransactionTimeOutIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALTRANSACTIONTIMEOUT_ISSET_ID, value);
  }

  public int getTotalTransactionNetError() {
    return this.totalTransactionNetError;
  }

  public T_ReportSummary setTotalTransactionNetError(int totalTransactionNetError) {
    this.totalTransactionNetError = totalTransactionNetError;
    setTotalTransactionNetErrorIsSet(true);
    return this;
  }

  public void unsetTotalTransactionNetError() {
    __isset_bit_vector.clear(__TOTALTRANSACTIONNETERROR_ISSET_ID);
  }

  /** Returns true if field totalTransactionNetError is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalTransactionNetError() {
    return __isset_bit_vector.get(__TOTALTRANSACTIONNETERROR_ISSET_ID);
  }

  public void setTotalTransactionNetErrorIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALTRANSACTIONNETERROR_ISSET_ID, value);
  }

  public int getTotalDiffUser() {
    return this.totalDiffUser;
  }

  public T_ReportSummary setTotalDiffUser(int totalDiffUser) {
    this.totalDiffUser = totalDiffUser;
    setTotalDiffUserIsSet(true);
    return this;
  }

  public void unsetTotalDiffUser() {
    __isset_bit_vector.clear(__TOTALDIFFUSER_ISSET_ID);
  }

  /** Returns true if field totalDiffUser is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalDiffUser() {
    return __isset_bit_vector.get(__TOTALDIFFUSER_ISSET_ID);
  }

  public void setTotalDiffUserIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALDIFFUSER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_ID:
      if (value == null) {
        unsetAgentID();
      } else {
        setAgentID((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case TOTAL_TRANSACTION:
      if (value == null) {
        unsetTotalTransaction();
      } else {
        setTotalTransaction((Integer)value);
      }
      break;

    case TOTAL_TRANSACTION_SUCCESS:
      if (value == null) {
        unsetTotalTransactionSuccess();
      } else {
        setTotalTransactionSuccess((Integer)value);
      }
      break;

    case TOTAL_TRANSACTION_FAIL:
      if (value == null) {
        unsetTotalTransactionFail();
      } else {
        setTotalTransactionFail((Integer)value);
      }
      break;

    case TOTAL_MONEY:
      if (value == null) {
        unsetTotalMoney();
      } else {
        setTotalMoney((Double)value);
      }
      break;

    case TOTAL_TRANSACTION_TIME_OUT:
      if (value == null) {
        unsetTotalTransactionTimeOut();
      } else {
        setTotalTransactionTimeOut((Integer)value);
      }
      break;

    case TOTAL_TRANSACTION_NET_ERROR:
      if (value == null) {
        unsetTotalTransactionNetError();
      } else {
        setTotalTransactionNetError((Integer)value);
      }
      break;

    case TOTAL_DIFF_USER:
      if (value == null) {
        unsetTotalDiffUser();
      } else {
        setTotalDiffUser((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_ID:
      return getAgentID();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case TOTAL_TRANSACTION:
      return new Integer(getTotalTransaction());

    case TOTAL_TRANSACTION_SUCCESS:
      return new Integer(getTotalTransactionSuccess());

    case TOTAL_TRANSACTION_FAIL:
      return new Integer(getTotalTransactionFail());

    case TOTAL_MONEY:
      return new Double(getTotalMoney());

    case TOTAL_TRANSACTION_TIME_OUT:
      return new Integer(getTotalTransactionTimeOut());

    case TOTAL_TRANSACTION_NET_ERROR:
      return new Integer(getTotalTransactionNetError());

    case TOTAL_DIFF_USER:
      return new Integer(getTotalDiffUser());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_ID:
      return isSetAgentID();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case TOTAL_TRANSACTION:
      return isSetTotalTransaction();
    case TOTAL_TRANSACTION_SUCCESS:
      return isSetTotalTransactionSuccess();
    case TOTAL_TRANSACTION_FAIL:
      return isSetTotalTransactionFail();
    case TOTAL_MONEY:
      return isSetTotalMoney();
    case TOTAL_TRANSACTION_TIME_OUT:
      return isSetTotalTransactionTimeOut();
    case TOTAL_TRANSACTION_NET_ERROR:
      return isSetTotalTransactionNetError();
    case TOTAL_DIFF_USER:
      return isSetTotalDiffUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof T_ReportSummary)
      return this.equals((T_ReportSummary)that);
    return false;
  }

  public boolean equals(T_ReportSummary that) {
    if (that == null)
      return false;

    boolean this_present_agentID = true && this.isSetAgentID();
    boolean that_present_agentID = true && that.isSetAgentID();
    if (this_present_agentID || that_present_agentID) {
      if (!(this_present_agentID && that_present_agentID))
        return false;
      if (!this.agentID.equals(that.agentID))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_totalTransaction = true;
    boolean that_present_totalTransaction = true;
    if (this_present_totalTransaction || that_present_totalTransaction) {
      if (!(this_present_totalTransaction && that_present_totalTransaction))
        return false;
      if (this.totalTransaction != that.totalTransaction)
        return false;
    }

    boolean this_present_totalTransactionSuccess = true;
    boolean that_present_totalTransactionSuccess = true;
    if (this_present_totalTransactionSuccess || that_present_totalTransactionSuccess) {
      if (!(this_present_totalTransactionSuccess && that_present_totalTransactionSuccess))
        return false;
      if (this.totalTransactionSuccess != that.totalTransactionSuccess)
        return false;
    }

    boolean this_present_totalTransactionFail = true;
    boolean that_present_totalTransactionFail = true;
    if (this_present_totalTransactionFail || that_present_totalTransactionFail) {
      if (!(this_present_totalTransactionFail && that_present_totalTransactionFail))
        return false;
      if (this.totalTransactionFail != that.totalTransactionFail)
        return false;
    }

    boolean this_present_totalMoney = true;
    boolean that_present_totalMoney = true;
    if (this_present_totalMoney || that_present_totalMoney) {
      if (!(this_present_totalMoney && that_present_totalMoney))
        return false;
      if (this.totalMoney != that.totalMoney)
        return false;
    }

    boolean this_present_totalTransactionTimeOut = true;
    boolean that_present_totalTransactionTimeOut = true;
    if (this_present_totalTransactionTimeOut || that_present_totalTransactionTimeOut) {
      if (!(this_present_totalTransactionTimeOut && that_present_totalTransactionTimeOut))
        return false;
      if (this.totalTransactionTimeOut != that.totalTransactionTimeOut)
        return false;
    }

    boolean this_present_totalTransactionNetError = true;
    boolean that_present_totalTransactionNetError = true;
    if (this_present_totalTransactionNetError || that_present_totalTransactionNetError) {
      if (!(this_present_totalTransactionNetError && that_present_totalTransactionNetError))
        return false;
      if (this.totalTransactionNetError != that.totalTransactionNetError)
        return false;
    }

    boolean this_present_totalDiffUser = true;
    boolean that_present_totalDiffUser = true;
    if (this_present_totalDiffUser || that_present_totalDiffUser) {
      if (!(this_present_totalDiffUser && that_present_totalDiffUser))
        return false;
      if (this.totalDiffUser != that.totalDiffUser)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(T_ReportSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    T_ReportSummary typedOther = (T_ReportSummary)other;

    lastComparison = Boolean.valueOf(isSetAgentID()).compareTo(typedOther.isSetAgentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentID()) {
      lastComparison = TBaseHelper.compareTo(this.agentID, typedOther.agentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTransaction()).compareTo(typedOther.isSetTotalTransaction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTransaction()) {
      lastComparison = TBaseHelper.compareTo(this.totalTransaction, typedOther.totalTransaction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTransactionSuccess()).compareTo(typedOther.isSetTotalTransactionSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTransactionSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.totalTransactionSuccess, typedOther.totalTransactionSuccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTransactionFail()).compareTo(typedOther.isSetTotalTransactionFail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTransactionFail()) {
      lastComparison = TBaseHelper.compareTo(this.totalTransactionFail, typedOther.totalTransactionFail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(typedOther.isSetTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMoney()) {
      lastComparison = TBaseHelper.compareTo(this.totalMoney, typedOther.totalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTransactionTimeOut()).compareTo(typedOther.isSetTotalTransactionTimeOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTransactionTimeOut()) {
      lastComparison = TBaseHelper.compareTo(this.totalTransactionTimeOut, typedOther.totalTransactionTimeOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTransactionNetError()).compareTo(typedOther.isSetTotalTransactionNetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTransactionNetError()) {
      lastComparison = TBaseHelper.compareTo(this.totalTransactionNetError, typedOther.totalTransactionNetError);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalDiffUser()).compareTo(typedOther.isSetTotalDiffUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalDiffUser()) {
      lastComparison = TBaseHelper.compareTo(this.totalDiffUser, typedOther.totalDiffUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // AGENT_ID
          if (field.type == TType.STRING) {
            this.agentID = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // START_TIME
          if (field.type == TType.STRING) {
            this.startTime = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // END_TIME
          if (field.type == TType.STRING) {
            this.endTime = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TOTAL_TRANSACTION
          if (field.type == TType.I32) {
            this.totalTransaction = iprot.readI32();
            setTotalTransactionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TOTAL_TRANSACTION_SUCCESS
          if (field.type == TType.I32) {
            this.totalTransactionSuccess = iprot.readI32();
            setTotalTransactionSuccessIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TOTAL_TRANSACTION_FAIL
          if (field.type == TType.I32) {
            this.totalTransactionFail = iprot.readI32();
            setTotalTransactionFailIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TOTAL_MONEY
          if (field.type == TType.DOUBLE) {
            this.totalMoney = iprot.readDouble();
            setTotalMoneyIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // TOTAL_TRANSACTION_TIME_OUT
          if (field.type == TType.I32) {
            this.totalTransactionTimeOut = iprot.readI32();
            setTotalTransactionTimeOutIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // TOTAL_TRANSACTION_NET_ERROR
          if (field.type == TType.I32) {
            this.totalTransactionNetError = iprot.readI32();
            setTotalTransactionNetErrorIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // TOTAL_DIFF_USER
          if (field.type == TType.I32) {
            this.totalDiffUser = iprot.readI32();
            setTotalDiffUserIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.agentID != null) {
      oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
      oprot.writeString(this.agentID);
      oprot.writeFieldEnd();
    }
    if (this.startTime != null) {
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeString(this.startTime);
      oprot.writeFieldEnd();
    }
    if (this.endTime != null) {
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeString(this.endTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TOTAL_TRANSACTION_FIELD_DESC);
    oprot.writeI32(this.totalTransaction);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_TRANSACTION_SUCCESS_FIELD_DESC);
    oprot.writeI32(this.totalTransactionSuccess);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_TRANSACTION_FAIL_FIELD_DESC);
    oprot.writeI32(this.totalTransactionFail);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
    oprot.writeDouble(this.totalMoney);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_TRANSACTION_TIME_OUT_FIELD_DESC);
    oprot.writeI32(this.totalTransactionTimeOut);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_TRANSACTION_NET_ERROR_FIELD_DESC);
    oprot.writeI32(this.totalTransactionNetError);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_DIFF_USER_FIELD_DESC);
    oprot.writeI32(this.totalDiffUser);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("T_ReportSummary(");
    boolean first = true;

    sb.append("agentID:");
    if (this.agentID == null) {
      sb.append("null");
    } else {
      sb.append(this.agentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTransaction:");
    sb.append(this.totalTransaction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTransactionSuccess:");
    sb.append(this.totalTransactionSuccess);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTransactionFail:");
    sb.append(this.totalTransactionFail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMoney:");
    sb.append(this.totalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTransactionTimeOut:");
    sb.append(this.totalTransactionTimeOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTransactionNetError:");
    sb.append(this.totalTransactionNetError);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalDiffUser:");
    sb.append(this.totalDiffUser);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

