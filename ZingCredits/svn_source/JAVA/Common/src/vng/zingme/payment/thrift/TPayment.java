/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package vng.zingme.payment.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TPayment {

  public interface Iface {

    public vng.zingme.payment.thrift.T_Response billing(vng.zingme.payment.thrift.T_Transaction tx, vng.zingme.payment.thrift.T_Token tk) throws TException;

    public vng.zingme.payment.thrift.T_Response bill(String agentID, String encodedData, vng.zingme.payment.thrift.T_Token tk, String clientIP) throws TException;

    public void warmupCache(int userID) throws TException;

    public vng.zingme.payment.thrift.T_AccResponse getBalance(int userID) throws TException;

    public List<String> zingUnSignature(String agentID, String encodedData, int kindofkey) throws TException;

  }

  public interface AsyncIface {

    public void billing(vng.zingme.payment.thrift.T_Transaction tx, vng.zingme.payment.thrift.T_Token tk, AsyncMethodCallback<AsyncClient.billing_call> resultHandler) throws TException;

    public void bill(String agentID, String encodedData, vng.zingme.payment.thrift.T_Token tk, String clientIP, AsyncMethodCallback<AsyncClient.bill_call> resultHandler) throws TException;

    public void warmupCache(int userID, AsyncMethodCallback<AsyncClient.warmupCache_call> resultHandler) throws TException;

    public void getBalance(int userID, AsyncMethodCallback<AsyncClient.getBalance_call> resultHandler) throws TException;

    public void zingUnSignature(String agentID, String encodedData, int kindofkey, AsyncMethodCallback<AsyncClient.zingUnSignature_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public vng.zingme.payment.thrift.T_Response billing(vng.zingme.payment.thrift.T_Transaction tx, vng.zingme.payment.thrift.T_Token tk) throws TException
    {
      send_billing(tx, tk);
      return recv_billing();
    }

    public void send_billing(vng.zingme.payment.thrift.T_Transaction tx, vng.zingme.payment.thrift.T_Token tk) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("billing", TMessageType.CALL, ++seqid_));
      billing_args args = new billing_args();
      args.setTx(tx);
      args.setTk(tk);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public vng.zingme.payment.thrift.T_Response recv_billing() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "billing failed: out of sequence response");
      }
      billing_result result = new billing_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "billing failed: unknown result");
    }

    public vng.zingme.payment.thrift.T_Response bill(String agentID, String encodedData, vng.zingme.payment.thrift.T_Token tk, String clientIP) throws TException
    {
      send_bill(agentID, encodedData, tk, clientIP);
      return recv_bill();
    }

    public void send_bill(String agentID, String encodedData, vng.zingme.payment.thrift.T_Token tk, String clientIP) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("bill", TMessageType.CALL, ++seqid_));
      bill_args args = new bill_args();
      args.setAgentID(agentID);
      args.setEncodedData(encodedData);
      args.setTk(tk);
      args.setClientIP(clientIP);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public vng.zingme.payment.thrift.T_Response recv_bill() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "bill failed: out of sequence response");
      }
      bill_result result = new bill_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "bill failed: unknown result");
    }

    public void warmupCache(int userID) throws TException
    {
      send_warmupCache(userID);
    }

    public void send_warmupCache(int userID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("warmupCache", TMessageType.CALL, ++seqid_));
      warmupCache_args args = new warmupCache_args();
      args.setUserID(userID);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public vng.zingme.payment.thrift.T_AccResponse getBalance(int userID) throws TException
    {
      send_getBalance(userID);
      return recv_getBalance();
    }

    public void send_getBalance(int userID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBalance", TMessageType.CALL, ++seqid_));
      getBalance_args args = new getBalance_args();
      args.setUserID(userID);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public vng.zingme.payment.thrift.T_AccResponse recv_getBalance() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBalance failed: out of sequence response");
      }
      getBalance_result result = new getBalance_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBalance failed: unknown result");
    }

    public List<String> zingUnSignature(String agentID, String encodedData, int kindofkey) throws TException
    {
      send_zingUnSignature(agentID, encodedData, kindofkey);
      return recv_zingUnSignature();
    }

    public void send_zingUnSignature(String agentID, String encodedData, int kindofkey) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("zingUnSignature", TMessageType.CALL, ++seqid_));
      zingUnSignature_args args = new zingUnSignature_args();
      args.setAgentID(agentID);
      args.setEncodedData(encodedData);
      args.setKindofkey(kindofkey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_zingUnSignature() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "zingUnSignature failed: out of sequence response");
      }
      zingUnSignature_result result = new zingUnSignature_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "zingUnSignature failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void billing(vng.zingme.payment.thrift.T_Transaction tx, vng.zingme.payment.thrift.T_Token tk, AsyncMethodCallback<billing_call> resultHandler) throws TException {
      checkReady();
      billing_call method_call = new billing_call(tx, tk, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class billing_call extends TAsyncMethodCall {
      private vng.zingme.payment.thrift.T_Transaction tx;
      private vng.zingme.payment.thrift.T_Token tk;
      public billing_call(vng.zingme.payment.thrift.T_Transaction tx, vng.zingme.payment.thrift.T_Token tk, AsyncMethodCallback<billing_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tx = tx;
        this.tk = tk;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("billing", TMessageType.CALL, 0));
        billing_args args = new billing_args();
        args.setTx(tx);
        args.setTk(tk);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.zingme.payment.thrift.T_Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_billing();
      }
    }

    public void bill(String agentID, String encodedData, vng.zingme.payment.thrift.T_Token tk, String clientIP, AsyncMethodCallback<bill_call> resultHandler) throws TException {
      checkReady();
      bill_call method_call = new bill_call(agentID, encodedData, tk, clientIP, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class bill_call extends TAsyncMethodCall {
      private String agentID;
      private String encodedData;
      private vng.zingme.payment.thrift.T_Token tk;
      private String clientIP;
      public bill_call(String agentID, String encodedData, vng.zingme.payment.thrift.T_Token tk, String clientIP, AsyncMethodCallback<bill_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agentID = agentID;
        this.encodedData = encodedData;
        this.tk = tk;
        this.clientIP = clientIP;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("bill", TMessageType.CALL, 0));
        bill_args args = new bill_args();
        args.setAgentID(agentID);
        args.setEncodedData(encodedData);
        args.setTk(tk);
        args.setClientIP(clientIP);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.zingme.payment.thrift.T_Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bill();
      }
    }

    public void warmupCache(int userID, AsyncMethodCallback<warmupCache_call> resultHandler) throws TException {
      checkReady();
      warmupCache_call method_call = new warmupCache_call(userID, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class warmupCache_call extends TAsyncMethodCall {
      private int userID;
      public warmupCache_call(int userID, AsyncMethodCallback<warmupCache_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.userID = userID;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("warmupCache", TMessageType.CALL, 0));
        warmupCache_args args = new warmupCache_args();
        args.setUserID(userID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void getBalance(int userID, AsyncMethodCallback<getBalance_call> resultHandler) throws TException {
      checkReady();
      getBalance_call method_call = new getBalance_call(userID, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getBalance_call extends TAsyncMethodCall {
      private int userID;
      public getBalance_call(int userID, AsyncMethodCallback<getBalance_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userID = userID;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getBalance", TMessageType.CALL, 0));
        getBalance_args args = new getBalance_args();
        args.setUserID(userID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public vng.zingme.payment.thrift.T_AccResponse getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBalance();
      }
    }

    public void zingUnSignature(String agentID, String encodedData, int kindofkey, AsyncMethodCallback<zingUnSignature_call> resultHandler) throws TException {
      checkReady();
      zingUnSignature_call method_call = new zingUnSignature_call(agentID, encodedData, kindofkey, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class zingUnSignature_call extends TAsyncMethodCall {
      private String agentID;
      private String encodedData;
      private int kindofkey;
      public zingUnSignature_call(String agentID, String encodedData, int kindofkey, AsyncMethodCallback<zingUnSignature_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agentID = agentID;
        this.encodedData = encodedData;
        this.kindofkey = kindofkey;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("zingUnSignature", TMessageType.CALL, 0));
        zingUnSignature_args args = new zingUnSignature_args();
        args.setAgentID(agentID);
        args.setEncodedData(encodedData);
        args.setKindofkey(kindofkey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_zingUnSignature();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("billing", new billing());
      processMap_.put("bill", new bill());
      processMap_.put("warmupCache", new warmupCache());
      processMap_.put("getBalance", new getBalance());
      processMap_.put("zingUnSignature", new zingUnSignature());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class billing implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        billing_args args = new billing_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("billing", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        billing_result result = new billing_result();
        result.success = iface_.billing(args.tx, args.tk);
        oprot.writeMessageBegin(new TMessage("billing", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class bill implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        bill_args args = new bill_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("bill", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        bill_result result = new bill_result();
        result.success = iface_.bill(args.agentID, args.encodedData, args.tk, args.clientIP);
        oprot.writeMessageBegin(new TMessage("bill", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class warmupCache implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        warmupCache_args args = new warmupCache_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("warmupCache", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.warmupCache(args.userID);
        return;
      }
    }

    private class getBalance implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBalance_args args = new getBalance_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBalance", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBalance_result result = new getBalance_result();
        result.success = iface_.getBalance(args.userID);
        oprot.writeMessageBegin(new TMessage("getBalance", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class zingUnSignature implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        zingUnSignature_args args = new zingUnSignature_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("zingUnSignature", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        zingUnSignature_result result = new zingUnSignature_result();
        result.success = iface_.zingUnSignature(args.agentID, args.encodedData, args.kindofkey);
        oprot.writeMessageBegin(new TMessage("zingUnSignature", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class billing_args implements TBase<billing_args, billing_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("billing_args");

    private static final TField TX_FIELD_DESC = new TField("tx", TType.STRUCT, (short)1);
    private static final TField TK_FIELD_DESC = new TField("tk", TType.STRUCT, (short)2);

    public vng.zingme.payment.thrift.T_Transaction tx;
    public vng.zingme.payment.thrift.T_Token tk;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TX((short)1, "tx"),
      TK((short)2, "tk");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TX
            return TX;
          case 2: // TK
            return TK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TX, new FieldMetaData("tx", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_Transaction.class)));
      tmpMap.put(_Fields.TK, new FieldMetaData("tk", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_Token.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(billing_args.class, metaDataMap);
    }

    public billing_args() {
    }

    public billing_args(
      vng.zingme.payment.thrift.T_Transaction tx,
      vng.zingme.payment.thrift.T_Token tk)
    {
      this();
      this.tx = tx;
      this.tk = tk;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public billing_args(billing_args other) {
      if (other.isSetTx()) {
        this.tx = new vng.zingme.payment.thrift.T_Transaction(other.tx);
      }
      if (other.isSetTk()) {
        this.tk = new vng.zingme.payment.thrift.T_Token(other.tk);
      }
    }

    public billing_args deepCopy() {
      return new billing_args(this);
    }

    @Override
    public void clear() {
      this.tx = null;
      this.tk = null;
    }

    public vng.zingme.payment.thrift.T_Transaction getTx() {
      return this.tx;
    }

    public billing_args setTx(vng.zingme.payment.thrift.T_Transaction tx) {
      this.tx = tx;
      return this;
    }

    public void unsetTx() {
      this.tx = null;
    }

    /** Returns true if field tx is set (has been asigned a value) and false otherwise */
    public boolean isSetTx() {
      return this.tx != null;
    }

    public void setTxIsSet(boolean value) {
      if (!value) {
        this.tx = null;
      }
    }

    public vng.zingme.payment.thrift.T_Token getTk() {
      return this.tk;
    }

    public billing_args setTk(vng.zingme.payment.thrift.T_Token tk) {
      this.tk = tk;
      return this;
    }

    public void unsetTk() {
      this.tk = null;
    }

    /** Returns true if field tk is set (has been asigned a value) and false otherwise */
    public boolean isSetTk() {
      return this.tk != null;
    }

    public void setTkIsSet(boolean value) {
      if (!value) {
        this.tk = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TX:
        if (value == null) {
          unsetTx();
        } else {
          setTx((vng.zingme.payment.thrift.T_Transaction)value);
        }
        break;

      case TK:
        if (value == null) {
          unsetTk();
        } else {
          setTk((vng.zingme.payment.thrift.T_Token)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TX:
        return getTx();

      case TK:
        return getTk();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TX:
        return isSetTx();
      case TK:
        return isSetTk();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof billing_args)
        return this.equals((billing_args)that);
      return false;
    }

    public boolean equals(billing_args that) {
      if (that == null)
        return false;

      boolean this_present_tx = true && this.isSetTx();
      boolean that_present_tx = true && that.isSetTx();
      if (this_present_tx || that_present_tx) {
        if (!(this_present_tx && that_present_tx))
          return false;
        if (!this.tx.equals(that.tx))
          return false;
      }

      boolean this_present_tk = true && this.isSetTk();
      boolean that_present_tk = true && that.isSetTk();
      if (this_present_tk || that_present_tk) {
        if (!(this_present_tk && that_present_tk))
          return false;
        if (!this.tk.equals(that.tk))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(billing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      billing_args typedOther = (billing_args)other;

      lastComparison = Boolean.valueOf(isSetTx()).compareTo(typedOther.isSetTx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTx()) {
        lastComparison = TBaseHelper.compareTo(this.tx, typedOther.tx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTk()).compareTo(typedOther.isSetTk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTk()) {
        lastComparison = TBaseHelper.compareTo(this.tk, typedOther.tk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TX
            if (field.type == TType.STRUCT) {
              this.tx = new vng.zingme.payment.thrift.T_Transaction();
              this.tx.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TK
            if (field.type == TType.STRUCT) {
              this.tk = new vng.zingme.payment.thrift.T_Token();
              this.tk.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.tx != null) {
        oprot.writeFieldBegin(TX_FIELD_DESC);
        this.tx.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tk != null) {
        oprot.writeFieldBegin(TK_FIELD_DESC);
        this.tk.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("billing_args(");
      boolean first = true;

      sb.append("tx:");
      if (this.tx == null) {
        sb.append("null");
      } else {
        sb.append(this.tx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tk:");
      if (this.tk == null) {
        sb.append("null");
      } else {
        sb.append(this.tk);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class billing_result implements TBase<billing_result, billing_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("billing_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public vng.zingme.payment.thrift.T_Response success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(billing_result.class, metaDataMap);
    }

    public billing_result() {
    }

    public billing_result(
      vng.zingme.payment.thrift.T_Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public billing_result(billing_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.zingme.payment.thrift.T_Response(other.success);
      }
    }

    public billing_result deepCopy() {
      return new billing_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.zingme.payment.thrift.T_Response getSuccess() {
      return this.success;
    }

    public billing_result setSuccess(vng.zingme.payment.thrift.T_Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.zingme.payment.thrift.T_Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof billing_result)
        return this.equals((billing_result)that);
      return false;
    }

    public boolean equals(billing_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(billing_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      billing_result typedOther = (billing_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new vng.zingme.payment.thrift.T_Response();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("billing_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class bill_args implements TBase<bill_args, bill_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("bill_args");

    private static final TField AGENT_ID_FIELD_DESC = new TField("agentID", TType.STRING, (short)1);
    private static final TField ENCODED_DATA_FIELD_DESC = new TField("encodedData", TType.STRING, (short)2);
    private static final TField TK_FIELD_DESC = new TField("tk", TType.STRUCT, (short)3);
    private static final TField CLIENT_IP_FIELD_DESC = new TField("clientIP", TType.STRING, (short)4);

    public String agentID;
    public String encodedData;
    public vng.zingme.payment.thrift.T_Token tk;
    public String clientIP;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AGENT_ID((short)1, "agentID"),
      ENCODED_DATA((short)2, "encodedData"),
      TK((short)3, "tk"),
      CLIENT_IP((short)4, "clientIP");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENT_ID
            return AGENT_ID;
          case 2: // ENCODED_DATA
            return ENCODED_DATA;
          case 3: // TK
            return TK;
          case 4: // CLIENT_IP
            return CLIENT_IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENT_ID, new FieldMetaData("agentID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ENCODED_DATA, new FieldMetaData("encodedData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TK, new FieldMetaData("tk", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_Token.class)));
      tmpMap.put(_Fields.CLIENT_IP, new FieldMetaData("clientIP", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(bill_args.class, metaDataMap);
    }

    public bill_args() {
    }

    public bill_args(
      String agentID,
      String encodedData,
      vng.zingme.payment.thrift.T_Token tk,
      String clientIP)
    {
      this();
      this.agentID = agentID;
      this.encodedData = encodedData;
      this.tk = tk;
      this.clientIP = clientIP;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bill_args(bill_args other) {
      if (other.isSetAgentID()) {
        this.agentID = other.agentID;
      }
      if (other.isSetEncodedData()) {
        this.encodedData = other.encodedData;
      }
      if (other.isSetTk()) {
        this.tk = new vng.zingme.payment.thrift.T_Token(other.tk);
      }
      if (other.isSetClientIP()) {
        this.clientIP = other.clientIP;
      }
    }

    public bill_args deepCopy() {
      return new bill_args(this);
    }

    @Override
    public void clear() {
      this.agentID = null;
      this.encodedData = null;
      this.tk = null;
      this.clientIP = null;
    }

    public String getAgentID() {
      return this.agentID;
    }

    public bill_args setAgentID(String agentID) {
      this.agentID = agentID;
      return this;
    }

    public void unsetAgentID() {
      this.agentID = null;
    }

    /** Returns true if field agentID is set (has been asigned a value) and false otherwise */
    public boolean isSetAgentID() {
      return this.agentID != null;
    }

    public void setAgentIDIsSet(boolean value) {
      if (!value) {
        this.agentID = null;
      }
    }

    public String getEncodedData() {
      return this.encodedData;
    }

    public bill_args setEncodedData(String encodedData) {
      this.encodedData = encodedData;
      return this;
    }

    public void unsetEncodedData() {
      this.encodedData = null;
    }

    /** Returns true if field encodedData is set (has been asigned a value) and false otherwise */
    public boolean isSetEncodedData() {
      return this.encodedData != null;
    }

    public void setEncodedDataIsSet(boolean value) {
      if (!value) {
        this.encodedData = null;
      }
    }

    public vng.zingme.payment.thrift.T_Token getTk() {
      return this.tk;
    }

    public bill_args setTk(vng.zingme.payment.thrift.T_Token tk) {
      this.tk = tk;
      return this;
    }

    public void unsetTk() {
      this.tk = null;
    }

    /** Returns true if field tk is set (has been asigned a value) and false otherwise */
    public boolean isSetTk() {
      return this.tk != null;
    }

    public void setTkIsSet(boolean value) {
      if (!value) {
        this.tk = null;
      }
    }

    public String getClientIP() {
      return this.clientIP;
    }

    public bill_args setClientIP(String clientIP) {
      this.clientIP = clientIP;
      return this;
    }

    public void unsetClientIP() {
      this.clientIP = null;
    }

    /** Returns true if field clientIP is set (has been asigned a value) and false otherwise */
    public boolean isSetClientIP() {
      return this.clientIP != null;
    }

    public void setClientIPIsSet(boolean value) {
      if (!value) {
        this.clientIP = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENT_ID:
        if (value == null) {
          unsetAgentID();
        } else {
          setAgentID((String)value);
        }
        break;

      case ENCODED_DATA:
        if (value == null) {
          unsetEncodedData();
        } else {
          setEncodedData((String)value);
        }
        break;

      case TK:
        if (value == null) {
          unsetTk();
        } else {
          setTk((vng.zingme.payment.thrift.T_Token)value);
        }
        break;

      case CLIENT_IP:
        if (value == null) {
          unsetClientIP();
        } else {
          setClientIP((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENT_ID:
        return getAgentID();

      case ENCODED_DATA:
        return getEncodedData();

      case TK:
        return getTk();

      case CLIENT_IP:
        return getClientIP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENT_ID:
        return isSetAgentID();
      case ENCODED_DATA:
        return isSetEncodedData();
      case TK:
        return isSetTk();
      case CLIENT_IP:
        return isSetClientIP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bill_args)
        return this.equals((bill_args)that);
      return false;
    }

    public boolean equals(bill_args that) {
      if (that == null)
        return false;

      boolean this_present_agentID = true && this.isSetAgentID();
      boolean that_present_agentID = true && that.isSetAgentID();
      if (this_present_agentID || that_present_agentID) {
        if (!(this_present_agentID && that_present_agentID))
          return false;
        if (!this.agentID.equals(that.agentID))
          return false;
      }

      boolean this_present_encodedData = true && this.isSetEncodedData();
      boolean that_present_encodedData = true && that.isSetEncodedData();
      if (this_present_encodedData || that_present_encodedData) {
        if (!(this_present_encodedData && that_present_encodedData))
          return false;
        if (!this.encodedData.equals(that.encodedData))
          return false;
      }

      boolean this_present_tk = true && this.isSetTk();
      boolean that_present_tk = true && that.isSetTk();
      if (this_present_tk || that_present_tk) {
        if (!(this_present_tk && that_present_tk))
          return false;
        if (!this.tk.equals(that.tk))
          return false;
      }

      boolean this_present_clientIP = true && this.isSetClientIP();
      boolean that_present_clientIP = true && that.isSetClientIP();
      if (this_present_clientIP || that_present_clientIP) {
        if (!(this_present_clientIP && that_present_clientIP))
          return false;
        if (!this.clientIP.equals(that.clientIP))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(bill_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      bill_args typedOther = (bill_args)other;

      lastComparison = Boolean.valueOf(isSetAgentID()).compareTo(typedOther.isSetAgentID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgentID()) {
        lastComparison = TBaseHelper.compareTo(this.agentID, typedOther.agentID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEncodedData()).compareTo(typedOther.isSetEncodedData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncodedData()) {
        lastComparison = TBaseHelper.compareTo(this.encodedData, typedOther.encodedData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTk()).compareTo(typedOther.isSetTk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTk()) {
        lastComparison = TBaseHelper.compareTo(this.tk, typedOther.tk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientIP()).compareTo(typedOther.isSetClientIP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientIP()) {
        lastComparison = TBaseHelper.compareTo(this.clientIP, typedOther.clientIP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AGENT_ID
            if (field.type == TType.STRING) {
              this.agentID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ENCODED_DATA
            if (field.type == TType.STRING) {
              this.encodedData = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TK
            if (field.type == TType.STRUCT) {
              this.tk = new vng.zingme.payment.thrift.T_Token();
              this.tk.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CLIENT_IP
            if (field.type == TType.STRING) {
              this.clientIP = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.agentID != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        oprot.writeString(this.agentID);
        oprot.writeFieldEnd();
      }
      if (this.encodedData != null) {
        oprot.writeFieldBegin(ENCODED_DATA_FIELD_DESC);
        oprot.writeString(this.encodedData);
        oprot.writeFieldEnd();
      }
      if (this.tk != null) {
        oprot.writeFieldBegin(TK_FIELD_DESC);
        this.tk.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.clientIP != null) {
        oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
        oprot.writeString(this.clientIP);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bill_args(");
      boolean first = true;

      sb.append("agentID:");
      if (this.agentID == null) {
        sb.append("null");
      } else {
        sb.append(this.agentID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encodedData:");
      if (this.encodedData == null) {
        sb.append("null");
      } else {
        sb.append(this.encodedData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tk:");
      if (this.tk == null) {
        sb.append("null");
      } else {
        sb.append(this.tk);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientIP:");
      if (this.clientIP == null) {
        sb.append("null");
      } else {
        sb.append(this.clientIP);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class bill_result implements TBase<bill_result, bill_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("bill_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public vng.zingme.payment.thrift.T_Response success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(bill_result.class, metaDataMap);
    }

    public bill_result() {
    }

    public bill_result(
      vng.zingme.payment.thrift.T_Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bill_result(bill_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.zingme.payment.thrift.T_Response(other.success);
      }
    }

    public bill_result deepCopy() {
      return new bill_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.zingme.payment.thrift.T_Response getSuccess() {
      return this.success;
    }

    public bill_result setSuccess(vng.zingme.payment.thrift.T_Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.zingme.payment.thrift.T_Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bill_result)
        return this.equals((bill_result)that);
      return false;
    }

    public boolean equals(bill_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(bill_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      bill_result typedOther = (bill_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new vng.zingme.payment.thrift.T_Response();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bill_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class warmupCache_args implements TBase<warmupCache_args, warmupCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("warmupCache_args");

    private static final TField USER_ID_FIELD_DESC = new TField("userID", TType.I32, (short)1);

    public int userID;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER_ID((short)1, "userID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new FieldMetaData("userID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(warmupCache_args.class, metaDataMap);
    }

    public warmupCache_args() {
    }

    public warmupCache_args(
      int userID)
    {
      this();
      this.userID = userID;
      setUserIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public warmupCache_args(warmupCache_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.userID = other.userID;
    }

    public warmupCache_args deepCopy() {
      return new warmupCache_args(this);
    }

    @Override
    public void clear() {
      setUserIDIsSet(false);
      this.userID = 0;
    }

    public int getUserID() {
      return this.userID;
    }

    public warmupCache_args setUserID(int userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been asigned a value) and false otherwise */
    public boolean isSetUserID() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return new Integer(getUserID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof warmupCache_args)
        return this.equals((warmupCache_args)that);
      return false;
    }

    public boolean equals(warmupCache_args that) {
      if (that == null)
        return false;

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(warmupCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      warmupCache_args typedOther = (warmupCache_args)other;

      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_ID
            if (field.type == TType.I32) {
              this.userID = iprot.readI32();
              setUserIDIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(this.userID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("warmupCache_args(");
      boolean first = true;

      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBalance_args implements TBase<getBalance_args, getBalance_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getBalance_args");

    private static final TField USER_ID_FIELD_DESC = new TField("userID", TType.I32, (short)1);

    public int userID;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER_ID((short)1, "userID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new FieldMetaData("userID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getBalance_args.class, metaDataMap);
    }

    public getBalance_args() {
    }

    public getBalance_args(
      int userID)
    {
      this();
      this.userID = userID;
      setUserIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBalance_args(getBalance_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.userID = other.userID;
    }

    public getBalance_args deepCopy() {
      return new getBalance_args(this);
    }

    @Override
    public void clear() {
      setUserIDIsSet(false);
      this.userID = 0;
    }

    public int getUserID() {
      return this.userID;
    }

    public getBalance_args setUserID(int userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been asigned a value) and false otherwise */
    public boolean isSetUserID() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return new Integer(getUserID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBalance_args)
        return this.equals((getBalance_args)that);
      return false;
    }

    public boolean equals(getBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBalance_args typedOther = (getBalance_args)other;

      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_ID
            if (field.type == TType.I32) {
              this.userID = iprot.readI32();
              setUserIDIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(this.userID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBalance_args(");
      boolean first = true;

      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBalance_result implements TBase<getBalance_result, getBalance_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getBalance_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public vng.zingme.payment.thrift.T_AccResponse success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, vng.zingme.payment.thrift.T_AccResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getBalance_result.class, metaDataMap);
    }

    public getBalance_result() {
    }

    public getBalance_result(
      vng.zingme.payment.thrift.T_AccResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBalance_result(getBalance_result other) {
      if (other.isSetSuccess()) {
        this.success = new vng.zingme.payment.thrift.T_AccResponse(other.success);
      }
    }

    public getBalance_result deepCopy() {
      return new getBalance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public vng.zingme.payment.thrift.T_AccResponse getSuccess() {
      return this.success;
    }

    public getBalance_result setSuccess(vng.zingme.payment.thrift.T_AccResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((vng.zingme.payment.thrift.T_AccResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBalance_result)
        return this.equals((getBalance_result)that);
      return false;
    }

    public boolean equals(getBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBalance_result typedOther = (getBalance_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new vng.zingme.payment.thrift.T_AccResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBalance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class zingUnSignature_args implements TBase<zingUnSignature_args, zingUnSignature_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("zingUnSignature_args");

    private static final TField AGENT_ID_FIELD_DESC = new TField("agentID", TType.STRING, (short)1);
    private static final TField ENCODED_DATA_FIELD_DESC = new TField("encodedData", TType.STRING, (short)2);
    private static final TField KINDOFKEY_FIELD_DESC = new TField("kindofkey", TType.I32, (short)3);

    public String agentID;
    public String encodedData;
    public int kindofkey;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AGENT_ID((short)1, "agentID"),
      ENCODED_DATA((short)2, "encodedData"),
      KINDOFKEY((short)3, "kindofkey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENT_ID
            return AGENT_ID;
          case 2: // ENCODED_DATA
            return ENCODED_DATA;
          case 3: // KINDOFKEY
            return KINDOFKEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KINDOFKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENT_ID, new FieldMetaData("agentID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ENCODED_DATA, new FieldMetaData("encodedData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.KINDOFKEY, new FieldMetaData("kindofkey", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(zingUnSignature_args.class, metaDataMap);
    }

    public zingUnSignature_args() {
    }

    public zingUnSignature_args(
      String agentID,
      String encodedData,
      int kindofkey)
    {
      this();
      this.agentID = agentID;
      this.encodedData = encodedData;
      this.kindofkey = kindofkey;
      setKindofkeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zingUnSignature_args(zingUnSignature_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAgentID()) {
        this.agentID = other.agentID;
      }
      if (other.isSetEncodedData()) {
        this.encodedData = other.encodedData;
      }
      this.kindofkey = other.kindofkey;
    }

    public zingUnSignature_args deepCopy() {
      return new zingUnSignature_args(this);
    }

    @Override
    public void clear() {
      this.agentID = null;
      this.encodedData = null;
      setKindofkeyIsSet(false);
      this.kindofkey = 0;
    }

    public String getAgentID() {
      return this.agentID;
    }

    public zingUnSignature_args setAgentID(String agentID) {
      this.agentID = agentID;
      return this;
    }

    public void unsetAgentID() {
      this.agentID = null;
    }

    /** Returns true if field agentID is set (has been asigned a value) and false otherwise */
    public boolean isSetAgentID() {
      return this.agentID != null;
    }

    public void setAgentIDIsSet(boolean value) {
      if (!value) {
        this.agentID = null;
      }
    }

    public String getEncodedData() {
      return this.encodedData;
    }

    public zingUnSignature_args setEncodedData(String encodedData) {
      this.encodedData = encodedData;
      return this;
    }

    public void unsetEncodedData() {
      this.encodedData = null;
    }

    /** Returns true if field encodedData is set (has been asigned a value) and false otherwise */
    public boolean isSetEncodedData() {
      return this.encodedData != null;
    }

    public void setEncodedDataIsSet(boolean value) {
      if (!value) {
        this.encodedData = null;
      }
    }

    public int getKindofkey() {
      return this.kindofkey;
    }

    public zingUnSignature_args setKindofkey(int kindofkey) {
      this.kindofkey = kindofkey;
      setKindofkeyIsSet(true);
      return this;
    }

    public void unsetKindofkey() {
      __isset_bit_vector.clear(__KINDOFKEY_ISSET_ID);
    }

    /** Returns true if field kindofkey is set (has been asigned a value) and false otherwise */
    public boolean isSetKindofkey() {
      return __isset_bit_vector.get(__KINDOFKEY_ISSET_ID);
    }

    public void setKindofkeyIsSet(boolean value) {
      __isset_bit_vector.set(__KINDOFKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENT_ID:
        if (value == null) {
          unsetAgentID();
        } else {
          setAgentID((String)value);
        }
        break;

      case ENCODED_DATA:
        if (value == null) {
          unsetEncodedData();
        } else {
          setEncodedData((String)value);
        }
        break;

      case KINDOFKEY:
        if (value == null) {
          unsetKindofkey();
        } else {
          setKindofkey((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENT_ID:
        return getAgentID();

      case ENCODED_DATA:
        return getEncodedData();

      case KINDOFKEY:
        return new Integer(getKindofkey());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENT_ID:
        return isSetAgentID();
      case ENCODED_DATA:
        return isSetEncodedData();
      case KINDOFKEY:
        return isSetKindofkey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zingUnSignature_args)
        return this.equals((zingUnSignature_args)that);
      return false;
    }

    public boolean equals(zingUnSignature_args that) {
      if (that == null)
        return false;

      boolean this_present_agentID = true && this.isSetAgentID();
      boolean that_present_agentID = true && that.isSetAgentID();
      if (this_present_agentID || that_present_agentID) {
        if (!(this_present_agentID && that_present_agentID))
          return false;
        if (!this.agentID.equals(that.agentID))
          return false;
      }

      boolean this_present_encodedData = true && this.isSetEncodedData();
      boolean that_present_encodedData = true && that.isSetEncodedData();
      if (this_present_encodedData || that_present_encodedData) {
        if (!(this_present_encodedData && that_present_encodedData))
          return false;
        if (!this.encodedData.equals(that.encodedData))
          return false;
      }

      boolean this_present_kindofkey = true;
      boolean that_present_kindofkey = true;
      if (this_present_kindofkey || that_present_kindofkey) {
        if (!(this_present_kindofkey && that_present_kindofkey))
          return false;
        if (this.kindofkey != that.kindofkey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(zingUnSignature_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      zingUnSignature_args typedOther = (zingUnSignature_args)other;

      lastComparison = Boolean.valueOf(isSetAgentID()).compareTo(typedOther.isSetAgentID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgentID()) {
        lastComparison = TBaseHelper.compareTo(this.agentID, typedOther.agentID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEncodedData()).compareTo(typedOther.isSetEncodedData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncodedData()) {
        lastComparison = TBaseHelper.compareTo(this.encodedData, typedOther.encodedData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKindofkey()).compareTo(typedOther.isSetKindofkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKindofkey()) {
        lastComparison = TBaseHelper.compareTo(this.kindofkey, typedOther.kindofkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AGENT_ID
            if (field.type == TType.STRING) {
              this.agentID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ENCODED_DATA
            if (field.type == TType.STRING) {
              this.encodedData = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // KINDOFKEY
            if (field.type == TType.I32) {
              this.kindofkey = iprot.readI32();
              setKindofkeyIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.agentID != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        oprot.writeString(this.agentID);
        oprot.writeFieldEnd();
      }
      if (this.encodedData != null) {
        oprot.writeFieldBegin(ENCODED_DATA_FIELD_DESC);
        oprot.writeString(this.encodedData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KINDOFKEY_FIELD_DESC);
      oprot.writeI32(this.kindofkey);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zingUnSignature_args(");
      boolean first = true;

      sb.append("agentID:");
      if (this.agentID == null) {
        sb.append("null");
      } else {
        sb.append(this.agentID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encodedData:");
      if (this.encodedData == null) {
        sb.append("null");
      } else {
        sb.append(this.encodedData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kindofkey:");
      sb.append(this.kindofkey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class zingUnSignature_result implements TBase<zingUnSignature_result, zingUnSignature_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("zingUnSignature_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    public List<String> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(zingUnSignature_result.class, metaDataMap);
    }

    public zingUnSignature_result() {
    }

    public zingUnSignature_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zingUnSignature_result(zingUnSignature_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public zingUnSignature_result deepCopy() {
      return new zingUnSignature_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public zingUnSignature_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zingUnSignature_result)
        return this.equals((zingUnSignature_result)that);
      return false;
    }

    public boolean equals(zingUnSignature_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(zingUnSignature_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      zingUnSignature_result typedOther = (zingUnSignature_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list0 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  this.success.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter3 : this.success)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zingUnSignature_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
