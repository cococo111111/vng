/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package vng.zingme.payment.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TAdminServer {

  public interface Iface {

    public int adjustUser(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time) throws TException;

    public int compensate(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time, String appID, int txType) throws TException;

  }

  public interface AsyncIface {

    public void adjustUser(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time, AsyncMethodCallback<AsyncClient.adjustUser_call> resultHandler) throws TException;

    public void compensate(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time, String appID, int txType, AsyncMethodCallback<AsyncClient.compensate_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public int adjustUser(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time) throws TException
    {
      send_adjustUser(userID, adjustMoney, adminSig, reason, clientIP, time);
      return recv_adjustUser();
    }

    public void send_adjustUser(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("adjustUser", TMessageType.CALL, ++seqid_));
      adjustUser_args args = new adjustUser_args();
      args.setUserID(userID);
      args.setAdjustMoney(adjustMoney);
      args.setAdminSig(adminSig);
      args.setReason(reason);
      args.setClientIP(clientIP);
      args.setTime(time);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_adjustUser() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "adjustUser failed: out of sequence response");
      }
      adjustUser_result result = new adjustUser_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "adjustUser failed: unknown result");
    }

    public int compensate(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time, String appID, int txType) throws TException
    {
      send_compensate(userID, adjustMoney, adminSig, reason, clientIP, time, appID, txType);
      return recv_compensate();
    }

    public void send_compensate(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time, String appID, int txType) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("compensate", TMessageType.CALL, ++seqid_));
      compensate_args args = new compensate_args();
      args.setUserID(userID);
      args.setAdjustMoney(adjustMoney);
      args.setAdminSig(adminSig);
      args.setReason(reason);
      args.setClientIP(clientIP);
      args.setTime(time);
      args.setAppID(appID);
      args.setTxType(txType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_compensate() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "compensate failed: out of sequence response");
      }
      compensate_result result = new compensate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "compensate failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void adjustUser(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time, AsyncMethodCallback<adjustUser_call> resultHandler) throws TException {
      checkReady();
      adjustUser_call method_call = new adjustUser_call(userID, adjustMoney, adminSig, reason, clientIP, time, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class adjustUser_call extends TAsyncMethodCall {
      private int userID;
      private double adjustMoney;
      private String adminSig;
      private String reason;
      private String clientIP;
      private int time;
      public adjustUser_call(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time, AsyncMethodCallback<adjustUser_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userID = userID;
        this.adjustMoney = adjustMoney;
        this.adminSig = adminSig;
        this.reason = reason;
        this.clientIP = clientIP;
        this.time = time;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("adjustUser", TMessageType.CALL, 0));
        adjustUser_args args = new adjustUser_args();
        args.setUserID(userID);
        args.setAdjustMoney(adjustMoney);
        args.setAdminSig(adminSig);
        args.setReason(reason);
        args.setClientIP(clientIP);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_adjustUser();
      }
    }

    public void compensate(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time, String appID, int txType, AsyncMethodCallback<compensate_call> resultHandler) throws TException {
      checkReady();
      compensate_call method_call = new compensate_call(userID, adjustMoney, adminSig, reason, clientIP, time, appID, txType, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class compensate_call extends TAsyncMethodCall {
      private int userID;
      private double adjustMoney;
      private String adminSig;
      private String reason;
      private String clientIP;
      private int time;
      private String appID;
      private int txType;
      public compensate_call(int userID, double adjustMoney, String adminSig, String reason, String clientIP, int time, String appID, int txType, AsyncMethodCallback<compensate_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userID = userID;
        this.adjustMoney = adjustMoney;
        this.adminSig = adminSig;
        this.reason = reason;
        this.clientIP = clientIP;
        this.time = time;
        this.appID = appID;
        this.txType = txType;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("compensate", TMessageType.CALL, 0));
        compensate_args args = new compensate_args();
        args.setUserID(userID);
        args.setAdjustMoney(adjustMoney);
        args.setAdminSig(adminSig);
        args.setReason(reason);
        args.setClientIP(clientIP);
        args.setTime(time);
        args.setAppID(appID);
        args.setTxType(txType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_compensate();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("adjustUser", new adjustUser());
      processMap_.put("compensate", new compensate());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class adjustUser implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        adjustUser_args args = new adjustUser_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("adjustUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        adjustUser_result result = new adjustUser_result();
        result.success = iface_.adjustUser(args.userID, args.adjustMoney, args.adminSig, args.reason, args.clientIP, args.time);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("adjustUser", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class compensate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        compensate_args args = new compensate_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("compensate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        compensate_result result = new compensate_result();
        result.success = iface_.compensate(args.userID, args.adjustMoney, args.adminSig, args.reason, args.clientIP, args.time, args.appID, args.txType);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("compensate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class adjustUser_args implements TBase<adjustUser_args, adjustUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("adjustUser_args");

    private static final TField USER_ID_FIELD_DESC = new TField("userID", TType.I32, (short)1);
    private static final TField ADJUST_MONEY_FIELD_DESC = new TField("adjustMoney", TType.DOUBLE, (short)2);
    private static final TField ADMIN_SIG_FIELD_DESC = new TField("adminSig", TType.STRING, (short)3);
    private static final TField REASON_FIELD_DESC = new TField("reason", TType.STRING, (short)4);
    private static final TField CLIENT_IP_FIELD_DESC = new TField("clientIP", TType.STRING, (short)5);
    private static final TField TIME_FIELD_DESC = new TField("time", TType.I32, (short)6);

    public int userID;
    public double adjustMoney;
    public String adminSig;
    public String reason;
    public String clientIP;
    public int time;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER_ID((short)1, "userID"),
      ADJUST_MONEY((short)2, "adjustMoney"),
      ADMIN_SIG((short)3, "adminSig"),
      REASON((short)4, "reason"),
      CLIENT_IP((short)5, "clientIP"),
      TIME((short)6, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // ADJUST_MONEY
            return ADJUST_MONEY;
          case 3: // ADMIN_SIG
            return ADMIN_SIG;
          case 4: // REASON
            return REASON;
          case 5: // CLIENT_IP
            return CLIENT_IP;
          case 6: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __ADJUSTMONEY_ISSET_ID = 1;
    private static final int __TIME_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new FieldMetaData("userID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.ADJUST_MONEY, new FieldMetaData("adjustMoney", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.DOUBLE)));
      tmpMap.put(_Fields.ADMIN_SIG, new FieldMetaData("adminSig", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.REASON, new FieldMetaData("reason", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.CLIENT_IP, new FieldMetaData("clientIP", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TIME, new FieldMetaData("time", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(adjustUser_args.class, metaDataMap);
    }

    public adjustUser_args() {
    }

    public adjustUser_args(
      int userID,
      double adjustMoney,
      String adminSig,
      String reason,
      String clientIP,
      int time)
    {
      this();
      this.userID = userID;
      setUserIDIsSet(true);
      this.adjustMoney = adjustMoney;
      setAdjustMoneyIsSet(true);
      this.adminSig = adminSig;
      this.reason = reason;
      this.clientIP = clientIP;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adjustUser_args(adjustUser_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.userID = other.userID;
      this.adjustMoney = other.adjustMoney;
      if (other.isSetAdminSig()) {
        this.adminSig = other.adminSig;
      }
      if (other.isSetReason()) {
        this.reason = other.reason;
      }
      if (other.isSetClientIP()) {
        this.clientIP = other.clientIP;
      }
      this.time = other.time;
    }

    public adjustUser_args deepCopy() {
      return new adjustUser_args(this);
    }

    @Override
    public void clear() {
      setUserIDIsSet(false);
      this.userID = 0;
      setAdjustMoneyIsSet(false);
      this.adjustMoney = 0.0;
      this.adminSig = null;
      this.reason = null;
      this.clientIP = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public int getUserID() {
      return this.userID;
    }

    public adjustUser_args setUserID(int userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been asigned a value) and false otherwise */
    public boolean isSetUserID() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public double getAdjustMoney() {
      return this.adjustMoney;
    }

    public adjustUser_args setAdjustMoney(double adjustMoney) {
      this.adjustMoney = adjustMoney;
      setAdjustMoneyIsSet(true);
      return this;
    }

    public void unsetAdjustMoney() {
      __isset_bit_vector.clear(__ADJUSTMONEY_ISSET_ID);
    }

    /** Returns true if field adjustMoney is set (has been asigned a value) and false otherwise */
    public boolean isSetAdjustMoney() {
      return __isset_bit_vector.get(__ADJUSTMONEY_ISSET_ID);
    }

    public void setAdjustMoneyIsSet(boolean value) {
      __isset_bit_vector.set(__ADJUSTMONEY_ISSET_ID, value);
    }

    public String getAdminSig() {
      return this.adminSig;
    }

    public adjustUser_args setAdminSig(String adminSig) {
      this.adminSig = adminSig;
      return this;
    }

    public void unsetAdminSig() {
      this.adminSig = null;
    }

    /** Returns true if field adminSig is set (has been asigned a value) and false otherwise */
    public boolean isSetAdminSig() {
      return this.adminSig != null;
    }

    public void setAdminSigIsSet(boolean value) {
      if (!value) {
        this.adminSig = null;
      }
    }

    public String getReason() {
      return this.reason;
    }

    public adjustUser_args setReason(String reason) {
      this.reason = reason;
      return this;
    }

    public void unsetReason() {
      this.reason = null;
    }

    /** Returns true if field reason is set (has been asigned a value) and false otherwise */
    public boolean isSetReason() {
      return this.reason != null;
    }

    public void setReasonIsSet(boolean value) {
      if (!value) {
        this.reason = null;
      }
    }

    public String getClientIP() {
      return this.clientIP;
    }

    public adjustUser_args setClientIP(String clientIP) {
      this.clientIP = clientIP;
      return this;
    }

    public void unsetClientIP() {
      this.clientIP = null;
    }

    /** Returns true if field clientIP is set (has been asigned a value) and false otherwise */
    public boolean isSetClientIP() {
      return this.clientIP != null;
    }

    public void setClientIPIsSet(boolean value) {
      if (!value) {
        this.clientIP = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public adjustUser_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been asigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Integer)value);
        }
        break;

      case ADJUST_MONEY:
        if (value == null) {
          unsetAdjustMoney();
        } else {
          setAdjustMoney((Double)value);
        }
        break;

      case ADMIN_SIG:
        if (value == null) {
          unsetAdminSig();
        } else {
          setAdminSig((String)value);
        }
        break;

      case REASON:
        if (value == null) {
          unsetReason();
        } else {
          setReason((String)value);
        }
        break;

      case CLIENT_IP:
        if (value == null) {
          unsetClientIP();
        } else {
          setClientIP((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return new Integer(getUserID());

      case ADJUST_MONEY:
        return new Double(getAdjustMoney());

      case ADMIN_SIG:
        return getAdminSig();

      case REASON:
        return getReason();

      case CLIENT_IP:
        return getClientIP();

      case TIME:
        return new Integer(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserID();
      case ADJUST_MONEY:
        return isSetAdjustMoney();
      case ADMIN_SIG:
        return isSetAdminSig();
      case REASON:
        return isSetReason();
      case CLIENT_IP:
        return isSetClientIP();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adjustUser_args)
        return this.equals((adjustUser_args)that);
      return false;
    }

    public boolean equals(adjustUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      boolean this_present_adjustMoney = true;
      boolean that_present_adjustMoney = true;
      if (this_present_adjustMoney || that_present_adjustMoney) {
        if (!(this_present_adjustMoney && that_present_adjustMoney))
          return false;
        if (this.adjustMoney != that.adjustMoney)
          return false;
      }

      boolean this_present_adminSig = true && this.isSetAdminSig();
      boolean that_present_adminSig = true && that.isSetAdminSig();
      if (this_present_adminSig || that_present_adminSig) {
        if (!(this_present_adminSig && that_present_adminSig))
          return false;
        if (!this.adminSig.equals(that.adminSig))
          return false;
      }

      boolean this_present_reason = true && this.isSetReason();
      boolean that_present_reason = true && that.isSetReason();
      if (this_present_reason || that_present_reason) {
        if (!(this_present_reason && that_present_reason))
          return false;
        if (!this.reason.equals(that.reason))
          return false;
      }

      boolean this_present_clientIP = true && this.isSetClientIP();
      boolean that_present_clientIP = true && that.isSetClientIP();
      if (this_present_clientIP || that_present_clientIP) {
        if (!(this_present_clientIP && that_present_clientIP))
          return false;
        if (!this.clientIP.equals(that.clientIP))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(adjustUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      adjustUser_args typedOther = (adjustUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdjustMoney()).compareTo(typedOther.isSetAdjustMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdjustMoney()) {
        lastComparison = TBaseHelper.compareTo(this.adjustMoney, typedOther.adjustMoney);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdminSig()).compareTo(typedOther.isSetAdminSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminSig()) {
        lastComparison = TBaseHelper.compareTo(this.adminSig, typedOther.adminSig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReason()) {
        lastComparison = TBaseHelper.compareTo(this.reason, typedOther.reason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientIP()).compareTo(typedOther.isSetClientIP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientIP()) {
        lastComparison = TBaseHelper.compareTo(this.clientIP, typedOther.clientIP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_ID
            if (field.type == TType.I32) {
              this.userID = iprot.readI32();
              setUserIDIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ADJUST_MONEY
            if (field.type == TType.DOUBLE) {
              this.adjustMoney = iprot.readDouble();
              setAdjustMoneyIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ADMIN_SIG
            if (field.type == TType.STRING) {
              this.adminSig = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // REASON
            if (field.type == TType.STRING) {
              this.reason = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // CLIENT_IP
            if (field.type == TType.STRING) {
              this.clientIP = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // TIME
            if (field.type == TType.I32) {
              this.time = iprot.readI32();
              setTimeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(this.userID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADJUST_MONEY_FIELD_DESC);
      oprot.writeDouble(this.adjustMoney);
      oprot.writeFieldEnd();
      if (this.adminSig != null) {
        oprot.writeFieldBegin(ADMIN_SIG_FIELD_DESC);
        oprot.writeString(this.adminSig);
        oprot.writeFieldEnd();
      }
      if (this.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(this.reason);
        oprot.writeFieldEnd();
      }
      if (this.clientIP != null) {
        oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
        oprot.writeString(this.clientIP);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI32(this.time);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adjustUser_args(");
      boolean first = true;

      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("adjustMoney:");
      sb.append(this.adjustMoney);
      first = false;
      if (!first) sb.append(", ");
      sb.append("adminSig:");
      if (this.adminSig == null) {
        sb.append("null");
      } else {
        sb.append(this.adminSig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientIP:");
      if (this.clientIP == null) {
        sb.append("null");
      } else {
        sb.append(this.clientIP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class adjustUser_result implements TBase<adjustUser_result, adjustUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("adjustUser_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(adjustUser_result.class, metaDataMap);
    }

    public adjustUser_result() {
    }

    public adjustUser_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adjustUser_result(adjustUser_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public adjustUser_result deepCopy() {
      return new adjustUser_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public adjustUser_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adjustUser_result)
        return this.equals((adjustUser_result)that);
      return false;
    }

    public boolean equals(adjustUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(adjustUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      adjustUser_result typedOther = (adjustUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adjustUser_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class compensate_args implements TBase<compensate_args, compensate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("compensate_args");

    private static final TField USER_ID_FIELD_DESC = new TField("userID", TType.I32, (short)1);
    private static final TField ADJUST_MONEY_FIELD_DESC = new TField("adjustMoney", TType.DOUBLE, (short)2);
    private static final TField ADMIN_SIG_FIELD_DESC = new TField("adminSig", TType.STRING, (short)3);
    private static final TField REASON_FIELD_DESC = new TField("reason", TType.STRING, (short)4);
    private static final TField CLIENT_IP_FIELD_DESC = new TField("clientIP", TType.STRING, (short)5);
    private static final TField TIME_FIELD_DESC = new TField("time", TType.I32, (short)6);
    private static final TField APP_ID_FIELD_DESC = new TField("appID", TType.STRING, (short)7);
    private static final TField TX_TYPE_FIELD_DESC = new TField("txType", TType.I32, (short)8);

    public int userID;
    public double adjustMoney;
    public String adminSig;
    public String reason;
    public String clientIP;
    public int time;
    public String appID;
    public int txType;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER_ID((short)1, "userID"),
      ADJUST_MONEY((short)2, "adjustMoney"),
      ADMIN_SIG((short)3, "adminSig"),
      REASON((short)4, "reason"),
      CLIENT_IP((short)5, "clientIP"),
      TIME((short)6, "time"),
      APP_ID((short)7, "appID"),
      TX_TYPE((short)8, "txType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // ADJUST_MONEY
            return ADJUST_MONEY;
          case 3: // ADMIN_SIG
            return ADMIN_SIG;
          case 4: // REASON
            return REASON;
          case 5: // CLIENT_IP
            return CLIENT_IP;
          case 6: // TIME
            return TIME;
          case 7: // APP_ID
            return APP_ID;
          case 8: // TX_TYPE
            return TX_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __ADJUSTMONEY_ISSET_ID = 1;
    private static final int __TIME_ISSET_ID = 2;
    private static final int __TXTYPE_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new FieldMetaData("userID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.ADJUST_MONEY, new FieldMetaData("adjustMoney", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.DOUBLE)));
      tmpMap.put(_Fields.ADMIN_SIG, new FieldMetaData("adminSig", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.REASON, new FieldMetaData("reason", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.CLIENT_IP, new FieldMetaData("clientIP", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TIME, new FieldMetaData("time", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.APP_ID, new FieldMetaData("appID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TX_TYPE, new FieldMetaData("txType", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(compensate_args.class, metaDataMap);
    }

    public compensate_args() {
    }

    public compensate_args(
      int userID,
      double adjustMoney,
      String adminSig,
      String reason,
      String clientIP,
      int time,
      String appID,
      int txType)
    {
      this();
      this.userID = userID;
      setUserIDIsSet(true);
      this.adjustMoney = adjustMoney;
      setAdjustMoneyIsSet(true);
      this.adminSig = adminSig;
      this.reason = reason;
      this.clientIP = clientIP;
      this.time = time;
      setTimeIsSet(true);
      this.appID = appID;
      this.txType = txType;
      setTxTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compensate_args(compensate_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.userID = other.userID;
      this.adjustMoney = other.adjustMoney;
      if (other.isSetAdminSig()) {
        this.adminSig = other.adminSig;
      }
      if (other.isSetReason()) {
        this.reason = other.reason;
      }
      if (other.isSetClientIP()) {
        this.clientIP = other.clientIP;
      }
      this.time = other.time;
      if (other.isSetAppID()) {
        this.appID = other.appID;
      }
      this.txType = other.txType;
    }

    public compensate_args deepCopy() {
      return new compensate_args(this);
    }

    @Override
    public void clear() {
      setUserIDIsSet(false);
      this.userID = 0;
      setAdjustMoneyIsSet(false);
      this.adjustMoney = 0.0;
      this.adminSig = null;
      this.reason = null;
      this.clientIP = null;
      setTimeIsSet(false);
      this.time = 0;
      this.appID = null;
      setTxTypeIsSet(false);
      this.txType = 0;
    }

    public int getUserID() {
      return this.userID;
    }

    public compensate_args setUserID(int userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been asigned a value) and false otherwise */
    public boolean isSetUserID() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public double getAdjustMoney() {
      return this.adjustMoney;
    }

    public compensate_args setAdjustMoney(double adjustMoney) {
      this.adjustMoney = adjustMoney;
      setAdjustMoneyIsSet(true);
      return this;
    }

    public void unsetAdjustMoney() {
      __isset_bit_vector.clear(__ADJUSTMONEY_ISSET_ID);
    }

    /** Returns true if field adjustMoney is set (has been asigned a value) and false otherwise */
    public boolean isSetAdjustMoney() {
      return __isset_bit_vector.get(__ADJUSTMONEY_ISSET_ID);
    }

    public void setAdjustMoneyIsSet(boolean value) {
      __isset_bit_vector.set(__ADJUSTMONEY_ISSET_ID, value);
    }

    public String getAdminSig() {
      return this.adminSig;
    }

    public compensate_args setAdminSig(String adminSig) {
      this.adminSig = adminSig;
      return this;
    }

    public void unsetAdminSig() {
      this.adminSig = null;
    }

    /** Returns true if field adminSig is set (has been asigned a value) and false otherwise */
    public boolean isSetAdminSig() {
      return this.adminSig != null;
    }

    public void setAdminSigIsSet(boolean value) {
      if (!value) {
        this.adminSig = null;
      }
    }

    public String getReason() {
      return this.reason;
    }

    public compensate_args setReason(String reason) {
      this.reason = reason;
      return this;
    }

    public void unsetReason() {
      this.reason = null;
    }

    /** Returns true if field reason is set (has been asigned a value) and false otherwise */
    public boolean isSetReason() {
      return this.reason != null;
    }

    public void setReasonIsSet(boolean value) {
      if (!value) {
        this.reason = null;
      }
    }

    public String getClientIP() {
      return this.clientIP;
    }

    public compensate_args setClientIP(String clientIP) {
      this.clientIP = clientIP;
      return this;
    }

    public void unsetClientIP() {
      this.clientIP = null;
    }

    /** Returns true if field clientIP is set (has been asigned a value) and false otherwise */
    public boolean isSetClientIP() {
      return this.clientIP != null;
    }

    public void setClientIPIsSet(boolean value) {
      if (!value) {
        this.clientIP = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public compensate_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been asigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public String getAppID() {
      return this.appID;
    }

    public compensate_args setAppID(String appID) {
      this.appID = appID;
      return this;
    }

    public void unsetAppID() {
      this.appID = null;
    }

    /** Returns true if field appID is set (has been asigned a value) and false otherwise */
    public boolean isSetAppID() {
      return this.appID != null;
    }

    public void setAppIDIsSet(boolean value) {
      if (!value) {
        this.appID = null;
      }
    }

    public int getTxType() {
      return this.txType;
    }

    public compensate_args setTxType(int txType) {
      this.txType = txType;
      setTxTypeIsSet(true);
      return this;
    }

    public void unsetTxType() {
      __isset_bit_vector.clear(__TXTYPE_ISSET_ID);
    }

    /** Returns true if field txType is set (has been asigned a value) and false otherwise */
    public boolean isSetTxType() {
      return __isset_bit_vector.get(__TXTYPE_ISSET_ID);
    }

    public void setTxTypeIsSet(boolean value) {
      __isset_bit_vector.set(__TXTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Integer)value);
        }
        break;

      case ADJUST_MONEY:
        if (value == null) {
          unsetAdjustMoney();
        } else {
          setAdjustMoney((Double)value);
        }
        break;

      case ADMIN_SIG:
        if (value == null) {
          unsetAdminSig();
        } else {
          setAdminSig((String)value);
        }
        break;

      case REASON:
        if (value == null) {
          unsetReason();
        } else {
          setReason((String)value);
        }
        break;

      case CLIENT_IP:
        if (value == null) {
          unsetClientIP();
        } else {
          setClientIP((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      case APP_ID:
        if (value == null) {
          unsetAppID();
        } else {
          setAppID((String)value);
        }
        break;

      case TX_TYPE:
        if (value == null) {
          unsetTxType();
        } else {
          setTxType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return new Integer(getUserID());

      case ADJUST_MONEY:
        return new Double(getAdjustMoney());

      case ADMIN_SIG:
        return getAdminSig();

      case REASON:
        return getReason();

      case CLIENT_IP:
        return getClientIP();

      case TIME:
        return new Integer(getTime());

      case APP_ID:
        return getAppID();

      case TX_TYPE:
        return new Integer(getTxType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserID();
      case ADJUST_MONEY:
        return isSetAdjustMoney();
      case ADMIN_SIG:
        return isSetAdminSig();
      case REASON:
        return isSetReason();
      case CLIENT_IP:
        return isSetClientIP();
      case TIME:
        return isSetTime();
      case APP_ID:
        return isSetAppID();
      case TX_TYPE:
        return isSetTxType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compensate_args)
        return this.equals((compensate_args)that);
      return false;
    }

    public boolean equals(compensate_args that) {
      if (that == null)
        return false;

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      boolean this_present_adjustMoney = true;
      boolean that_present_adjustMoney = true;
      if (this_present_adjustMoney || that_present_adjustMoney) {
        if (!(this_present_adjustMoney && that_present_adjustMoney))
          return false;
        if (this.adjustMoney != that.adjustMoney)
          return false;
      }

      boolean this_present_adminSig = true && this.isSetAdminSig();
      boolean that_present_adminSig = true && that.isSetAdminSig();
      if (this_present_adminSig || that_present_adminSig) {
        if (!(this_present_adminSig && that_present_adminSig))
          return false;
        if (!this.adminSig.equals(that.adminSig))
          return false;
      }

      boolean this_present_reason = true && this.isSetReason();
      boolean that_present_reason = true && that.isSetReason();
      if (this_present_reason || that_present_reason) {
        if (!(this_present_reason && that_present_reason))
          return false;
        if (!this.reason.equals(that.reason))
          return false;
      }

      boolean this_present_clientIP = true && this.isSetClientIP();
      boolean that_present_clientIP = true && that.isSetClientIP();
      if (this_present_clientIP || that_present_clientIP) {
        if (!(this_present_clientIP && that_present_clientIP))
          return false;
        if (!this.clientIP.equals(that.clientIP))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      boolean this_present_appID = true && this.isSetAppID();
      boolean that_present_appID = true && that.isSetAppID();
      if (this_present_appID || that_present_appID) {
        if (!(this_present_appID && that_present_appID))
          return false;
        if (!this.appID.equals(that.appID))
          return false;
      }

      boolean this_present_txType = true;
      boolean that_present_txType = true;
      if (this_present_txType || that_present_txType) {
        if (!(this_present_txType && that_present_txType))
          return false;
        if (this.txType != that.txType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(compensate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      compensate_args typedOther = (compensate_args)other;

      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdjustMoney()).compareTo(typedOther.isSetAdjustMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdjustMoney()) {
        lastComparison = TBaseHelper.compareTo(this.adjustMoney, typedOther.adjustMoney);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdminSig()).compareTo(typedOther.isSetAdminSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminSig()) {
        lastComparison = TBaseHelper.compareTo(this.adminSig, typedOther.adminSig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReason()) {
        lastComparison = TBaseHelper.compareTo(this.reason, typedOther.reason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientIP()).compareTo(typedOther.isSetClientIP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientIP()) {
        lastComparison = TBaseHelper.compareTo(this.clientIP, typedOther.clientIP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppID()).compareTo(typedOther.isSetAppID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppID()) {
        lastComparison = TBaseHelper.compareTo(this.appID, typedOther.appID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxType()).compareTo(typedOther.isSetTxType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxType()) {
        lastComparison = TBaseHelper.compareTo(this.txType, typedOther.txType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_ID
            if (field.type == TType.I32) {
              this.userID = iprot.readI32();
              setUserIDIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ADJUST_MONEY
            if (field.type == TType.DOUBLE) {
              this.adjustMoney = iprot.readDouble();
              setAdjustMoneyIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ADMIN_SIG
            if (field.type == TType.STRING) {
              this.adminSig = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // REASON
            if (field.type == TType.STRING) {
              this.reason = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // CLIENT_IP
            if (field.type == TType.STRING) {
              this.clientIP = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // TIME
            if (field.type == TType.I32) {
              this.time = iprot.readI32();
              setTimeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // APP_ID
            if (field.type == TType.STRING) {
              this.appID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // TX_TYPE
            if (field.type == TType.I32) {
              this.txType = iprot.readI32();
              setTxTypeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(this.userID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADJUST_MONEY_FIELD_DESC);
      oprot.writeDouble(this.adjustMoney);
      oprot.writeFieldEnd();
      if (this.adminSig != null) {
        oprot.writeFieldBegin(ADMIN_SIG_FIELD_DESC);
        oprot.writeString(this.adminSig);
        oprot.writeFieldEnd();
      }
      if (this.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(this.reason);
        oprot.writeFieldEnd();
      }
      if (this.clientIP != null) {
        oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
        oprot.writeString(this.clientIP);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI32(this.time);
      oprot.writeFieldEnd();
      if (this.appID != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(this.appID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TX_TYPE_FIELD_DESC);
      oprot.writeI32(this.txType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compensate_args(");
      boolean first = true;

      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("adjustMoney:");
      sb.append(this.adjustMoney);
      first = false;
      if (!first) sb.append(", ");
      sb.append("adminSig:");
      if (this.adminSig == null) {
        sb.append("null");
      } else {
        sb.append(this.adminSig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientIP:");
      if (this.clientIP == null) {
        sb.append("null");
      } else {
        sb.append(this.clientIP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("appID:");
      if (this.appID == null) {
        sb.append("null");
      } else {
        sb.append(this.appID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txType:");
      sb.append(this.txType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class compensate_result implements TBase<compensate_result, compensate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("compensate_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(compensate_result.class, metaDataMap);
    }

    public compensate_result() {
    }

    public compensate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compensate_result(compensate_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public compensate_result deepCopy() {
      return new compensate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public compensate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compensate_result)
        return this.equals((compensate_result)that);
      return false;
    }

    public boolean equals(compensate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(compensate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      compensate_result typedOther = (compensate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compensate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
