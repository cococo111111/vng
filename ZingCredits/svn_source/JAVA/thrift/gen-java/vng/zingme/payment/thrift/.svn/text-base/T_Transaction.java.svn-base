/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package vng.zingme.payment.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class T_Transaction implements TBase<T_Transaction, T_Transaction._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("T_Transaction");

  private static final TField TX_ID_FIELD_DESC = new TField("txID", TType.I64, (short)1);
  private static final TField TX_TYPE_FIELD_DESC = new TField("txType", TType.I16, (short)2);
  private static final TField TX_TIME_FIELD_DESC = new TField("txTime", TType.I32, (short)3);
  private static final TField TX_LOCAL_TIME_FIELD_DESC = new TField("txLocalTime", TType.I32, (short)4);
  private static final TField USER_ID_FIELD_DESC = new TField("userID", TType.I32, (short)5);
  private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)6);
  private static final TField CURRENT_BALANCE_FIELD_DESC = new TField("currentBalance", TType.DOUBLE, (short)7);
  private static final TField AMOUNT_FIELD_DESC = new TField("amount", TType.DOUBLE, (short)8);
  private static final TField AGENT_ID_FIELD_DESC = new TField("agentID", TType.STRING, (short)9);
  private static final TField REF_ID_FIELD_DESC = new TField("refID", TType.STRING, (short)10);
  private static final TField ITEM_IDS_FIELD_DESC = new TField("itemIDs", TType.STRING, (short)11);
  private static final TField ITEM_NAMES_FIELD_DESC = new TField("itemNames", TType.STRING, (short)12);
  private static final TField ITEM_PRICES_FIELD_DESC = new TField("itemPrices", TType.STRING, (short)13);
  private static final TField ITEM_QUANTITIES_FIELD_DESC = new TField("itemQuantities", TType.STRING, (short)14);
  private static final TField MAC_FIELD_DESC = new TField("mac", TType.STRING, (short)15);
  private static final TField RESPONSE_CODE_FIELD_DESC = new TField("responseCode", TType.I16, (short)16);
  private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short)17);
  private static final TField CLIENT_IP_FIELD_DESC = new TField("clientIP", TType.STRING, (short)18);

  public long txID;
  public short txType;
  public int txTime;
  public int txLocalTime;
  public int userID;
  public String userName;
  public double currentBalance;
  public double amount;
  public String agentID;
  public String refID;
  public String itemIDs;
  public String itemNames;
  public String itemPrices;
  public String itemQuantities;
  public String mac;
  public short responseCode;
  public String description;
  public String clientIP;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TX_ID((short)1, "txID"),
    TX_TYPE((short)2, "txType"),
    TX_TIME((short)3, "txTime"),
    TX_LOCAL_TIME((short)4, "txLocalTime"),
    USER_ID((short)5, "userID"),
    USER_NAME((short)6, "userName"),
    CURRENT_BALANCE((short)7, "currentBalance"),
    AMOUNT((short)8, "amount"),
    AGENT_ID((short)9, "agentID"),
    REF_ID((short)10, "refID"),
    ITEM_IDS((short)11, "itemIDs"),
    ITEM_NAMES((short)12, "itemNames"),
    ITEM_PRICES((short)13, "itemPrices"),
    ITEM_QUANTITIES((short)14, "itemQuantities"),
    MAC((short)15, "mac"),
    RESPONSE_CODE((short)16, "responseCode"),
    DESCRIPTION((short)17, "description"),
    CLIENT_IP((short)18, "clientIP");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TX_ID
          return TX_ID;
        case 2: // TX_TYPE
          return TX_TYPE;
        case 3: // TX_TIME
          return TX_TIME;
        case 4: // TX_LOCAL_TIME
          return TX_LOCAL_TIME;
        case 5: // USER_ID
          return USER_ID;
        case 6: // USER_NAME
          return USER_NAME;
        case 7: // CURRENT_BALANCE
          return CURRENT_BALANCE;
        case 8: // AMOUNT
          return AMOUNT;
        case 9: // AGENT_ID
          return AGENT_ID;
        case 10: // REF_ID
          return REF_ID;
        case 11: // ITEM_IDS
          return ITEM_IDS;
        case 12: // ITEM_NAMES
          return ITEM_NAMES;
        case 13: // ITEM_PRICES
          return ITEM_PRICES;
        case 14: // ITEM_QUANTITIES
          return ITEM_QUANTITIES;
        case 15: // MAC
          return MAC;
        case 16: // RESPONSE_CODE
          return RESPONSE_CODE;
        case 17: // DESCRIPTION
          return DESCRIPTION;
        case 18: // CLIENT_IP
          return CLIENT_IP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TXID_ISSET_ID = 0;
  private static final int __TXTYPE_ISSET_ID = 1;
  private static final int __TXTIME_ISSET_ID = 2;
  private static final int __TXLOCALTIME_ISSET_ID = 3;
  private static final int __USERID_ISSET_ID = 4;
  private static final int __CURRENTBALANCE_ISSET_ID = 5;
  private static final int __AMOUNT_ISSET_ID = 6;
  private static final int __RESPONSECODE_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TX_ID, new FieldMetaData("txID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.TX_TYPE, new FieldMetaData("txType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMap.put(_Fields.TX_TIME, new FieldMetaData("txTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TX_LOCAL_TIME, new FieldMetaData("txLocalTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CURRENT_BALANCE, new FieldMetaData("currentBalance", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT, new FieldMetaData("amount", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.AGENT_ID, new FieldMetaData("agentID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.REF_ID, new FieldMetaData("refID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ITEM_IDS, new FieldMetaData("itemIDs", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ITEM_NAMES, new FieldMetaData("itemNames", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ITEM_PRICES, new FieldMetaData("itemPrices", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ITEM_QUANTITIES, new FieldMetaData("itemQuantities", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MAC, new FieldMetaData("mac", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.RESPONSE_CODE, new FieldMetaData("responseCode", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMap.put(_Fields.DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CLIENT_IP, new FieldMetaData("clientIP", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(T_Transaction.class, metaDataMap);
  }

  public T_Transaction() {
  }

  public T_Transaction(
    long txID,
    short txType,
    int txTime,
    int txLocalTime,
    int userID,
    String userName,
    double currentBalance,
    double amount,
    String agentID,
    String refID,
    String itemIDs,
    String itemNames,
    String itemPrices,
    String itemQuantities,
    String mac,
    short responseCode,
    String description,
    String clientIP)
  {
    this();
    this.txID = txID;
    setTxIDIsSet(true);
    this.txType = txType;
    setTxTypeIsSet(true);
    this.txTime = txTime;
    setTxTimeIsSet(true);
    this.txLocalTime = txLocalTime;
    setTxLocalTimeIsSet(true);
    this.userID = userID;
    setUserIDIsSet(true);
    this.userName = userName;
    this.currentBalance = currentBalance;
    setCurrentBalanceIsSet(true);
    this.amount = amount;
    setAmountIsSet(true);
    this.agentID = agentID;
    this.refID = refID;
    this.itemIDs = itemIDs;
    this.itemNames = itemNames;
    this.itemPrices = itemPrices;
    this.itemQuantities = itemQuantities;
    this.mac = mac;
    this.responseCode = responseCode;
    setResponseCodeIsSet(true);
    this.description = description;
    this.clientIP = clientIP;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public T_Transaction(T_Transaction other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.txID = other.txID;
    this.txType = other.txType;
    this.txTime = other.txTime;
    this.txLocalTime = other.txLocalTime;
    this.userID = other.userID;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    this.currentBalance = other.currentBalance;
    this.amount = other.amount;
    if (other.isSetAgentID()) {
      this.agentID = other.agentID;
    }
    if (other.isSetRefID()) {
      this.refID = other.refID;
    }
    if (other.isSetItemIDs()) {
      this.itemIDs = other.itemIDs;
    }
    if (other.isSetItemNames()) {
      this.itemNames = other.itemNames;
    }
    if (other.isSetItemPrices()) {
      this.itemPrices = other.itemPrices;
    }
    if (other.isSetItemQuantities()) {
      this.itemQuantities = other.itemQuantities;
    }
    if (other.isSetMac()) {
      this.mac = other.mac;
    }
    this.responseCode = other.responseCode;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetClientIP()) {
      this.clientIP = other.clientIP;
    }
  }

  public T_Transaction deepCopy() {
    return new T_Transaction(this);
  }

  @Override
  public void clear() {
    setTxIDIsSet(false);
    this.txID = 0;
    setTxTypeIsSet(false);
    this.txType = 0;
    setTxTimeIsSet(false);
    this.txTime = 0;
    setTxLocalTimeIsSet(false);
    this.txLocalTime = 0;
    setUserIDIsSet(false);
    this.userID = 0;
    this.userName = null;
    setCurrentBalanceIsSet(false);
    this.currentBalance = 0.0;
    setAmountIsSet(false);
    this.amount = 0.0;
    this.agentID = null;
    this.refID = null;
    this.itemIDs = null;
    this.itemNames = null;
    this.itemPrices = null;
    this.itemQuantities = null;
    this.mac = null;
    setResponseCodeIsSet(false);
    this.responseCode = 0;
    this.description = null;
    this.clientIP = null;
  }

  public long getTxID() {
    return this.txID;
  }

  public T_Transaction setTxID(long txID) {
    this.txID = txID;
    setTxIDIsSet(true);
    return this;
  }

  public void unsetTxID() {
    __isset_bit_vector.clear(__TXID_ISSET_ID);
  }

  /** Returns true if field txID is set (has been asigned a value) and false otherwise */
  public boolean isSetTxID() {
    return __isset_bit_vector.get(__TXID_ISSET_ID);
  }

  public void setTxIDIsSet(boolean value) {
    __isset_bit_vector.set(__TXID_ISSET_ID, value);
  }

  public short getTxType() {
    return this.txType;
  }

  public T_Transaction setTxType(short txType) {
    this.txType = txType;
    setTxTypeIsSet(true);
    return this;
  }

  public void unsetTxType() {
    __isset_bit_vector.clear(__TXTYPE_ISSET_ID);
  }

  /** Returns true if field txType is set (has been asigned a value) and false otherwise */
  public boolean isSetTxType() {
    return __isset_bit_vector.get(__TXTYPE_ISSET_ID);
  }

  public void setTxTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TXTYPE_ISSET_ID, value);
  }

  public int getTxTime() {
    return this.txTime;
  }

  public T_Transaction setTxTime(int txTime) {
    this.txTime = txTime;
    setTxTimeIsSet(true);
    return this;
  }

  public void unsetTxTime() {
    __isset_bit_vector.clear(__TXTIME_ISSET_ID);
  }

  /** Returns true if field txTime is set (has been asigned a value) and false otherwise */
  public boolean isSetTxTime() {
    return __isset_bit_vector.get(__TXTIME_ISSET_ID);
  }

  public void setTxTimeIsSet(boolean value) {
    __isset_bit_vector.set(__TXTIME_ISSET_ID, value);
  }

  public int getTxLocalTime() {
    return this.txLocalTime;
  }

  public T_Transaction setTxLocalTime(int txLocalTime) {
    this.txLocalTime = txLocalTime;
    setTxLocalTimeIsSet(true);
    return this;
  }

  public void unsetTxLocalTime() {
    __isset_bit_vector.clear(__TXLOCALTIME_ISSET_ID);
  }

  /** Returns true if field txLocalTime is set (has been asigned a value) and false otherwise */
  public boolean isSetTxLocalTime() {
    return __isset_bit_vector.get(__TXLOCALTIME_ISSET_ID);
  }

  public void setTxLocalTimeIsSet(boolean value) {
    __isset_bit_vector.set(__TXLOCALTIME_ISSET_ID, value);
  }

  public int getUserID() {
    return this.userID;
  }

  public T_Transaction setUserID(int userID) {
    this.userID = userID;
    setUserIDIsSet(true);
    return this;
  }

  public void unsetUserID() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userID is set (has been asigned a value) and false otherwise */
  public boolean isSetUserID() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIDIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public T_Transaction setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been asigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public double getCurrentBalance() {
    return this.currentBalance;
  }

  public T_Transaction setCurrentBalance(double currentBalance) {
    this.currentBalance = currentBalance;
    setCurrentBalanceIsSet(true);
    return this;
  }

  public void unsetCurrentBalance() {
    __isset_bit_vector.clear(__CURRENTBALANCE_ISSET_ID);
  }

  /** Returns true if field currentBalance is set (has been asigned a value) and false otherwise */
  public boolean isSetCurrentBalance() {
    return __isset_bit_vector.get(__CURRENTBALANCE_ISSET_ID);
  }

  public void setCurrentBalanceIsSet(boolean value) {
    __isset_bit_vector.set(__CURRENTBALANCE_ISSET_ID, value);
  }

  public double getAmount() {
    return this.amount;
  }

  public T_Transaction setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bit_vector.clear(__AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been asigned a value) and false otherwise */
  public boolean isSetAmount() {
    return __isset_bit_vector.get(__AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bit_vector.set(__AMOUNT_ISSET_ID, value);
  }

  public String getAgentID() {
    return this.agentID;
  }

  public T_Transaction setAgentID(String agentID) {
    this.agentID = agentID;
    return this;
  }

  public void unsetAgentID() {
    this.agentID = null;
  }

  /** Returns true if field agentID is set (has been asigned a value) and false otherwise */
  public boolean isSetAgentID() {
    return this.agentID != null;
  }

  public void setAgentIDIsSet(boolean value) {
    if (!value) {
      this.agentID = null;
    }
  }

  public String getRefID() {
    return this.refID;
  }

  public T_Transaction setRefID(String refID) {
    this.refID = refID;
    return this;
  }

  public void unsetRefID() {
    this.refID = null;
  }

  /** Returns true if field refID is set (has been asigned a value) and false otherwise */
  public boolean isSetRefID() {
    return this.refID != null;
  }

  public void setRefIDIsSet(boolean value) {
    if (!value) {
      this.refID = null;
    }
  }

  public String getItemIDs() {
    return this.itemIDs;
  }

  public T_Transaction setItemIDs(String itemIDs) {
    this.itemIDs = itemIDs;
    return this;
  }

  public void unsetItemIDs() {
    this.itemIDs = null;
  }

  /** Returns true if field itemIDs is set (has been asigned a value) and false otherwise */
  public boolean isSetItemIDs() {
    return this.itemIDs != null;
  }

  public void setItemIDsIsSet(boolean value) {
    if (!value) {
      this.itemIDs = null;
    }
  }

  public String getItemNames() {
    return this.itemNames;
  }

  public T_Transaction setItemNames(String itemNames) {
    this.itemNames = itemNames;
    return this;
  }

  public void unsetItemNames() {
    this.itemNames = null;
  }

  /** Returns true if field itemNames is set (has been asigned a value) and false otherwise */
  public boolean isSetItemNames() {
    return this.itemNames != null;
  }

  public void setItemNamesIsSet(boolean value) {
    if (!value) {
      this.itemNames = null;
    }
  }

  public String getItemPrices() {
    return this.itemPrices;
  }

  public T_Transaction setItemPrices(String itemPrices) {
    this.itemPrices = itemPrices;
    return this;
  }

  public void unsetItemPrices() {
    this.itemPrices = null;
  }

  /** Returns true if field itemPrices is set (has been asigned a value) and false otherwise */
  public boolean isSetItemPrices() {
    return this.itemPrices != null;
  }

  public void setItemPricesIsSet(boolean value) {
    if (!value) {
      this.itemPrices = null;
    }
  }

  public String getItemQuantities() {
    return this.itemQuantities;
  }

  public T_Transaction setItemQuantities(String itemQuantities) {
    this.itemQuantities = itemQuantities;
    return this;
  }

  public void unsetItemQuantities() {
    this.itemQuantities = null;
  }

  /** Returns true if field itemQuantities is set (has been asigned a value) and false otherwise */
  public boolean isSetItemQuantities() {
    return this.itemQuantities != null;
  }

  public void setItemQuantitiesIsSet(boolean value) {
    if (!value) {
      this.itemQuantities = null;
    }
  }

  public String getMac() {
    return this.mac;
  }

  public T_Transaction setMac(String mac) {
    this.mac = mac;
    return this;
  }

  public void unsetMac() {
    this.mac = null;
  }

  /** Returns true if field mac is set (has been asigned a value) and false otherwise */
  public boolean isSetMac() {
    return this.mac != null;
  }

  public void setMacIsSet(boolean value) {
    if (!value) {
      this.mac = null;
    }
  }

  public short getResponseCode() {
    return this.responseCode;
  }

  public T_Transaction setResponseCode(short responseCode) {
    this.responseCode = responseCode;
    setResponseCodeIsSet(true);
    return this;
  }

  public void unsetResponseCode() {
    __isset_bit_vector.clear(__RESPONSECODE_ISSET_ID);
  }

  /** Returns true if field responseCode is set (has been asigned a value) and false otherwise */
  public boolean isSetResponseCode() {
    return __isset_bit_vector.get(__RESPONSECODE_ISSET_ID);
  }

  public void setResponseCodeIsSet(boolean value) {
    __isset_bit_vector.set(__RESPONSECODE_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public T_Transaction setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been asigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getClientIP() {
    return this.clientIP;
  }

  public T_Transaction setClientIP(String clientIP) {
    this.clientIP = clientIP;
    return this;
  }

  public void unsetClientIP() {
    this.clientIP = null;
  }

  /** Returns true if field clientIP is set (has been asigned a value) and false otherwise */
  public boolean isSetClientIP() {
    return this.clientIP != null;
  }

  public void setClientIPIsSet(boolean value) {
    if (!value) {
      this.clientIP = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TX_ID:
      if (value == null) {
        unsetTxID();
      } else {
        setTxID((Long)value);
      }
      break;

    case TX_TYPE:
      if (value == null) {
        unsetTxType();
      } else {
        setTxType((Short)value);
      }
      break;

    case TX_TIME:
      if (value == null) {
        unsetTxTime();
      } else {
        setTxTime((Integer)value);
      }
      break;

    case TX_LOCAL_TIME:
      if (value == null) {
        unsetTxLocalTime();
      } else {
        setTxLocalTime((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case CURRENT_BALANCE:
      if (value == null) {
        unsetCurrentBalance();
      } else {
        setCurrentBalance((Double)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Double)value);
      }
      break;

    case AGENT_ID:
      if (value == null) {
        unsetAgentID();
      } else {
        setAgentID((String)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefID();
      } else {
        setRefID((String)value);
      }
      break;

    case ITEM_IDS:
      if (value == null) {
        unsetItemIDs();
      } else {
        setItemIDs((String)value);
      }
      break;

    case ITEM_NAMES:
      if (value == null) {
        unsetItemNames();
      } else {
        setItemNames((String)value);
      }
      break;

    case ITEM_PRICES:
      if (value == null) {
        unsetItemPrices();
      } else {
        setItemPrices((String)value);
      }
      break;

    case ITEM_QUANTITIES:
      if (value == null) {
        unsetItemQuantities();
      } else {
        setItemQuantities((String)value);
      }
      break;

    case MAC:
      if (value == null) {
        unsetMac();
      } else {
        setMac((String)value);
      }
      break;

    case RESPONSE_CODE:
      if (value == null) {
        unsetResponseCode();
      } else {
        setResponseCode((Short)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case CLIENT_IP:
      if (value == null) {
        unsetClientIP();
      } else {
        setClientIP((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TX_ID:
      return new Long(getTxID());

    case TX_TYPE:
      return new Short(getTxType());

    case TX_TIME:
      return new Integer(getTxTime());

    case TX_LOCAL_TIME:
      return new Integer(getTxLocalTime());

    case USER_ID:
      return new Integer(getUserID());

    case USER_NAME:
      return getUserName();

    case CURRENT_BALANCE:
      return new Double(getCurrentBalance());

    case AMOUNT:
      return new Double(getAmount());

    case AGENT_ID:
      return getAgentID();

    case REF_ID:
      return getRefID();

    case ITEM_IDS:
      return getItemIDs();

    case ITEM_NAMES:
      return getItemNames();

    case ITEM_PRICES:
      return getItemPrices();

    case ITEM_QUANTITIES:
      return getItemQuantities();

    case MAC:
      return getMac();

    case RESPONSE_CODE:
      return new Short(getResponseCode());

    case DESCRIPTION:
      return getDescription();

    case CLIENT_IP:
      return getClientIP();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TX_ID:
      return isSetTxID();
    case TX_TYPE:
      return isSetTxType();
    case TX_TIME:
      return isSetTxTime();
    case TX_LOCAL_TIME:
      return isSetTxLocalTime();
    case USER_ID:
      return isSetUserID();
    case USER_NAME:
      return isSetUserName();
    case CURRENT_BALANCE:
      return isSetCurrentBalance();
    case AMOUNT:
      return isSetAmount();
    case AGENT_ID:
      return isSetAgentID();
    case REF_ID:
      return isSetRefID();
    case ITEM_IDS:
      return isSetItemIDs();
    case ITEM_NAMES:
      return isSetItemNames();
    case ITEM_PRICES:
      return isSetItemPrices();
    case ITEM_QUANTITIES:
      return isSetItemQuantities();
    case MAC:
      return isSetMac();
    case RESPONSE_CODE:
      return isSetResponseCode();
    case DESCRIPTION:
      return isSetDescription();
    case CLIENT_IP:
      return isSetClientIP();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof T_Transaction)
      return this.equals((T_Transaction)that);
    return false;
  }

  public boolean equals(T_Transaction that) {
    if (that == null)
      return false;

    boolean this_present_txID = true;
    boolean that_present_txID = true;
    if (this_present_txID || that_present_txID) {
      if (!(this_present_txID && that_present_txID))
        return false;
      if (this.txID != that.txID)
        return false;
    }

    boolean this_present_txType = true;
    boolean that_present_txType = true;
    if (this_present_txType || that_present_txType) {
      if (!(this_present_txType && that_present_txType))
        return false;
      if (this.txType != that.txType)
        return false;
    }

    boolean this_present_txTime = true;
    boolean that_present_txTime = true;
    if (this_present_txTime || that_present_txTime) {
      if (!(this_present_txTime && that_present_txTime))
        return false;
      if (this.txTime != that.txTime)
        return false;
    }

    boolean this_present_txLocalTime = true;
    boolean that_present_txLocalTime = true;
    if (this_present_txLocalTime || that_present_txLocalTime) {
      if (!(this_present_txLocalTime && that_present_txLocalTime))
        return false;
      if (this.txLocalTime != that.txLocalTime)
        return false;
    }

    boolean this_present_userID = true;
    boolean that_present_userID = true;
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (this.userID != that.userID)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_currentBalance = true;
    boolean that_present_currentBalance = true;
    if (this_present_currentBalance || that_present_currentBalance) {
      if (!(this_present_currentBalance && that_present_currentBalance))
        return false;
      if (this.currentBalance != that.currentBalance)
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_agentID = true && this.isSetAgentID();
    boolean that_present_agentID = true && that.isSetAgentID();
    if (this_present_agentID || that_present_agentID) {
      if (!(this_present_agentID && that_present_agentID))
        return false;
      if (!this.agentID.equals(that.agentID))
        return false;
    }

    boolean this_present_refID = true && this.isSetRefID();
    boolean that_present_refID = true && that.isSetRefID();
    if (this_present_refID || that_present_refID) {
      if (!(this_present_refID && that_present_refID))
        return false;
      if (!this.refID.equals(that.refID))
        return false;
    }

    boolean this_present_itemIDs = true && this.isSetItemIDs();
    boolean that_present_itemIDs = true && that.isSetItemIDs();
    if (this_present_itemIDs || that_present_itemIDs) {
      if (!(this_present_itemIDs && that_present_itemIDs))
        return false;
      if (!this.itemIDs.equals(that.itemIDs))
        return false;
    }

    boolean this_present_itemNames = true && this.isSetItemNames();
    boolean that_present_itemNames = true && that.isSetItemNames();
    if (this_present_itemNames || that_present_itemNames) {
      if (!(this_present_itemNames && that_present_itemNames))
        return false;
      if (!this.itemNames.equals(that.itemNames))
        return false;
    }

    boolean this_present_itemPrices = true && this.isSetItemPrices();
    boolean that_present_itemPrices = true && that.isSetItemPrices();
    if (this_present_itemPrices || that_present_itemPrices) {
      if (!(this_present_itemPrices && that_present_itemPrices))
        return false;
      if (!this.itemPrices.equals(that.itemPrices))
        return false;
    }

    boolean this_present_itemQuantities = true && this.isSetItemQuantities();
    boolean that_present_itemQuantities = true && that.isSetItemQuantities();
    if (this_present_itemQuantities || that_present_itemQuantities) {
      if (!(this_present_itemQuantities && that_present_itemQuantities))
        return false;
      if (!this.itemQuantities.equals(that.itemQuantities))
        return false;
    }

    boolean this_present_mac = true && this.isSetMac();
    boolean that_present_mac = true && that.isSetMac();
    if (this_present_mac || that_present_mac) {
      if (!(this_present_mac && that_present_mac))
        return false;
      if (!this.mac.equals(that.mac))
        return false;
    }

    boolean this_present_responseCode = true;
    boolean that_present_responseCode = true;
    if (this_present_responseCode || that_present_responseCode) {
      if (!(this_present_responseCode && that_present_responseCode))
        return false;
      if (this.responseCode != that.responseCode)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_clientIP = true && this.isSetClientIP();
    boolean that_present_clientIP = true && that.isSetClientIP();
    if (this_present_clientIP || that_present_clientIP) {
      if (!(this_present_clientIP && that_present_clientIP))
        return false;
      if (!this.clientIP.equals(that.clientIP))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(T_Transaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    T_Transaction typedOther = (T_Transaction)other;

    lastComparison = Boolean.valueOf(isSetTxID()).compareTo(typedOther.isSetTxID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxID()) {
      lastComparison = TBaseHelper.compareTo(this.txID, typedOther.txID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxType()).compareTo(typedOther.isSetTxType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxType()) {
      lastComparison = TBaseHelper.compareTo(this.txType, typedOther.txType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxTime()).compareTo(typedOther.isSetTxTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxTime()) {
      lastComparison = TBaseHelper.compareTo(this.txTime, typedOther.txTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxLocalTime()).compareTo(typedOther.isSetTxLocalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxLocalTime()) {
      lastComparison = TBaseHelper.compareTo(this.txLocalTime, typedOther.txLocalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = TBaseHelper.compareTo(this.userID, typedOther.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentBalance()).compareTo(typedOther.isSetCurrentBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentBalance()) {
      lastComparison = TBaseHelper.compareTo(this.currentBalance, typedOther.currentBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = TBaseHelper.compareTo(this.amount, typedOther.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentID()).compareTo(typedOther.isSetAgentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentID()) {
      lastComparison = TBaseHelper.compareTo(this.agentID, typedOther.agentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefID()).compareTo(typedOther.isSetRefID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefID()) {
      lastComparison = TBaseHelper.compareTo(this.refID, typedOther.refID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemIDs()).compareTo(typedOther.isSetItemIDs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemIDs()) {
      lastComparison = TBaseHelper.compareTo(this.itemIDs, typedOther.itemIDs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemNames()).compareTo(typedOther.isSetItemNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemNames()) {
      lastComparison = TBaseHelper.compareTo(this.itemNames, typedOther.itemNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemPrices()).compareTo(typedOther.isSetItemPrices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemPrices()) {
      lastComparison = TBaseHelper.compareTo(this.itemPrices, typedOther.itemPrices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemQuantities()).compareTo(typedOther.isSetItemQuantities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemQuantities()) {
      lastComparison = TBaseHelper.compareTo(this.itemQuantities, typedOther.itemQuantities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMac()).compareTo(typedOther.isSetMac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMac()) {
      lastComparison = TBaseHelper.compareTo(this.mac, typedOther.mac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseCode()).compareTo(typedOther.isSetResponseCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseCode()) {
      lastComparison = TBaseHelper.compareTo(this.responseCode, typedOther.responseCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientIP()).compareTo(typedOther.isSetClientIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientIP()) {
      lastComparison = TBaseHelper.compareTo(this.clientIP, typedOther.clientIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TX_ID
          if (field.type == TType.I64) {
            this.txID = iprot.readI64();
            setTxIDIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TX_TYPE
          if (field.type == TType.I16) {
            this.txType = iprot.readI16();
            setTxTypeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TX_TIME
          if (field.type == TType.I32) {
            this.txTime = iprot.readI32();
            setTxTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TX_LOCAL_TIME
          if (field.type == TType.I32) {
            this.txLocalTime = iprot.readI32();
            setTxLocalTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // USER_ID
          if (field.type == TType.I32) {
            this.userID = iprot.readI32();
            setUserIDIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // USER_NAME
          if (field.type == TType.STRING) {
            this.userName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CURRENT_BALANCE
          if (field.type == TType.DOUBLE) {
            this.currentBalance = iprot.readDouble();
            setCurrentBalanceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // AMOUNT
          if (field.type == TType.DOUBLE) {
            this.amount = iprot.readDouble();
            setAmountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // AGENT_ID
          if (field.type == TType.STRING) {
            this.agentID = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // REF_ID
          if (field.type == TType.STRING) {
            this.refID = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // ITEM_IDS
          if (field.type == TType.STRING) {
            this.itemIDs = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // ITEM_NAMES
          if (field.type == TType.STRING) {
            this.itemNames = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // ITEM_PRICES
          if (field.type == TType.STRING) {
            this.itemPrices = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // ITEM_QUANTITIES
          if (field.type == TType.STRING) {
            this.itemQuantities = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // MAC
          if (field.type == TType.STRING) {
            this.mac = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // RESPONSE_CODE
          if (field.type == TType.I16) {
            this.responseCode = iprot.readI16();
            setResponseCodeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // DESCRIPTION
          if (field.type == TType.STRING) {
            this.description = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // CLIENT_IP
          if (field.type == TType.STRING) {
            this.clientIP = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TX_ID_FIELD_DESC);
    oprot.writeI64(this.txID);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TX_TYPE_FIELD_DESC);
    oprot.writeI16(this.txType);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TX_TIME_FIELD_DESC);
    oprot.writeI32(this.txTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TX_LOCAL_TIME_FIELD_DESC);
    oprot.writeI32(this.txLocalTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI32(this.userID);
    oprot.writeFieldEnd();
    if (this.userName != null) {
      oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
      oprot.writeString(this.userName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CURRENT_BALANCE_FIELD_DESC);
    oprot.writeDouble(this.currentBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
    oprot.writeDouble(this.amount);
    oprot.writeFieldEnd();
    if (this.agentID != null) {
      oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
      oprot.writeString(this.agentID);
      oprot.writeFieldEnd();
    }
    if (this.refID != null) {
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeString(this.refID);
      oprot.writeFieldEnd();
    }
    if (this.itemIDs != null) {
      oprot.writeFieldBegin(ITEM_IDS_FIELD_DESC);
      oprot.writeString(this.itemIDs);
      oprot.writeFieldEnd();
    }
    if (this.itemNames != null) {
      oprot.writeFieldBegin(ITEM_NAMES_FIELD_DESC);
      oprot.writeString(this.itemNames);
      oprot.writeFieldEnd();
    }
    if (this.itemPrices != null) {
      oprot.writeFieldBegin(ITEM_PRICES_FIELD_DESC);
      oprot.writeString(this.itemPrices);
      oprot.writeFieldEnd();
    }
    if (this.itemQuantities != null) {
      oprot.writeFieldBegin(ITEM_QUANTITIES_FIELD_DESC);
      oprot.writeString(this.itemQuantities);
      oprot.writeFieldEnd();
    }
    if (this.mac != null) {
      oprot.writeFieldBegin(MAC_FIELD_DESC);
      oprot.writeString(this.mac);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RESPONSE_CODE_FIELD_DESC);
    oprot.writeI16(this.responseCode);
    oprot.writeFieldEnd();
    if (this.description != null) {
      oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.description);
      oprot.writeFieldEnd();
    }
    if (this.clientIP != null) {
      oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
      oprot.writeString(this.clientIP);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("T_Transaction(");
    boolean first = true;

    sb.append("txID:");
    sb.append(this.txID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("txType:");
    sb.append(this.txType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("txTime:");
    sb.append(this.txTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("txLocalTime:");
    sb.append(this.txLocalTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    sb.append(this.userID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentBalance:");
    sb.append(this.currentBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentID:");
    if (this.agentID == null) {
      sb.append("null");
    } else {
      sb.append(this.agentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refID:");
    if (this.refID == null) {
      sb.append("null");
    } else {
      sb.append(this.refID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemIDs:");
    if (this.itemIDs == null) {
      sb.append("null");
    } else {
      sb.append(this.itemIDs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemNames:");
    if (this.itemNames == null) {
      sb.append("null");
    } else {
      sb.append(this.itemNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemPrices:");
    if (this.itemPrices == null) {
      sb.append("null");
    } else {
      sb.append(this.itemPrices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemQuantities:");
    if (this.itemQuantities == null) {
      sb.append("null");
    } else {
      sb.append(this.itemQuantities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mac:");
    if (this.mac == null) {
      sb.append("null");
    } else {
      sb.append(this.mac);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseCode:");
    sb.append(this.responseCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientIP:");
    if (this.clientIP == null) {
      sb.append("null");
    } else {
      sb.append(this.clientIP);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

