/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package vng.zingme.payment.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class T_Account implements TBase<T_Account, T_Account._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("T_Account");

  private static final TField USER_ID_FIELD_DESC = new TField("userID", TType.I32, (short)1);
  private static final TField CURRENT_BALANCE_FIELD_DESC = new TField("currentBalance", TType.DOUBLE, (short)2);
  private static final TField AMOUNT_FIELD_DESC = new TField("amount", TType.DOUBLE, (short)3);
  private static final TField TX_ID_FIELD_DESC = new TField("txID", TType.I64, (short)4);
  private static final TField TX_TYPE_FIELD_DESC = new TField("txType", TType.I16, (short)5);
  private static final TField AGENT_ID_FIELD_DESC = new TField("agentID", TType.STRING, (short)6);

  public int userID;
  public double currentBalance;
  public double amount;
  public long txID;
  public short txType;
  public String agentID;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_ID((short)1, "userID"),
    CURRENT_BALANCE((short)2, "currentBalance"),
    AMOUNT((short)3, "amount"),
    TX_ID((short)4, "txID"),
    TX_TYPE((short)5, "txType"),
    AGENT_ID((short)6, "agentID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // CURRENT_BALANCE
          return CURRENT_BALANCE;
        case 3: // AMOUNT
          return AMOUNT;
        case 4: // TX_ID
          return TX_ID;
        case 5: // TX_TYPE
          return TX_TYPE;
        case 6: // AGENT_ID
          return AGENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __CURRENTBALANCE_ISSET_ID = 1;
  private static final int __AMOUNT_ISSET_ID = 2;
  private static final int __TXID_ISSET_ID = 3;
  private static final int __TXTYPE_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CURRENT_BALANCE, new FieldMetaData("currentBalance", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT, new FieldMetaData("amount", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.TX_ID, new FieldMetaData("txID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.TX_TYPE, new FieldMetaData("txType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMap.put(_Fields.AGENT_ID, new FieldMetaData("agentID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(T_Account.class, metaDataMap);
  }

  public T_Account() {
  }

  public T_Account(
    int userID,
    double currentBalance,
    double amount,
    long txID,
    short txType,
    String agentID)
  {
    this();
    this.userID = userID;
    setUserIDIsSet(true);
    this.currentBalance = currentBalance;
    setCurrentBalanceIsSet(true);
    this.amount = amount;
    setAmountIsSet(true);
    this.txID = txID;
    setTxIDIsSet(true);
    this.txType = txType;
    setTxTypeIsSet(true);
    this.agentID = agentID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public T_Account(T_Account other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userID = other.userID;
    this.currentBalance = other.currentBalance;
    this.amount = other.amount;
    this.txID = other.txID;
    this.txType = other.txType;
    if (other.isSetAgentID()) {
      this.agentID = other.agentID;
    }
  }

  public T_Account deepCopy() {
    return new T_Account(this);
  }

  @Override
  public void clear() {
    setUserIDIsSet(false);
    this.userID = 0;
    setCurrentBalanceIsSet(false);
    this.currentBalance = 0.0;
    setAmountIsSet(false);
    this.amount = 0.0;
    setTxIDIsSet(false);
    this.txID = 0;
    setTxTypeIsSet(false);
    this.txType = 0;
    this.agentID = null;
  }

  public int getUserID() {
    return this.userID;
  }

  public T_Account setUserID(int userID) {
    this.userID = userID;
    setUserIDIsSet(true);
    return this;
  }

  public void unsetUserID() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userID is set (has been asigned a value) and false otherwise */
  public boolean isSetUserID() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIDIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public double getCurrentBalance() {
    return this.currentBalance;
  }

  public T_Account setCurrentBalance(double currentBalance) {
    this.currentBalance = currentBalance;
    setCurrentBalanceIsSet(true);
    return this;
  }

  public void unsetCurrentBalance() {
    __isset_bit_vector.clear(__CURRENTBALANCE_ISSET_ID);
  }

  /** Returns true if field currentBalance is set (has been asigned a value) and false otherwise */
  public boolean isSetCurrentBalance() {
    return __isset_bit_vector.get(__CURRENTBALANCE_ISSET_ID);
  }

  public void setCurrentBalanceIsSet(boolean value) {
    __isset_bit_vector.set(__CURRENTBALANCE_ISSET_ID, value);
  }

  public double getAmount() {
    return this.amount;
  }

  public T_Account setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bit_vector.clear(__AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been asigned a value) and false otherwise */
  public boolean isSetAmount() {
    return __isset_bit_vector.get(__AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bit_vector.set(__AMOUNT_ISSET_ID, value);
  }

  public long getTxID() {
    return this.txID;
  }

  public T_Account setTxID(long txID) {
    this.txID = txID;
    setTxIDIsSet(true);
    return this;
  }

  public void unsetTxID() {
    __isset_bit_vector.clear(__TXID_ISSET_ID);
  }

  /** Returns true if field txID is set (has been asigned a value) and false otherwise */
  public boolean isSetTxID() {
    return __isset_bit_vector.get(__TXID_ISSET_ID);
  }

  public void setTxIDIsSet(boolean value) {
    __isset_bit_vector.set(__TXID_ISSET_ID, value);
  }

  public short getTxType() {
    return this.txType;
  }

  public T_Account setTxType(short txType) {
    this.txType = txType;
    setTxTypeIsSet(true);
    return this;
  }

  public void unsetTxType() {
    __isset_bit_vector.clear(__TXTYPE_ISSET_ID);
  }

  /** Returns true if field txType is set (has been asigned a value) and false otherwise */
  public boolean isSetTxType() {
    return __isset_bit_vector.get(__TXTYPE_ISSET_ID);
  }

  public void setTxTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TXTYPE_ISSET_ID, value);
  }

  public String getAgentID() {
    return this.agentID;
  }

  public T_Account setAgentID(String agentID) {
    this.agentID = agentID;
    return this;
  }

  public void unsetAgentID() {
    this.agentID = null;
  }

  /** Returns true if field agentID is set (has been asigned a value) and false otherwise */
  public boolean isSetAgentID() {
    return this.agentID != null;
  }

  public void setAgentIDIsSet(boolean value) {
    if (!value) {
      this.agentID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((Integer)value);
      }
      break;

    case CURRENT_BALANCE:
      if (value == null) {
        unsetCurrentBalance();
      } else {
        setCurrentBalance((Double)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Double)value);
      }
      break;

    case TX_ID:
      if (value == null) {
        unsetTxID();
      } else {
        setTxID((Long)value);
      }
      break;

    case TX_TYPE:
      if (value == null) {
        unsetTxType();
      } else {
        setTxType((Short)value);
      }
      break;

    case AGENT_ID:
      if (value == null) {
        unsetAgentID();
      } else {
        setAgentID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return new Integer(getUserID());

    case CURRENT_BALANCE:
      return new Double(getCurrentBalance());

    case AMOUNT:
      return new Double(getAmount());

    case TX_ID:
      return new Long(getTxID());

    case TX_TYPE:
      return new Short(getTxType());

    case AGENT_ID:
      return getAgentID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserID();
    case CURRENT_BALANCE:
      return isSetCurrentBalance();
    case AMOUNT:
      return isSetAmount();
    case TX_ID:
      return isSetTxID();
    case TX_TYPE:
      return isSetTxType();
    case AGENT_ID:
      return isSetAgentID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof T_Account)
      return this.equals((T_Account)that);
    return false;
  }

  public boolean equals(T_Account that) {
    if (that == null)
      return false;

    boolean this_present_userID = true;
    boolean that_present_userID = true;
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (this.userID != that.userID)
        return false;
    }

    boolean this_present_currentBalance = true;
    boolean that_present_currentBalance = true;
    if (this_present_currentBalance || that_present_currentBalance) {
      if (!(this_present_currentBalance && that_present_currentBalance))
        return false;
      if (this.currentBalance != that.currentBalance)
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_txID = true;
    boolean that_present_txID = true;
    if (this_present_txID || that_present_txID) {
      if (!(this_present_txID && that_present_txID))
        return false;
      if (this.txID != that.txID)
        return false;
    }

    boolean this_present_txType = true;
    boolean that_present_txType = true;
    if (this_present_txType || that_present_txType) {
      if (!(this_present_txType && that_present_txType))
        return false;
      if (this.txType != that.txType)
        return false;
    }

    boolean this_present_agentID = true && this.isSetAgentID();
    boolean that_present_agentID = true && that.isSetAgentID();
    if (this_present_agentID || that_present_agentID) {
      if (!(this_present_agentID && that_present_agentID))
        return false;
      if (!this.agentID.equals(that.agentID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(T_Account other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    T_Account typedOther = (T_Account)other;

    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = TBaseHelper.compareTo(this.userID, typedOther.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentBalance()).compareTo(typedOther.isSetCurrentBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentBalance()) {
      lastComparison = TBaseHelper.compareTo(this.currentBalance, typedOther.currentBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = TBaseHelper.compareTo(this.amount, typedOther.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxID()).compareTo(typedOther.isSetTxID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxID()) {
      lastComparison = TBaseHelper.compareTo(this.txID, typedOther.txID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxType()).compareTo(typedOther.isSetTxType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxType()) {
      lastComparison = TBaseHelper.compareTo(this.txType, typedOther.txType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentID()).compareTo(typedOther.isSetAgentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentID()) {
      lastComparison = TBaseHelper.compareTo(this.agentID, typedOther.agentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // USER_ID
          if (field.type == TType.I32) {
            this.userID = iprot.readI32();
            setUserIDIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CURRENT_BALANCE
          if (field.type == TType.DOUBLE) {
            this.currentBalance = iprot.readDouble();
            setCurrentBalanceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // AMOUNT
          if (field.type == TType.DOUBLE) {
            this.amount = iprot.readDouble();
            setAmountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TX_ID
          if (field.type == TType.I64) {
            this.txID = iprot.readI64();
            setTxIDIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TX_TYPE
          if (field.type == TType.I16) {
            this.txType = iprot.readI16();
            setTxTypeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // AGENT_ID
          if (field.type == TType.STRING) {
            this.agentID = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI32(this.userID);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CURRENT_BALANCE_FIELD_DESC);
    oprot.writeDouble(this.currentBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
    oprot.writeDouble(this.amount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TX_ID_FIELD_DESC);
    oprot.writeI64(this.txID);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TX_TYPE_FIELD_DESC);
    oprot.writeI16(this.txType);
    oprot.writeFieldEnd();
    if (this.agentID != null) {
      oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
      oprot.writeString(this.agentID);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("T_Account(");
    boolean first = true;

    sb.append("userID:");
    sb.append(this.userID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentBalance:");
    sb.append(this.currentBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("txID:");
    sb.append(this.txID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("txType:");
    sb.append(this.txType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentID:");
    if (this.agentID == null) {
      sb.append("null");
    } else {
      sb.append(this.agentID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

