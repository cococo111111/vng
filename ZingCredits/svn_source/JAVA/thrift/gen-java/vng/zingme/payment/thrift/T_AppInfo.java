/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package vng.zingme.payment.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class T_AppInfo implements TBase<T_AppInfo, T_AppInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("T_AppInfo");

  private static final TField APP_ID_FIELD_DESC = new TField("appID", TType.STRING, (short)1);
  private static final TField APP_NAME_FIELD_DESC = new TField("appName", TType.STRING, (short)2);
  private static final TField APP_DES_FIELD_DESC = new TField("appDes", TType.STRING, (short)3);
  private static final TField APP_URL_FIELD_DESC = new TField("appURL", TType.STRING, (short)4);
  private static final TField ICON_PATH_FIELD_DESC = new TField("iconPath", TType.STRING, (short)5);
  private static final TField REST_URL_FIELD_DESC = new TField("restURL", TType.STRING, (short)6);
  private static final TField KEY1_FIELD_DESC = new TField("key1", TType.STRING, (short)7);
  private static final TField KEY2_FIELD_DESC = new TField("key2", TType.STRING, (short)8);
  private static final TField IS_ENABLED_FIELD_DESC = new TField("isEnabled", TType.BYTE, (short)9);
  private static final TField LSWHITELIST_FIELD_DESC = new TField("lswhitelist", TType.LIST, (short)10);

  public String appID;
  public String appName;
  public String appDes;
  public String appURL;
  public String iconPath;
  public String restURL;
  public String key1;
  public String key2;
  public byte isEnabled;
  public List<Integer> lswhitelist;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    APP_ID((short)1, "appID"),
    APP_NAME((short)2, "appName"),
    APP_DES((short)3, "appDes"),
    APP_URL((short)4, "appURL"),
    ICON_PATH((short)5, "iconPath"),
    REST_URL((short)6, "restURL"),
    KEY1((short)7, "key1"),
    KEY2((short)8, "key2"),
    IS_ENABLED((short)9, "isEnabled"),
    LSWHITELIST((short)10, "lswhitelist");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_ID
          return APP_ID;
        case 2: // APP_NAME
          return APP_NAME;
        case 3: // APP_DES
          return APP_DES;
        case 4: // APP_URL
          return APP_URL;
        case 5: // ICON_PATH
          return ICON_PATH;
        case 6: // REST_URL
          return REST_URL;
        case 7: // KEY1
          return KEY1;
        case 8: // KEY2
          return KEY2;
        case 9: // IS_ENABLED
          return IS_ENABLED;
        case 10: // LSWHITELIST
          return LSWHITELIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISENABLED_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_ID, new FieldMetaData("appID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.APP_NAME, new FieldMetaData("appName", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.APP_DES, new FieldMetaData("appDes", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.APP_URL, new FieldMetaData("appURL", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ICON_PATH, new FieldMetaData("iconPath", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.REST_URL, new FieldMetaData("restURL", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.KEY1, new FieldMetaData("key1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.KEY2, new FieldMetaData("key2", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.IS_ENABLED, new FieldMetaData("isEnabled", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMap.put(_Fields.LSWHITELIST, new FieldMetaData("lswhitelist", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(T_AppInfo.class, metaDataMap);
  }

  public T_AppInfo() {
  }

  public T_AppInfo(
    String appID,
    String appName,
    String appDes,
    String appURL,
    String iconPath,
    String restURL,
    String key1,
    String key2,
    byte isEnabled,
    List<Integer> lswhitelist)
  {
    this();
    this.appID = appID;
    this.appName = appName;
    this.appDes = appDes;
    this.appURL = appURL;
    this.iconPath = iconPath;
    this.restURL = restURL;
    this.key1 = key1;
    this.key2 = key2;
    this.isEnabled = isEnabled;
    setIsEnabledIsSet(true);
    this.lswhitelist = lswhitelist;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public T_AppInfo(T_AppInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAppID()) {
      this.appID = other.appID;
    }
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetAppDes()) {
      this.appDes = other.appDes;
    }
    if (other.isSetAppURL()) {
      this.appURL = other.appURL;
    }
    if (other.isSetIconPath()) {
      this.iconPath = other.iconPath;
    }
    if (other.isSetRestURL()) {
      this.restURL = other.restURL;
    }
    if (other.isSetKey1()) {
      this.key1 = other.key1;
    }
    if (other.isSetKey2()) {
      this.key2 = other.key2;
    }
    this.isEnabled = other.isEnabled;
    if (other.isSetLswhitelist()) {
      List<Integer> __this__lswhitelist = new ArrayList<Integer>();
      for (Integer other_element : other.lswhitelist) {
        __this__lswhitelist.add(other_element);
      }
      this.lswhitelist = __this__lswhitelist;
    }
  }

  public T_AppInfo deepCopy() {
    return new T_AppInfo(this);
  }

  @Override
  public void clear() {
    this.appID = null;
    this.appName = null;
    this.appDes = null;
    this.appURL = null;
    this.iconPath = null;
    this.restURL = null;
    this.key1 = null;
    this.key2 = null;
    setIsEnabledIsSet(false);
    this.isEnabled = 0;
    this.lswhitelist = null;
  }

  public String getAppID() {
    return this.appID;
  }

  public T_AppInfo setAppID(String appID) {
    this.appID = appID;
    return this;
  }

  public void unsetAppID() {
    this.appID = null;
  }

  /** Returns true if field appID is set (has been asigned a value) and false otherwise */
  public boolean isSetAppID() {
    return this.appID != null;
  }

  public void setAppIDIsSet(boolean value) {
    if (!value) {
      this.appID = null;
    }
  }

  public String getAppName() {
    return this.appName;
  }

  public T_AppInfo setAppName(String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been asigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public String getAppDes() {
    return this.appDes;
  }

  public T_AppInfo setAppDes(String appDes) {
    this.appDes = appDes;
    return this;
  }

  public void unsetAppDes() {
    this.appDes = null;
  }

  /** Returns true if field appDes is set (has been asigned a value) and false otherwise */
  public boolean isSetAppDes() {
    return this.appDes != null;
  }

  public void setAppDesIsSet(boolean value) {
    if (!value) {
      this.appDes = null;
    }
  }

  public String getAppURL() {
    return this.appURL;
  }

  public T_AppInfo setAppURL(String appURL) {
    this.appURL = appURL;
    return this;
  }

  public void unsetAppURL() {
    this.appURL = null;
  }

  /** Returns true if field appURL is set (has been asigned a value) and false otherwise */
  public boolean isSetAppURL() {
    return this.appURL != null;
  }

  public void setAppURLIsSet(boolean value) {
    if (!value) {
      this.appURL = null;
    }
  }

  public String getIconPath() {
    return this.iconPath;
  }

  public T_AppInfo setIconPath(String iconPath) {
    this.iconPath = iconPath;
    return this;
  }

  public void unsetIconPath() {
    this.iconPath = null;
  }

  /** Returns true if field iconPath is set (has been asigned a value) and false otherwise */
  public boolean isSetIconPath() {
    return this.iconPath != null;
  }

  public void setIconPathIsSet(boolean value) {
    if (!value) {
      this.iconPath = null;
    }
  }

  public String getRestURL() {
    return this.restURL;
  }

  public T_AppInfo setRestURL(String restURL) {
    this.restURL = restURL;
    return this;
  }

  public void unsetRestURL() {
    this.restURL = null;
  }

  /** Returns true if field restURL is set (has been asigned a value) and false otherwise */
  public boolean isSetRestURL() {
    return this.restURL != null;
  }

  public void setRestURLIsSet(boolean value) {
    if (!value) {
      this.restURL = null;
    }
  }

  public String getKey1() {
    return this.key1;
  }

  public T_AppInfo setKey1(String key1) {
    this.key1 = key1;
    return this;
  }

  public void unsetKey1() {
    this.key1 = null;
  }

  /** Returns true if field key1 is set (has been asigned a value) and false otherwise */
  public boolean isSetKey1() {
    return this.key1 != null;
  }

  public void setKey1IsSet(boolean value) {
    if (!value) {
      this.key1 = null;
    }
  }

  public String getKey2() {
    return this.key2;
  }

  public T_AppInfo setKey2(String key2) {
    this.key2 = key2;
    return this;
  }

  public void unsetKey2() {
    this.key2 = null;
  }

  /** Returns true if field key2 is set (has been asigned a value) and false otherwise */
  public boolean isSetKey2() {
    return this.key2 != null;
  }

  public void setKey2IsSet(boolean value) {
    if (!value) {
      this.key2 = null;
    }
  }

  public byte getIsEnabled() {
    return this.isEnabled;
  }

  public T_AppInfo setIsEnabled(byte isEnabled) {
    this.isEnabled = isEnabled;
    setIsEnabledIsSet(true);
    return this;
  }

  public void unsetIsEnabled() {
    __isset_bit_vector.clear(__ISENABLED_ISSET_ID);
  }

  /** Returns true if field isEnabled is set (has been asigned a value) and false otherwise */
  public boolean isSetIsEnabled() {
    return __isset_bit_vector.get(__ISENABLED_ISSET_ID);
  }

  public void setIsEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__ISENABLED_ISSET_ID, value);
  }

  public int getLswhitelistSize() {
    return (this.lswhitelist == null) ? 0 : this.lswhitelist.size();
  }

  public java.util.Iterator<Integer> getLswhitelistIterator() {
    return (this.lswhitelist == null) ? null : this.lswhitelist.iterator();
  }

  public void addToLswhitelist(int elem) {
    if (this.lswhitelist == null) {
      this.lswhitelist = new ArrayList<Integer>();
    }
    this.lswhitelist.add(elem);
  }

  public List<Integer> getLswhitelist() {
    return this.lswhitelist;
  }

  public T_AppInfo setLswhitelist(List<Integer> lswhitelist) {
    this.lswhitelist = lswhitelist;
    return this;
  }

  public void unsetLswhitelist() {
    this.lswhitelist = null;
  }

  /** Returns true if field lswhitelist is set (has been asigned a value) and false otherwise */
  public boolean isSetLswhitelist() {
    return this.lswhitelist != null;
  }

  public void setLswhitelistIsSet(boolean value) {
    if (!value) {
      this.lswhitelist = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_ID:
      if (value == null) {
        unsetAppID();
      } else {
        setAppID((String)value);
      }
      break;

    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((String)value);
      }
      break;

    case APP_DES:
      if (value == null) {
        unsetAppDes();
      } else {
        setAppDes((String)value);
      }
      break;

    case APP_URL:
      if (value == null) {
        unsetAppURL();
      } else {
        setAppURL((String)value);
      }
      break;

    case ICON_PATH:
      if (value == null) {
        unsetIconPath();
      } else {
        setIconPath((String)value);
      }
      break;

    case REST_URL:
      if (value == null) {
        unsetRestURL();
      } else {
        setRestURL((String)value);
      }
      break;

    case KEY1:
      if (value == null) {
        unsetKey1();
      } else {
        setKey1((String)value);
      }
      break;

    case KEY2:
      if (value == null) {
        unsetKey2();
      } else {
        setKey2((String)value);
      }
      break;

    case IS_ENABLED:
      if (value == null) {
        unsetIsEnabled();
      } else {
        setIsEnabled((Byte)value);
      }
      break;

    case LSWHITELIST:
      if (value == null) {
        unsetLswhitelist();
      } else {
        setLswhitelist((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_ID:
      return getAppID();

    case APP_NAME:
      return getAppName();

    case APP_DES:
      return getAppDes();

    case APP_URL:
      return getAppURL();

    case ICON_PATH:
      return getIconPath();

    case REST_URL:
      return getRestURL();

    case KEY1:
      return getKey1();

    case KEY2:
      return getKey2();

    case IS_ENABLED:
      return new Byte(getIsEnabled());

    case LSWHITELIST:
      return getLswhitelist();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_ID:
      return isSetAppID();
    case APP_NAME:
      return isSetAppName();
    case APP_DES:
      return isSetAppDes();
    case APP_URL:
      return isSetAppURL();
    case ICON_PATH:
      return isSetIconPath();
    case REST_URL:
      return isSetRestURL();
    case KEY1:
      return isSetKey1();
    case KEY2:
      return isSetKey2();
    case IS_ENABLED:
      return isSetIsEnabled();
    case LSWHITELIST:
      return isSetLswhitelist();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof T_AppInfo)
      return this.equals((T_AppInfo)that);
    return false;
  }

  public boolean equals(T_AppInfo that) {
    if (that == null)
      return false;

    boolean this_present_appID = true && this.isSetAppID();
    boolean that_present_appID = true && that.isSetAppID();
    if (this_present_appID || that_present_appID) {
      if (!(this_present_appID && that_present_appID))
        return false;
      if (!this.appID.equals(that.appID))
        return false;
    }

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_appDes = true && this.isSetAppDes();
    boolean that_present_appDes = true && that.isSetAppDes();
    if (this_present_appDes || that_present_appDes) {
      if (!(this_present_appDes && that_present_appDes))
        return false;
      if (!this.appDes.equals(that.appDes))
        return false;
    }

    boolean this_present_appURL = true && this.isSetAppURL();
    boolean that_present_appURL = true && that.isSetAppURL();
    if (this_present_appURL || that_present_appURL) {
      if (!(this_present_appURL && that_present_appURL))
        return false;
      if (!this.appURL.equals(that.appURL))
        return false;
    }

    boolean this_present_iconPath = true && this.isSetIconPath();
    boolean that_present_iconPath = true && that.isSetIconPath();
    if (this_present_iconPath || that_present_iconPath) {
      if (!(this_present_iconPath && that_present_iconPath))
        return false;
      if (!this.iconPath.equals(that.iconPath))
        return false;
    }

    boolean this_present_restURL = true && this.isSetRestURL();
    boolean that_present_restURL = true && that.isSetRestURL();
    if (this_present_restURL || that_present_restURL) {
      if (!(this_present_restURL && that_present_restURL))
        return false;
      if (!this.restURL.equals(that.restURL))
        return false;
    }

    boolean this_present_key1 = true && this.isSetKey1();
    boolean that_present_key1 = true && that.isSetKey1();
    if (this_present_key1 || that_present_key1) {
      if (!(this_present_key1 && that_present_key1))
        return false;
      if (!this.key1.equals(that.key1))
        return false;
    }

    boolean this_present_key2 = true && this.isSetKey2();
    boolean that_present_key2 = true && that.isSetKey2();
    if (this_present_key2 || that_present_key2) {
      if (!(this_present_key2 && that_present_key2))
        return false;
      if (!this.key2.equals(that.key2))
        return false;
    }

    boolean this_present_isEnabled = true;
    boolean that_present_isEnabled = true;
    if (this_present_isEnabled || that_present_isEnabled) {
      if (!(this_present_isEnabled && that_present_isEnabled))
        return false;
      if (this.isEnabled != that.isEnabled)
        return false;
    }

    boolean this_present_lswhitelist = true && this.isSetLswhitelist();
    boolean that_present_lswhitelist = true && that.isSetLswhitelist();
    if (this_present_lswhitelist || that_present_lswhitelist) {
      if (!(this_present_lswhitelist && that_present_lswhitelist))
        return false;
      if (!this.lswhitelist.equals(that.lswhitelist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(T_AppInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    T_AppInfo typedOther = (T_AppInfo)other;

    lastComparison = Boolean.valueOf(isSetAppID()).compareTo(typedOther.isSetAppID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppID()) {
      lastComparison = TBaseHelper.compareTo(this.appID, typedOther.appID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppName()).compareTo(typedOther.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = TBaseHelper.compareTo(this.appName, typedOther.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppDes()).compareTo(typedOther.isSetAppDes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppDes()) {
      lastComparison = TBaseHelper.compareTo(this.appDes, typedOther.appDes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppURL()).compareTo(typedOther.isSetAppURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppURL()) {
      lastComparison = TBaseHelper.compareTo(this.appURL, typedOther.appURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIconPath()).compareTo(typedOther.isSetIconPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconPath()) {
      lastComparison = TBaseHelper.compareTo(this.iconPath, typedOther.iconPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestURL()).compareTo(typedOther.isSetRestURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestURL()) {
      lastComparison = TBaseHelper.compareTo(this.restURL, typedOther.restURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey1()).compareTo(typedOther.isSetKey1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey1()) {
      lastComparison = TBaseHelper.compareTo(this.key1, typedOther.key1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey2()).compareTo(typedOther.isSetKey2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey2()) {
      lastComparison = TBaseHelper.compareTo(this.key2, typedOther.key2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnabled()).compareTo(typedOther.isSetIsEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnabled()) {
      lastComparison = TBaseHelper.compareTo(this.isEnabled, typedOther.isEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLswhitelist()).compareTo(typedOther.isSetLswhitelist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLswhitelist()) {
      lastComparison = TBaseHelper.compareTo(this.lswhitelist, typedOther.lswhitelist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // APP_ID
          if (field.type == TType.STRING) {
            this.appID = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // APP_NAME
          if (field.type == TType.STRING) {
            this.appName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // APP_DES
          if (field.type == TType.STRING) {
            this.appDes = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // APP_URL
          if (field.type == TType.STRING) {
            this.appURL = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ICON_PATH
          if (field.type == TType.STRING) {
            this.iconPath = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // REST_URL
          if (field.type == TType.STRING) {
            this.restURL = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // KEY1
          if (field.type == TType.STRING) {
            this.key1 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // KEY2
          if (field.type == TType.STRING) {
            this.key2 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // IS_ENABLED
          if (field.type == TType.BYTE) {
            this.isEnabled = iprot.readByte();
            setIsEnabledIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // LSWHITELIST
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.lswhitelist = new ArrayList<Integer>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                int _elem2;
                _elem2 = iprot.readI32();
                this.lswhitelist.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.appID != null) {
      oprot.writeFieldBegin(APP_ID_FIELD_DESC);
      oprot.writeString(this.appID);
      oprot.writeFieldEnd();
    }
    if (this.appName != null) {
      oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
      oprot.writeString(this.appName);
      oprot.writeFieldEnd();
    }
    if (this.appDes != null) {
      oprot.writeFieldBegin(APP_DES_FIELD_DESC);
      oprot.writeString(this.appDes);
      oprot.writeFieldEnd();
    }
    if (this.appURL != null) {
      oprot.writeFieldBegin(APP_URL_FIELD_DESC);
      oprot.writeString(this.appURL);
      oprot.writeFieldEnd();
    }
    if (this.iconPath != null) {
      oprot.writeFieldBegin(ICON_PATH_FIELD_DESC);
      oprot.writeString(this.iconPath);
      oprot.writeFieldEnd();
    }
    if (this.restURL != null) {
      oprot.writeFieldBegin(REST_URL_FIELD_DESC);
      oprot.writeString(this.restURL);
      oprot.writeFieldEnd();
    }
    if (this.key1 != null) {
      oprot.writeFieldBegin(KEY1_FIELD_DESC);
      oprot.writeString(this.key1);
      oprot.writeFieldEnd();
    }
    if (this.key2 != null) {
      oprot.writeFieldBegin(KEY2_FIELD_DESC);
      oprot.writeString(this.key2);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_ENABLED_FIELD_DESC);
    oprot.writeByte(this.isEnabled);
    oprot.writeFieldEnd();
    if (this.lswhitelist != null) {
      oprot.writeFieldBegin(LSWHITELIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.lswhitelist.size()));
        for (int _iter3 : this.lswhitelist)
        {
          oprot.writeI32(_iter3);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("T_AppInfo(");
    boolean first = true;

    sb.append("appID:");
    if (this.appID == null) {
      sb.append("null");
    } else {
      sb.append(this.appID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appName:");
    if (this.appName == null) {
      sb.append("null");
    } else {
      sb.append(this.appName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appDes:");
    if (this.appDes == null) {
      sb.append("null");
    } else {
      sb.append(this.appDes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appURL:");
    if (this.appURL == null) {
      sb.append("null");
    } else {
      sb.append(this.appURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconPath:");
    if (this.iconPath == null) {
      sb.append("null");
    } else {
      sb.append(this.iconPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("restURL:");
    if (this.restURL == null) {
      sb.append("null");
    } else {
      sb.append(this.restURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key1:");
    if (this.key1 == null) {
      sb.append("null");
    } else {
      sb.append(this.key1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key2:");
    if (this.key2 == null) {
      sb.append("null");
    } else {
      sb.append(this.key2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnabled:");
    sb.append(this.isEnabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lswhitelist:");
    if (this.lswhitelist == null) {
      sb.append("null");
    } else {
      sb.append(this.lswhitelist);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

